<?php
/**
 * BulkUpdateContentsDto
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Squidex API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BulkUpdateContentsDto Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BulkUpdateContentsDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BulkUpdateContentsDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'jobs' => '\OpenAPI\Client\Model\BulkUpdateContentsJobDto[]',
        'publish' => 'bool',
        'do_not_script' => 'bool',
        'do_not_validate' => 'bool',
        'do_not_validate_workflow' => 'bool',
        'check_referrers' => 'bool',
        'optimize_validation' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'jobs' => null,
        'publish' => null,
        'do_not_script' => null,
        'do_not_validate' => null,
        'do_not_validate_workflow' => null,
        'check_referrers' => null,
        'optimize_validation' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'jobs' => false,
		'publish' => false,
		'do_not_script' => false,
		'do_not_validate' => false,
		'do_not_validate_workflow' => false,
		'check_referrers' => false,
		'optimize_validation' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'jobs' => 'jobs',
        'publish' => 'publish',
        'do_not_script' => 'doNotScript',
        'do_not_validate' => 'doNotValidate',
        'do_not_validate_workflow' => 'doNotValidateWorkflow',
        'check_referrers' => 'checkReferrers',
        'optimize_validation' => 'optimizeValidation'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'jobs' => 'setJobs',
        'publish' => 'setPublish',
        'do_not_script' => 'setDoNotScript',
        'do_not_validate' => 'setDoNotValidate',
        'do_not_validate_workflow' => 'setDoNotValidateWorkflow',
        'check_referrers' => 'setCheckReferrers',
        'optimize_validation' => 'setOptimizeValidation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'jobs' => 'getJobs',
        'publish' => 'getPublish',
        'do_not_script' => 'getDoNotScript',
        'do_not_validate' => 'getDoNotValidate',
        'do_not_validate_workflow' => 'getDoNotValidateWorkflow',
        'check_referrers' => 'getCheckReferrers',
        'optimize_validation' => 'getOptimizeValidation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('jobs', $data ?? [], null);
        $this->setIfExists('publish', $data ?? [], null);
        $this->setIfExists('do_not_script', $data ?? [], null);
        $this->setIfExists('do_not_validate', $data ?? [], null);
        $this->setIfExists('do_not_validate_workflow', $data ?? [], null);
        $this->setIfExists('check_referrers', $data ?? [], null);
        $this->setIfExists('optimize_validation', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['jobs'] === null) {
            $invalidProperties[] = "'jobs' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets jobs
     *
     * @return \OpenAPI\Client\Model\BulkUpdateContentsJobDto[]
     */
    public function getJobs()
    {
        return $this->container['jobs'];
    }

    /**
     * Sets jobs
     *
     * @param \OpenAPI\Client\Model\BulkUpdateContentsJobDto[] $jobs The contents to update or insert.
     *
     * @return self
     */
    public function setJobs($jobs)
    {
        if (is_null($jobs)) {
            throw new \InvalidArgumentException('non-nullable jobs cannot be null');
        }
        $this->container['jobs'] = $jobs;

        return $this;
    }

    /**
     * Gets publish
     *
     * @return bool|null
     * @deprecated
     */
    public function getPublish()
    {
        return $this->container['publish'];
    }

    /**
     * Sets publish
     *
     * @param bool|null $publish True to automatically publish the content.
     *
     * @return self
     * @deprecated
     */
    public function setPublish($publish)
    {
        if (is_null($publish)) {
            throw new \InvalidArgumentException('non-nullable publish cannot be null');
        }
        $this->container['publish'] = $publish;

        return $this;
    }

    /**
     * Gets do_not_script
     *
     * @return bool|null
     */
    public function getDoNotScript()
    {
        return $this->container['do_not_script'];
    }

    /**
     * Sets do_not_script
     *
     * @param bool|null $do_not_script True to turn off scripting for faster inserts. Default: true.
     *
     * @return self
     */
    public function setDoNotScript($do_not_script)
    {
        if (is_null($do_not_script)) {
            throw new \InvalidArgumentException('non-nullable do_not_script cannot be null');
        }
        $this->container['do_not_script'] = $do_not_script;

        return $this;
    }

    /**
     * Gets do_not_validate
     *
     * @return bool|null
     */
    public function getDoNotValidate()
    {
        return $this->container['do_not_validate'];
    }

    /**
     * Sets do_not_validate
     *
     * @param bool|null $do_not_validate True to turn off validation for faster inserts. Default: false.
     *
     * @return self
     */
    public function setDoNotValidate($do_not_validate)
    {
        if (is_null($do_not_validate)) {
            throw new \InvalidArgumentException('non-nullable do_not_validate cannot be null');
        }
        $this->container['do_not_validate'] = $do_not_validate;

        return $this;
    }

    /**
     * Gets do_not_validate_workflow
     *
     * @return bool|null
     */
    public function getDoNotValidateWorkflow()
    {
        return $this->container['do_not_validate_workflow'];
    }

    /**
     * Sets do_not_validate_workflow
     *
     * @param bool|null $do_not_validate_workflow True to turn off validation of workflow rules. Default: false.
     *
     * @return self
     */
    public function setDoNotValidateWorkflow($do_not_validate_workflow)
    {
        if (is_null($do_not_validate_workflow)) {
            throw new \InvalidArgumentException('non-nullable do_not_validate_workflow cannot be null');
        }
        $this->container['do_not_validate_workflow'] = $do_not_validate_workflow;

        return $this;
    }

    /**
     * Gets check_referrers
     *
     * @return bool|null
     */
    public function getCheckReferrers()
    {
        return $this->container['check_referrers'];
    }

    /**
     * Sets check_referrers
     *
     * @param bool|null $check_referrers True to check referrers of deleted contents.
     *
     * @return self
     */
    public function setCheckReferrers($check_referrers)
    {
        if (is_null($check_referrers)) {
            throw new \InvalidArgumentException('non-nullable check_referrers cannot be null');
        }
        $this->container['check_referrers'] = $check_referrers;

        return $this;
    }

    /**
     * Gets optimize_validation
     *
     * @return bool|null
     */
    public function getOptimizeValidation()
    {
        return $this->container['optimize_validation'];
    }

    /**
     * Sets optimize_validation
     *
     * @param bool|null $optimize_validation True to turn off costly validation: Unique checks, asset checks and reference checks. Default: true.
     *
     * @return self
     */
    public function setOptimizeValidation($optimize_validation)
    {
        if (is_null($optimize_validation)) {
            throw new \InvalidArgumentException('non-nullable optimize_validation cannot be null');
        }
        $this->container['optimize_validation'] = $optimize_validation;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


