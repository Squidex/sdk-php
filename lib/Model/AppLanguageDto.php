<?php
/**
 * AppLanguageDto
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Squidex/Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Squidex API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Squidex/Client\Model;

use \ArrayAccess;
use \Squidex/Client\ObjectSerializer;

/**
 * AppLanguageDto Class Doc Comment
 *
 * @category Class
 * @package  Squidex/Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AppLanguageDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AppLanguageDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        '_links' => 'array<string,\Squidex/Client\Model\ResourceLink>',
        'iso2_code' => 'string',
        'english_name' => 'string',
        'fallback' => 'string[]',
        'is_master' => 'bool',
        'is_optional' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        '_links' => null,
        'iso2_code' => null,
        'english_name' => null,
        'fallback' => null,
        'is_master' => null,
        'is_optional' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        '_links' => false,
		'iso2_code' => false,
		'english_name' => false,
		'fallback' => false,
		'is_master' => false,
		'is_optional' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        '_links' => '_links',
        'iso2_code' => 'iso2Code',
        'english_name' => 'englishName',
        'fallback' => 'fallback',
        'is_master' => 'isMaster',
        'is_optional' => 'isOptional'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        '_links' => 'setLinks',
        'iso2_code' => 'setIso2Code',
        'english_name' => 'setEnglishName',
        'fallback' => 'setFallback',
        'is_master' => 'setIsMaster',
        'is_optional' => 'setIsOptional'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        '_links' => 'getLinks',
        'iso2_code' => 'getIso2Code',
        'english_name' => 'getEnglishName',
        'fallback' => 'getFallback',
        'is_master' => 'getIsMaster',
        'is_optional' => 'getIsOptional'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('_links', $data ?? [], null);
        $this->setIfExists('iso2_code', $data ?? [], null);
        $this->setIfExists('english_name', $data ?? [], null);
        $this->setIfExists('fallback', $data ?? [], null);
        $this->setIfExists('is_master', $data ?? [], null);
        $this->setIfExists('is_optional', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['_links'] === null) {
            $invalidProperties[] = "'_links' can't be null";
        }
        if ($this->container['iso2_code'] === null) {
            $invalidProperties[] = "'iso2_code' can't be null";
        }
        if ($this->container['english_name'] === null) {
            $invalidProperties[] = "'english_name' can't be null";
        }
        if ($this->container['fallback'] === null) {
            $invalidProperties[] = "'fallback' can't be null";
        }
        if ($this->container['is_master'] === null) {
            $invalidProperties[] = "'is_master' can't be null";
        }
        if ($this->container['is_optional'] === null) {
            $invalidProperties[] = "'is_optional' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets _links
     *
     * @return array<string,\Squidex/Client\Model\ResourceLink>
     */
    public function getLinks()
    {
        return $this->container['_links'];
    }

    /**
     * Sets _links
     *
     * @param array<string,\Squidex/Client\Model\ResourceLink> $_links The links.
     *
     * @return self
     */
    public function setLinks($_links)
    {
        if (is_null($_links)) {
            throw new \InvalidArgumentException('non-nullable _links cannot be null');
        }
        $this->container['_links'] = $_links;

        return $this;
    }

    /**
     * Gets iso2_code
     *
     * @return string
     */
    public function getIso2Code()
    {
        return $this->container['iso2_code'];
    }

    /**
     * Sets iso2_code
     *
     * @param string $iso2_code The iso code of the language.
     *
     * @return self
     */
    public function setIso2Code($iso2_code)
    {
        if (is_null($iso2_code)) {
            throw new \InvalidArgumentException('non-nullable iso2_code cannot be null');
        }
        $this->container['iso2_code'] = $iso2_code;

        return $this;
    }

    /**
     * Gets english_name
     *
     * @return string
     */
    public function getEnglishName()
    {
        return $this->container['english_name'];
    }

    /**
     * Sets english_name
     *
     * @param string $english_name The english name of the language.
     *
     * @return self
     */
    public function setEnglishName($english_name)
    {
        if (is_null($english_name)) {
            throw new \InvalidArgumentException('non-nullable english_name cannot be null');
        }
        $this->container['english_name'] = $english_name;

        return $this;
    }

    /**
     * Gets fallback
     *
     * @return string[]
     */
    public function getFallback()
    {
        return $this->container['fallback'];
    }

    /**
     * Sets fallback
     *
     * @param string[] $fallback The fallback languages.
     *
     * @return self
     */
    public function setFallback($fallback)
    {
        if (is_null($fallback)) {
            throw new \InvalidArgumentException('non-nullable fallback cannot be null');
        }
        $this->container['fallback'] = $fallback;

        return $this;
    }

    /**
     * Gets is_master
     *
     * @return bool
     */
    public function getIsMaster()
    {
        return $this->container['is_master'];
    }

    /**
     * Sets is_master
     *
     * @param bool $is_master Indicates if the language is the master language.
     *
     * @return self
     */
    public function setIsMaster($is_master)
    {
        if (is_null($is_master)) {
            throw new \InvalidArgumentException('non-nullable is_master cannot be null');
        }
        $this->container['is_master'] = $is_master;

        return $this;
    }

    /**
     * Gets is_optional
     *
     * @return bool
     */
    public function getIsOptional()
    {
        return $this->container['is_optional'];
    }

    /**
     * Sets is_optional
     *
     * @param bool $is_optional Indicates if the language is optional.
     *
     * @return self
     */
    public function setIsOptional($is_optional)
    {
        if (is_null($is_optional)) {
            throw new \InvalidArgumentException('non-nullable is_optional cannot be null');
        }
        $this->container['is_optional'] = $is_optional;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


