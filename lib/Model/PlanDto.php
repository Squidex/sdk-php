<?php
/**
 * PlanDto
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Squidex/Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Squidex API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Squidex/Client\Model;

use \ArrayAccess;
use \Squidex/Client\ObjectSerializer;

/**
 * PlanDto Class Doc Comment
 *
 * @category Class
 * @package  Squidex/Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PlanDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PlanDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'name' => 'string',
        'costs' => 'string',
        'confirm_text' => 'string',
        'yearly_confirm_text' => 'string',
        'yearly_costs' => 'string',
        'yearly_id' => 'string',
        'max_api_bytes' => 'int',
        'max_api_calls' => 'int',
        'max_asset_size' => 'int',
        'max_contributors' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'costs' => null,
        'confirm_text' => null,
        'yearly_confirm_text' => null,
        'yearly_costs' => null,
        'yearly_id' => null,
        'max_api_bytes' => 'int64',
        'max_api_calls' => 'int64',
        'max_asset_size' => 'int64',
        'max_contributors' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'name' => false,
		'costs' => false,
		'confirm_text' => true,
		'yearly_confirm_text' => true,
		'yearly_costs' => true,
		'yearly_id' => true,
		'max_api_bytes' => false,
		'max_api_calls' => false,
		'max_asset_size' => false,
		'max_contributors' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'costs' => 'costs',
        'confirm_text' => 'confirmText',
        'yearly_confirm_text' => 'yearlyConfirmText',
        'yearly_costs' => 'yearlyCosts',
        'yearly_id' => 'yearlyId',
        'max_api_bytes' => 'maxApiBytes',
        'max_api_calls' => 'maxApiCalls',
        'max_asset_size' => 'maxAssetSize',
        'max_contributors' => 'maxContributors'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'costs' => 'setCosts',
        'confirm_text' => 'setConfirmText',
        'yearly_confirm_text' => 'setYearlyConfirmText',
        'yearly_costs' => 'setYearlyCosts',
        'yearly_id' => 'setYearlyId',
        'max_api_bytes' => 'setMaxApiBytes',
        'max_api_calls' => 'setMaxApiCalls',
        'max_asset_size' => 'setMaxAssetSize',
        'max_contributors' => 'setMaxContributors'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'costs' => 'getCosts',
        'confirm_text' => 'getConfirmText',
        'yearly_confirm_text' => 'getYearlyConfirmText',
        'yearly_costs' => 'getYearlyCosts',
        'yearly_id' => 'getYearlyId',
        'max_api_bytes' => 'getMaxApiBytes',
        'max_api_calls' => 'getMaxApiCalls',
        'max_asset_size' => 'getMaxAssetSize',
        'max_contributors' => 'getMaxContributors'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('costs', $data ?? [], null);
        $this->setIfExists('confirm_text', $data ?? [], null);
        $this->setIfExists('yearly_confirm_text', $data ?? [], null);
        $this->setIfExists('yearly_costs', $data ?? [], null);
        $this->setIfExists('yearly_id', $data ?? [], null);
        $this->setIfExists('max_api_bytes', $data ?? [], null);
        $this->setIfExists('max_api_calls', $data ?? [], null);
        $this->setIfExists('max_asset_size', $data ?? [], null);
        $this->setIfExists('max_contributors', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['costs'] === null) {
            $invalidProperties[] = "'costs' can't be null";
        }
        if ($this->container['max_api_bytes'] === null) {
            $invalidProperties[] = "'max_api_bytes' can't be null";
        }
        if ($this->container['max_api_calls'] === null) {
            $invalidProperties[] = "'max_api_calls' can't be null";
        }
        if ($this->container['max_asset_size'] === null) {
            $invalidProperties[] = "'max_asset_size' can't be null";
        }
        if ($this->container['max_contributors'] === null) {
            $invalidProperties[] = "'max_contributors' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The ID of the plan.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the plan.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets costs
     *
     * @return string
     */
    public function getCosts()
    {
        return $this->container['costs'];
    }

    /**
     * Sets costs
     *
     * @param string $costs The monthly costs of the plan.
     *
     * @return self
     */
    public function setCosts($costs)
    {
        if (is_null($costs)) {
            throw new \InvalidArgumentException('non-nullable costs cannot be null');
        }
        $this->container['costs'] = $costs;

        return $this;
    }

    /**
     * Gets confirm_text
     *
     * @return string|null
     */
    public function getConfirmText()
    {
        return $this->container['confirm_text'];
    }

    /**
     * Sets confirm_text
     *
     * @param string|null $confirm_text An optional confirm text for the monthly subscription.
     *
     * @return self
     */
    public function setConfirmText($confirm_text)
    {
        if (is_null($confirm_text)) {
            array_push($this->openAPINullablesSetToNull, 'confirm_text');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('confirm_text', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['confirm_text'] = $confirm_text;

        return $this;
    }

    /**
     * Gets yearly_confirm_text
     *
     * @return string|null
     */
    public function getYearlyConfirmText()
    {
        return $this->container['yearly_confirm_text'];
    }

    /**
     * Sets yearly_confirm_text
     *
     * @param string|null $yearly_confirm_text An optional confirm text for the yearly subscription.
     *
     * @return self
     */
    public function setYearlyConfirmText($yearly_confirm_text)
    {
        if (is_null($yearly_confirm_text)) {
            array_push($this->openAPINullablesSetToNull, 'yearly_confirm_text');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('yearly_confirm_text', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['yearly_confirm_text'] = $yearly_confirm_text;

        return $this;
    }

    /**
     * Gets yearly_costs
     *
     * @return string|null
     */
    public function getYearlyCosts()
    {
        return $this->container['yearly_costs'];
    }

    /**
     * Sets yearly_costs
     *
     * @param string|null $yearly_costs The yearly costs of the plan.
     *
     * @return self
     */
    public function setYearlyCosts($yearly_costs)
    {
        if (is_null($yearly_costs)) {
            array_push($this->openAPINullablesSetToNull, 'yearly_costs');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('yearly_costs', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['yearly_costs'] = $yearly_costs;

        return $this;
    }

    /**
     * Gets yearly_id
     *
     * @return string|null
     */
    public function getYearlyId()
    {
        return $this->container['yearly_id'];
    }

    /**
     * Sets yearly_id
     *
     * @param string|null $yearly_id The yearly ID of the plan.
     *
     * @return self
     */
    public function setYearlyId($yearly_id)
    {
        if (is_null($yearly_id)) {
            array_push($this->openAPINullablesSetToNull, 'yearly_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('yearly_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['yearly_id'] = $yearly_id;

        return $this;
    }

    /**
     * Gets max_api_bytes
     *
     * @return int
     */
    public function getMaxApiBytes()
    {
        return $this->container['max_api_bytes'];
    }

    /**
     * Sets max_api_bytes
     *
     * @param int $max_api_bytes The maximum number of API traffic.
     *
     * @return self
     */
    public function setMaxApiBytes($max_api_bytes)
    {
        if (is_null($max_api_bytes)) {
            throw new \InvalidArgumentException('non-nullable max_api_bytes cannot be null');
        }
        $this->container['max_api_bytes'] = $max_api_bytes;

        return $this;
    }

    /**
     * Gets max_api_calls
     *
     * @return int
     */
    public function getMaxApiCalls()
    {
        return $this->container['max_api_calls'];
    }

    /**
     * Sets max_api_calls
     *
     * @param int $max_api_calls The maximum number of API calls.
     *
     * @return self
     */
    public function setMaxApiCalls($max_api_calls)
    {
        if (is_null($max_api_calls)) {
            throw new \InvalidArgumentException('non-nullable max_api_calls cannot be null');
        }
        $this->container['max_api_calls'] = $max_api_calls;

        return $this;
    }

    /**
     * Gets max_asset_size
     *
     * @return int
     */
    public function getMaxAssetSize()
    {
        return $this->container['max_asset_size'];
    }

    /**
     * Sets max_asset_size
     *
     * @param int $max_asset_size The maximum allowed asset size.
     *
     * @return self
     */
    public function setMaxAssetSize($max_asset_size)
    {
        if (is_null($max_asset_size)) {
            throw new \InvalidArgumentException('non-nullable max_asset_size cannot be null');
        }
        $this->container['max_asset_size'] = $max_asset_size;

        return $this;
    }

    /**
     * Gets max_contributors
     *
     * @return int
     */
    public function getMaxContributors()
    {
        return $this->container['max_contributors'];
    }

    /**
     * Sets max_contributors
     *
     * @param int $max_contributors The maximum number of contributors.
     *
     * @return self
     */
    public function setMaxContributors($max_contributors)
    {
        if (is_null($max_contributors)) {
            throw new \InvalidArgumentException('non-nullable max_contributors cannot be null');
        }
        $this->container['max_contributors'] = $max_contributors;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


