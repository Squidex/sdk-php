<?php
/**
 * ContentDto
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Squidex\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Squidex API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Squidex\Client\Model;

use \ArrayAccess;
use \Squidex\Client\ObjectSerializer;

/**
 * ContentDto Class Doc Comment
 *
 * @category Class
 * @package  Squidex\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ContentDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ContentDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        '_links' => 'array<string,\Squidex\Client\Model\ResourceLink>',
        'id' => 'string',
        'created_by' => 'string',
        'last_modified_by' => 'string',
        'data' => 'mixed',
        'reference_data' => 'array<string,array>',
        'created' => '\DateTime',
        'last_modified' => '\DateTime',
        'status' => 'string',
        'new_status' => 'string',
        'status_color' => 'string',
        'new_status_color' => 'string',
        'edit_token' => 'string',
        'schedule_job' => '\Squidex\Client\Model\ScheduleJobDto',
        'schema_id' => 'string',
        'schema_name' => 'string',
        'schema_display_name' => 'string',
        'reference_fields' => '\Squidex\Client\Model\FieldDto[]',
        'is_deleted' => 'bool',
        'version' => 'int'
    ];

    /**
      * Array of mapping. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIMappings = [
    ];

    /**
      * Array of mapping. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIMappingsReverse = [
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        '_links' => null,
        'id' => null,
        'created_by' => null,
        'last_modified_by' => null,
        'data' => null,
        'reference_data' => null,
        'created' => 'date-time',
        'last_modified' => 'date-time',
        'status' => null,
        'new_status' => null,
        'status_color' => null,
        'new_status_color' => null,
        'edit_token' => null,
        'schedule_job' => null,
        'schema_id' => null,
        'schema_name' => null,
        'schema_display_name' => null,
        'reference_fields' => null,
        'is_deleted' => null,
        'version' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        '_links' => false,
		'id' => false,
		'created_by' => false,
		'last_modified_by' => false,
		'data' => true,
		'reference_data' => false,
		'created' => false,
		'last_modified' => false,
		'status' => false,
		'new_status' => true,
		'status_color' => false,
		'new_status_color' => true,
		'edit_token' => true,
		'schedule_job' => false,
		'schema_id' => false,
		'schema_name' => true,
		'schema_display_name' => true,
		'reference_fields' => true,
		'is_deleted' => false,
		'version' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of discriminator mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIMappings()
    {
        return self::$openAPIMappings;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        '_links' => '_links',
        'id' => 'id',
        'created_by' => 'createdBy',
        'last_modified_by' => 'lastModifiedBy',
        'data' => 'data',
        'reference_data' => 'referenceData',
        'created' => 'created',
        'last_modified' => 'lastModified',
        'status' => 'status',
        'new_status' => 'newStatus',
        'status_color' => 'statusColor',
        'new_status_color' => 'newStatusColor',
        'edit_token' => 'editToken',
        'schedule_job' => 'scheduleJob',
        'schema_id' => 'schemaId',
        'schema_name' => 'schemaName',
        'schema_display_name' => 'schemaDisplayName',
        'reference_fields' => 'referenceFields',
        'is_deleted' => 'isDeleted',
        'version' => 'version'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        '_links' => 'setLinks',
        'id' => 'setId',
        'created_by' => 'setCreatedBy',
        'last_modified_by' => 'setLastModifiedBy',
        'data' => 'setData',
        'reference_data' => 'setReferenceData',
        'created' => 'setCreated',
        'last_modified' => 'setLastModified',
        'status' => 'setStatus',
        'new_status' => 'setNewStatus',
        'status_color' => 'setStatusColor',
        'new_status_color' => 'setNewStatusColor',
        'edit_token' => 'setEditToken',
        'schedule_job' => 'setScheduleJob',
        'schema_id' => 'setSchemaId',
        'schema_name' => 'setSchemaName',
        'schema_display_name' => 'setSchemaDisplayName',
        'reference_fields' => 'setReferenceFields',
        'is_deleted' => 'setIsDeleted',
        'version' => 'setVersion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        '_links' => 'getLinks',
        'id' => 'getId',
        'created_by' => 'getCreatedBy',
        'last_modified_by' => 'getLastModifiedBy',
        'data' => 'getData',
        'reference_data' => 'getReferenceData',
        'created' => 'getCreated',
        'last_modified' => 'getLastModified',
        'status' => 'getStatus',
        'new_status' => 'getNewStatus',
        'status_color' => 'getStatusColor',
        'new_status_color' => 'getNewStatusColor',
        'edit_token' => 'getEditToken',
        'schedule_job' => 'getScheduleJob',
        'schema_id' => 'getSchemaId',
        'schema_name' => 'getSchemaName',
        'schema_display_name' => 'getSchemaDisplayName',
        'reference_fields' => 'getReferenceFields',
        'is_deleted' => 'getIsDeleted',
        'version' => 'getVersion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('_links', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('created_by', $data ?? [], null);
        $this->setIfExists('last_modified_by', $data ?? [], null);
        $this->setIfExists('data', $data ?? [], null);
        $this->setIfExists('reference_data', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('last_modified', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('new_status', $data ?? [], null);
        $this->setIfExists('status_color', $data ?? [], null);
        $this->setIfExists('new_status_color', $data ?? [], null);
        $this->setIfExists('edit_token', $data ?? [], null);
        $this->setIfExists('schedule_job', $data ?? [], null);
        $this->setIfExists('schema_id', $data ?? [], null);
        $this->setIfExists('schema_name', $data ?? [], null);
        $this->setIfExists('schema_display_name', $data ?? [], null);
        $this->setIfExists('reference_fields', $data ?? [], null);
        $this->setIfExists('is_deleted', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);

    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['_links'] === null) {
            $invalidProperties[] = "'_links' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['created_by'] === null) {
            $invalidProperties[] = "'created_by' can't be null";
        }
        if ($this->container['last_modified_by'] === null) {
            $invalidProperties[] = "'last_modified_by' can't be null";
        }
        if ($this->container['data'] === null) {
            $invalidProperties[] = "'data' can't be null";
        }
        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        if ($this->container['last_modified'] === null) {
            $invalidProperties[] = "'last_modified' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['status_color'] === null) {
            $invalidProperties[] = "'status_color' can't be null";
        }
        if ($this->container['schema_id'] === null) {
            $invalidProperties[] = "'schema_id' can't be null";
        }
        if ($this->container['is_deleted'] === null) {
            $invalidProperties[] = "'is_deleted' can't be null";
        }
        if ($this->container['version'] === null) {
            $invalidProperties[] = "'version' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets _links
     *
     * @return array<string,\Squidex\Client\Model\ResourceLink>
     */
    public function getLinks()
    {
        return $this->container['_links'];
    }

    /**
     * Sets _links
     *
     * @param array<string,\Squidex\Client\Model\ResourceLink> $_links The links.
     *
     * @return self
     */
    public function setLinks($_links)
    {
        if (is_null($_links)) {
            throw new \InvalidArgumentException('non-nullable _links cannot be null');
        }
        $this->container['_links'] = $_links;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The if of the content item.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return string
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param string $created_by The user that has created the content item.
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        if (is_null($created_by)) {
            throw new \InvalidArgumentException('non-nullable created_by cannot be null');
        }
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets last_modified_by
     *
     * @return string
     */
    public function getLastModifiedBy()
    {
        return $this->container['last_modified_by'];
    }

    /**
     * Sets last_modified_by
     *
     * @param string $last_modified_by The user that has updated the content item.
     *
     * @return self
     */
    public function setLastModifiedBy($last_modified_by)
    {
        if (is_null($last_modified_by)) {
            throw new \InvalidArgumentException('non-nullable last_modified_by cannot be null');
        }
        $this->container['last_modified_by'] = $last_modified_by;

        return $this;
    }

    /**
     * Gets data
     *
     * @return mixed
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     *
     * @param mixed $data The data of the content item.
     *
     * @return self
     */
    public function setData($data)
    {
        if (is_null($data)) {
            array_push($this->openAPINullablesSetToNull, 'data');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets reference_data
     *
     * @return array<string,array>|null
     */
    public function getReferenceData()
    {
        return $this->container['reference_data'];
    }

    /**
     * Sets reference_data
     *
     * @param array<string,array>|null $reference_data reference_data
     *
     * @return self
     */
    public function setReferenceData($reference_data)
    {
        if (is_null($reference_data)) {
            throw new \InvalidArgumentException('non-nullable reference_data cannot be null');
        }
        $this->container['reference_data'] = $reference_data;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created The date and time when the content item has been created.
     *
     * @return self
     */
    public function setCreated($created)
    {
        if (is_null($created)) {
            throw new \InvalidArgumentException('non-nullable created cannot be null');
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets last_modified
     *
     * @return \DateTime
     */
    public function getLastModified()
    {
        return $this->container['last_modified'];
    }

    /**
     * Sets last_modified
     *
     * @param \DateTime $last_modified The date and time when the content item has been modified last.
     *
     * @return self
     */
    public function setLastModified($last_modified)
    {
        if (is_null($last_modified)) {
            throw new \InvalidArgumentException('non-nullable last_modified cannot be null');
        }
        $this->container['last_modified'] = $last_modified;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The status of the content.
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets new_status
     *
     * @return string|null
     */
    public function getNewStatus()
    {
        return $this->container['new_status'];
    }

    /**
     * Sets new_status
     *
     * @param string|null $new_status The new status of the content.
     *
     * @return self
     */
    public function setNewStatus($new_status)
    {
        if (is_null($new_status)) {
            array_push($this->openAPINullablesSetToNull, 'new_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('new_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['new_status'] = $new_status;

        return $this;
    }

    /**
     * Gets status_color
     *
     * @return string
     */
    public function getStatusColor()
    {
        return $this->container['status_color'];
    }

    /**
     * Sets status_color
     *
     * @param string $status_color The color of the status.
     *
     * @return self
     */
    public function setStatusColor($status_color)
    {
        if (is_null($status_color)) {
            throw new \InvalidArgumentException('non-nullable status_color cannot be null');
        }
        $this->container['status_color'] = $status_color;

        return $this;
    }

    /**
     * Gets new_status_color
     *
     * @return string|null
     */
    public function getNewStatusColor()
    {
        return $this->container['new_status_color'];
    }

    /**
     * Sets new_status_color
     *
     * @param string|null $new_status_color The color of the new status.
     *
     * @return self
     */
    public function setNewStatusColor($new_status_color)
    {
        if (is_null($new_status_color)) {
            array_push($this->openAPINullablesSetToNull, 'new_status_color');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('new_status_color', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['new_status_color'] = $new_status_color;

        return $this;
    }

    /**
     * Gets edit_token
     *
     * @return string|null
     */
    public function getEditToken()
    {
        return $this->container['edit_token'];
    }

    /**
     * Sets edit_token
     *
     * @param string|null $edit_token The UI token.
     *
     * @return self
     */
    public function setEditToken($edit_token)
    {
        if (is_null($edit_token)) {
            array_push($this->openAPINullablesSetToNull, 'edit_token');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('edit_token', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['edit_token'] = $edit_token;

        return $this;
    }

    /**
     * Gets schedule_job
     *
     * @return \Squidex\Client\Model\ScheduleJobDto|null
     */
    public function getScheduleJob()
    {
        return $this->container['schedule_job'];
    }

    /**
     * Sets schedule_job
     *
     * @param \Squidex\Client\Model\ScheduleJobDto|null $schedule_job schedule_job
     *
     * @return self
     */
    public function setScheduleJob($schedule_job)
    {
        if (is_null($schedule_job)) {
            throw new \InvalidArgumentException('non-nullable schedule_job cannot be null');
        }
        $this->container['schedule_job'] = $schedule_job;

        return $this;
    }

    /**
     * Gets schema_id
     *
     * @return string
     */
    public function getSchemaId()
    {
        return $this->container['schema_id'];
    }

    /**
     * Sets schema_id
     *
     * @param string $schema_id The ID of the schema.
     *
     * @return self
     */
    public function setSchemaId($schema_id)
    {
        if (is_null($schema_id)) {
            throw new \InvalidArgumentException('non-nullable schema_id cannot be null');
        }
        $this->container['schema_id'] = $schema_id;

        return $this;
    }

    /**
     * Gets schema_name
     *
     * @return string|null
     */
    public function getSchemaName()
    {
        return $this->container['schema_name'];
    }

    /**
     * Sets schema_name
     *
     * @param string|null $schema_name The name of the schema.
     *
     * @return self
     */
    public function setSchemaName($schema_name)
    {
        if (is_null($schema_name)) {
            array_push($this->openAPINullablesSetToNull, 'schema_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('schema_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['schema_name'] = $schema_name;

        return $this;
    }

    /**
     * Gets schema_display_name
     *
     * @return string|null
     */
    public function getSchemaDisplayName()
    {
        return $this->container['schema_display_name'];
    }

    /**
     * Sets schema_display_name
     *
     * @param string|null $schema_display_name The display name of the schema.
     *
     * @return self
     */
    public function setSchemaDisplayName($schema_display_name)
    {
        if (is_null($schema_display_name)) {
            array_push($this->openAPINullablesSetToNull, 'schema_display_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('schema_display_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['schema_display_name'] = $schema_display_name;

        return $this;
    }

    /**
     * Gets reference_fields
     *
     * @return \Squidex\Client\Model\FieldDto[]|null
     */
    public function getReferenceFields()
    {
        return $this->container['reference_fields'];
    }

    /**
     * Sets reference_fields
     *
     * @param \Squidex\Client\Model\FieldDto[]|null $reference_fields The reference fields.
     *
     * @return self
     */
    public function setReferenceFields($reference_fields)
    {
        if (is_null($reference_fields)) {
            array_push($this->openAPINullablesSetToNull, 'reference_fields');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reference_fields', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['reference_fields'] = $reference_fields;

        return $this;
    }

    /**
     * Gets is_deleted
     *
     * @return bool
     */
    public function getIsDeleted()
    {
        return $this->container['is_deleted'];
    }

    /**
     * Sets is_deleted
     *
     * @param bool $is_deleted Indicates whether the content is deleted.
     *
     * @return self
     */
    public function setIsDeleted($is_deleted)
    {
        if (is_null($is_deleted)) {
            throw new \InvalidArgumentException('non-nullable is_deleted cannot be null');
        }
        $this->container['is_deleted'] = $is_deleted;

        return $this;
    }

    /**
     * Gets version
     *
     * @return int
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param int $version The version of the content.
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


