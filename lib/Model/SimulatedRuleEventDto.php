<?php
/**
 * SimulatedRuleEventDto
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Squidex/Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Squidex API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Squidex/Client\Model;

use \ArrayAccess;
use \Squidex/Client\ObjectSerializer;

/**
 * SimulatedRuleEventDto Class Doc Comment
 *
 * @category Class
 * @package  Squidex/Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SimulatedRuleEventDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SimulatedRuleEventDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'event_id' => 'string',
        'unique_id' => 'string',
        'event_name' => 'string',
        'event' => 'mixed',
        'enriched_event' => 'mixed',
        'action_name' => 'string',
        'action_data' => 'string',
        'error' => 'string',
        'skip_reasons' => '\Squidex/Client\Model\SkipReason[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'event_id' => 'guid',
        'unique_id' => null,
        'event_name' => null,
        'event' => null,
        'enriched_event' => null,
        'action_name' => null,
        'action_data' => null,
        'error' => null,
        'skip_reasons' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'event_id' => false,
		'unique_id' => false,
		'event_name' => false,
		'event' => true,
		'enriched_event' => true,
		'action_name' => true,
		'action_data' => true,
		'error' => true,
		'skip_reasons' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'event_id' => 'eventId',
        'unique_id' => 'uniqueId',
        'event_name' => 'eventName',
        'event' => 'event',
        'enriched_event' => 'enrichedEvent',
        'action_name' => 'actionName',
        'action_data' => 'actionData',
        'error' => 'error',
        'skip_reasons' => 'skipReasons'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'event_id' => 'setEventId',
        'unique_id' => 'setUniqueId',
        'event_name' => 'setEventName',
        'event' => 'setEvent',
        'enriched_event' => 'setEnrichedEvent',
        'action_name' => 'setActionName',
        'action_data' => 'setActionData',
        'error' => 'setError',
        'skip_reasons' => 'setSkipReasons'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'event_id' => 'getEventId',
        'unique_id' => 'getUniqueId',
        'event_name' => 'getEventName',
        'event' => 'getEvent',
        'enriched_event' => 'getEnrichedEvent',
        'action_name' => 'getActionName',
        'action_data' => 'getActionData',
        'error' => 'getError',
        'skip_reasons' => 'getSkipReasons'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('event_id', $data ?? [], null);
        $this->setIfExists('unique_id', $data ?? [], null);
        $this->setIfExists('event_name', $data ?? [], null);
        $this->setIfExists('event', $data ?? [], null);
        $this->setIfExists('enriched_event', $data ?? [], null);
        $this->setIfExists('action_name', $data ?? [], null);
        $this->setIfExists('action_data', $data ?? [], null);
        $this->setIfExists('error', $data ?? [], null);
        $this->setIfExists('skip_reasons', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['event_id'] === null) {
            $invalidProperties[] = "'event_id' can't be null";
        }
        if ((mb_strlen($this->container['event_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'event_id', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['unique_id'] === null) {
            $invalidProperties[] = "'unique_id' can't be null";
        }
        if ((mb_strlen($this->container['unique_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'unique_id', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['event_name'] === null) {
            $invalidProperties[] = "'event_name' can't be null";
        }
        if ((mb_strlen($this->container['event_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'event_name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['event'] === null) {
            $invalidProperties[] = "'event' can't be null";
        }
        if ($this->container['skip_reasons'] === null) {
            $invalidProperties[] = "'skip_reasons' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets event_id
     *
     * @return string
     */
    public function getEventId()
    {
        return $this->container['event_id'];
    }

    /**
     * Sets event_id
     *
     * @param string $event_id The unique event id.
     *
     * @return self
     */
    public function setEventId($event_id)
    {
        if (is_null($event_id)) {
            throw new \InvalidArgumentException('non-nullable event_id cannot be null');
        }

        if ((mb_strlen($event_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $event_id when calling SimulatedRuleEventDto., must be bigger than or equal to 1.');
        }

        $this->container['event_id'] = $event_id;

        return $this;
    }

    /**
     * Gets unique_id
     *
     * @return string
     */
    public function getUniqueId()
    {
        return $this->container['unique_id'];
    }

    /**
     * Sets unique_id
     *
     * @param string $unique_id The the unique id of the simulated event.
     *
     * @return self
     */
    public function setUniqueId($unique_id)
    {
        if (is_null($unique_id)) {
            throw new \InvalidArgumentException('non-nullable unique_id cannot be null');
        }

        if ((mb_strlen($unique_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $unique_id when calling SimulatedRuleEventDto., must be bigger than or equal to 1.');
        }

        $this->container['unique_id'] = $unique_id;

        return $this;
    }

    /**
     * Gets event_name
     *
     * @return string
     */
    public function getEventName()
    {
        return $this->container['event_name'];
    }

    /**
     * Sets event_name
     *
     * @param string $event_name The name of the event.
     *
     * @return self
     */
    public function setEventName($event_name)
    {
        if (is_null($event_name)) {
            throw new \InvalidArgumentException('non-nullable event_name cannot be null');
        }

        if ((mb_strlen($event_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $event_name when calling SimulatedRuleEventDto., must be bigger than or equal to 1.');
        }

        $this->container['event_name'] = $event_name;

        return $this;
    }

    /**
     * Gets event
     *
     * @return mixed
     */
    public function getEvent()
    {
        return $this->container['event'];
    }

    /**
     * Sets event
     *
     * @param mixed $event The source event.
     *
     * @return self
     */
    public function setEvent($event)
    {
        if (is_null($event)) {
            array_push($this->openAPINullablesSetToNull, 'event');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('event', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['event'] = $event;

        return $this;
    }

    /**
     * Gets enriched_event
     *
     * @return mixed|null
     */
    public function getEnrichedEvent()
    {
        return $this->container['enriched_event'];
    }

    /**
     * Sets enriched_event
     *
     * @param mixed|null $enriched_event The enriched event.
     *
     * @return self
     */
    public function setEnrichedEvent($enriched_event)
    {
        if (is_null($enriched_event)) {
            array_push($this->openAPINullablesSetToNull, 'enriched_event');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enriched_event', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enriched_event'] = $enriched_event;

        return $this;
    }

    /**
     * Gets action_name
     *
     * @return string|null
     */
    public function getActionName()
    {
        return $this->container['action_name'];
    }

    /**
     * Sets action_name
     *
     * @param string|null $action_name The data for the action.
     *
     * @return self
     */
    public function setActionName($action_name)
    {
        if (is_null($action_name)) {
            array_push($this->openAPINullablesSetToNull, 'action_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('action_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['action_name'] = $action_name;

        return $this;
    }

    /**
     * Gets action_data
     *
     * @return string|null
     */
    public function getActionData()
    {
        return $this->container['action_data'];
    }

    /**
     * Sets action_data
     *
     * @param string|null $action_data The name of the action.
     *
     * @return self
     */
    public function setActionData($action_data)
    {
        if (is_null($action_data)) {
            array_push($this->openAPINullablesSetToNull, 'action_data');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('action_data', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['action_data'] = $action_data;

        return $this;
    }

    /**
     * Gets error
     *
     * @return string|null
     */
    public function getError()
    {
        return $this->container['error'];
    }

    /**
     * Sets error
     *
     * @param string|null $error The name of the event.
     *
     * @return self
     */
    public function setError($error)
    {
        if (is_null($error)) {
            array_push($this->openAPINullablesSetToNull, 'error');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('error', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['error'] = $error;

        return $this;
    }

    /**
     * Gets skip_reasons
     *
     * @return \Squidex/Client\Model\SkipReason[]
     */
    public function getSkipReasons()
    {
        return $this->container['skip_reasons'];
    }

    /**
     * Sets skip_reasons
     *
     * @param \Squidex/Client\Model\SkipReason[] $skip_reasons The reason why the event has been skipped.
     *
     * @return self
     */
    public function setSkipReasons($skip_reasons)
    {
        if (is_null($skip_reasons)) {
            throw new \InvalidArgumentException('non-nullable skip_reasons cannot be null');
        }
        $this->container['skip_reasons'] = $skip_reasons;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


