<?php
/**
 * ContentsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Squidex\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Squidex API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Squidex\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Squidex\Client\ApiException;
use Squidex\Client\Configuration;
use Squidex\Client\HeaderSelector;
use Squidex\Client\ObjectSerializer;

/**
 * ContentsApi Class Doc Comment
 *
 * @category Class
 * @package  Squidex\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ContentsApi
{
    /**
     * @var
     */
    protected $options;
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'bulkUpdateContents' => [
            'application/json',
        ],
        'createDraft' => [
            'application/json',
        ],
        'deleteContent' => [
            'application/json',
        ],
        'deleteContentStatus' => [
            'application/json',
        ],
        'deleteVersion' => [
            'application/json',
        ],
        'getContent' => [
            'application/json',
        ],
        'getContentValidity' => [
            'application/json',
        ],
        'getContentVersion' => [
            'application/json',
        ],
        'getContents' => [
            'application/json',
        ],
        'getContentsPost' => [
            'application/json',
        ],
        'getReferences' => [
            'application/json',
        ],
        'getReferencing' => [
            'application/json',
        ],
        'patchContent' => [
            'application/json',
        ],
        'postContent' => [
            'application/json',
        ],
        'postContents' => [
            'application/json',
        ],
        'postUpsertContent' => [
            'application/json',
        ],
        'putContent' => [
            'application/json',
        ],
        'putContentStatus' => [
            'application/json',
        ],
        'bulkUpdateContents' => [
            'application/json',
        ],
        'getAllContents' => [
            'application/json',
        ],
        'getAllContentsPost' => [
            'application/json',
        ],
        'getGraphQL' => [
            'application/json',
        ],
        'getGraphQL2' => [
            'application/json',
        ],
    ];

/**
     * @param $options
     */
    public function __construct($config, $client) {
        $this->client =  $client;
        $this->config =  $config;
        $this->headerSelector = new HeaderSelector();
        $this->hostIndex = 0;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation bulkUpdateContents
     *
     * Bulk update content items.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  \Squidex\Client\Model\BulkUpdateContentsDto $bulk_update_contents_dto The bulk update request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkUpdateContents'] to see the possible values for this operation
     *
     * @throws \Squidex\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Squidex\Client\Model\BulkResultDto[]|\Squidex\Client\Model\ErrorDto|\Squidex\Client\Model\ErrorDto
     */
    public function bulkUpdateContents($app, $schema, $bulk_update_contents_dto, string $contentType = self::contentTypes['bulkUpdateContents'][0])
    {
        list($response) = $this->bulkUpdateContentsWithHttpInfo($app, $schema, $bulk_update_contents_dto, $contentType);
        return $response;
    }

    /**
     * Operation bulkUpdateContentsWithHttpInfo
     *
     * Bulk update content items.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  \Squidex\Client\Model\BulkUpdateContentsDto $bulk_update_contents_dto The bulk update request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkUpdateContents'] to see the possible values for this operation
     *
     * @throws \Squidex\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Squidex\Client\Model\BulkResultDto[]|\Squidex\Client\Model\ErrorDto|\Squidex\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function bulkUpdateContentsWithHttpInfo($app, $schema, $bulk_update_contents_dto, string $contentType = self::contentTypes['bulkUpdateContents'][0])
    {
        $request = $this->bulkUpdateContentsRequest($app, $schema, $bulk_update_contents_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Squidex\Client\Model\BulkResultDto[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex\Client\Model\BulkResultDto[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex\Client\Model\BulkResultDto[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Squidex\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Squidex\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Squidex\Client\Model\BulkResultDto[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex\Client\Model\BulkResultDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bulkUpdateContentsAsync
     *
     * Bulk update content items.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  \Squidex\Client\Model\BulkUpdateContentsDto $bulk_update_contents_dto The bulk update request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkUpdateContents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkUpdateContentsAsync($app, $schema, $bulk_update_contents_dto, string $contentType = self::contentTypes['bulkUpdateContents'][0])
    {
        return $this->bulkUpdateContentsAsyncWithHttpInfo($app, $schema, $bulk_update_contents_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bulkUpdateContentsAsyncWithHttpInfo
     *
     * Bulk update content items.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  \Squidex\Client\Model\BulkUpdateContentsDto $bulk_update_contents_dto The bulk update request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkUpdateContents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkUpdateContentsAsyncWithHttpInfo($app, $schema, $bulk_update_contents_dto, string $contentType = self::contentTypes['bulkUpdateContents'][0])
    {
        $returnType = '\Squidex\Client\Model\BulkResultDto[]';
        $request = $this->bulkUpdateContentsRequest($app, $schema, $bulk_update_contents_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bulkUpdateContents'
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  \Squidex\Client\Model\BulkUpdateContentsDto $bulk_update_contents_dto The bulk update request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkUpdateContents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function bulkUpdateContentsRequest($app, $schema, $bulk_update_contents_dto, string $contentType = self::contentTypes['bulkUpdateContents'][0])
    {

        // verify the required parameter 'app' is set
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling '
            );
        }

        // verify the required parameter 'schema' is set
        if ($schema === null || (is_array($schema) && count($schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $schema when calling '
            );
        }

        // verify the required parameter 'bulk_update_contents_dto' is set
        if ($bulk_update_contents_dto === null || (is_array($bulk_update_contents_dto) && count($bulk_update_contents_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bulk_update_contents_dto when calling '
            );
        }


        $resourcePath = '/api/content/{app}/{schema}/bulk';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app !== null) {
            $resourcePath = str_replace(
                '{' . 'app' . '}',
                ObjectSerializer::toPathValue($app),
                $resourcePath
            );
        }
        // path params
        if ($schema !== null) {
            $resourcePath = str_replace(
                '{' . 'schema' . '}',
                ObjectSerializer::toPathValue($schema),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($bulk_update_contents_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($bulk_update_contents_dto));
            } else {
                $httpBody = $bulk_update_contents_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createDraft
     *
     * Create a new draft version.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to create the draft for. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDraft'] to see the possible values for this operation
     *
     * @throws \Squidex\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Squidex\Client\Model\ContentDto|\Squidex\Client\Model\ErrorDto|\Squidex\Client\Model\ErrorDto
     */
    public function createDraft($app, $schema, $id, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['createDraft'][0])
    {
        list($response) = $this->createDraftWithHttpInfo($app, $schema, $id, $x_unpublished, $x_languages, $contentType);
        return $response;
    }

    /**
     * Operation createDraftWithHttpInfo
     *
     * Create a new draft version.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to create the draft for. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDraft'] to see the possible values for this operation
     *
     * @throws \Squidex\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Squidex\Client\Model\ContentDto|\Squidex\Client\Model\ErrorDto|\Squidex\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function createDraftWithHttpInfo($app, $schema, $id, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['createDraft'][0])
    {
        $request = $this->createDraftRequest($app, $schema, $id, $x_unpublished, $x_languages, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Squidex\Client\Model\ContentDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex\Client\Model\ContentDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex\Client\Model\ContentDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Squidex\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Squidex\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Squidex\Client\Model\ContentDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex\Client\Model\ContentDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createDraftAsync
     *
     * Create a new draft version.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to create the draft for. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDraft'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDraftAsync($app, $schema, $id, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['createDraft'][0])
    {
        return $this->createDraftAsyncWithHttpInfo($app, $schema, $id, $x_unpublished, $x_languages, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createDraftAsyncWithHttpInfo
     *
     * Create a new draft version.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to create the draft for. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDraft'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDraftAsyncWithHttpInfo($app, $schema, $id, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['createDraft'][0])
    {
        $returnType = '\Squidex\Client\Model\ContentDto';
        $request = $this->createDraftRequest($app, $schema, $id, $x_unpublished, $x_languages, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createDraft'
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to create the draft for. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDraft'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createDraftRequest($app, $schema, $id, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['createDraft'][0])
    {

        // verify the required parameter 'app' is set
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling '
            );
        }

        // verify the required parameter 'schema' is set
        if ($schema === null || (is_array($schema) && count($schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $schema when calling '
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling '
            );
        }




        $resourcePath = '/api/content/{app}/{schema}/{id}/draft';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_unpublished !== null) {
            $headerParams['X-Unpublished'] = ObjectSerializer::toHeaderValue($x_unpublished);
        }
        // header params
        if ($x_languages !== null) {
            $headerParams['X-Languages'] = ObjectSerializer::toHeaderValue($x_languages);
        }

        // path params
        if ($app !== null) {
            $resourcePath = str_replace(
                '{' . 'app' . '}',
                ObjectSerializer::toPathValue($app),
                $resourcePath
            );
        }
        // path params
        if ($schema !== null) {
            $resourcePath = str_replace(
                '{' . 'schema' . '}',
                ObjectSerializer::toPathValue($schema),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteContent
     *
     * Delete a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to delete. (required)
     * @param  bool $check_referrers True to check referrers of this content. (optional)
     * @param  bool $permanent True to delete the content permanently. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteContent'] to see the possible values for this operation
     *
     * @throws \Squidex\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteContent($app, $schema, $id, $check_referrers = null, $permanent = null, string $contentType = self::contentTypes['deleteContent'][0])
    {
        $this->deleteContentWithHttpInfo($app, $schema, $id, $check_referrers, $permanent, $contentType);
    }

    /**
     * Operation deleteContentWithHttpInfo
     *
     * Delete a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to delete. (required)
     * @param  bool $check_referrers True to check referrers of this content. (optional)
     * @param  bool $permanent True to delete the content permanently. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteContent'] to see the possible values for this operation
     *
     * @throws \Squidex\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteContentWithHttpInfo($app, $schema, $id, $check_referrers = null, $permanent = null, string $contentType = self::contentTypes['deleteContent'][0])
    {
        $request = $this->deleteContentRequest($app, $schema, $id, $check_referrers, $permanent, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteContentAsync
     *
     * Delete a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to delete. (required)
     * @param  bool $check_referrers True to check referrers of this content. (optional)
     * @param  bool $permanent True to delete the content permanently. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteContent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteContentAsync($app, $schema, $id, $check_referrers = null, $permanent = null, string $contentType = self::contentTypes['deleteContent'][0])
    {
        return $this->deleteContentAsyncWithHttpInfo($app, $schema, $id, $check_referrers, $permanent, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteContentAsyncWithHttpInfo
     *
     * Delete a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to delete. (required)
     * @param  bool $check_referrers True to check referrers of this content. (optional)
     * @param  bool $permanent True to delete the content permanently. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteContent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteContentAsyncWithHttpInfo($app, $schema, $id, $check_referrers = null, $permanent = null, string $contentType = self::contentTypes['deleteContent'][0])
    {
        $returnType = '';
        $request = $this->deleteContentRequest($app, $schema, $id, $check_referrers, $permanent, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteContent'
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to delete. (required)
     * @param  bool $check_referrers True to check referrers of this content. (optional)
     * @param  bool $permanent True to delete the content permanently. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteContent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteContentRequest($app, $schema, $id, $check_referrers = null, $permanent = null, string $contentType = self::contentTypes['deleteContent'][0])
    {

        // verify the required parameter 'app' is set
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling '
            );
        }

        // verify the required parameter 'schema' is set
        if ($schema === null || (is_array($schema) && count($schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $schema when calling '
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling '
            );
        }




        $resourcePath = '/api/content/{app}/{schema}/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $check_referrers,
            'checkReferrers', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $permanent,
            'permanent', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($app !== null) {
            $resourcePath = str_replace(
                '{' . 'app' . '}',
                ObjectSerializer::toPathValue($app),
                $resourcePath
            );
        }
        // path params
        if ($schema !== null) {
            $resourcePath = str_replace(
                '{' . 'schema' . '}',
                ObjectSerializer::toPathValue($schema),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteContentStatus
     *
     * Cancel status change of a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to cancel. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteContentStatus'] to see the possible values for this operation
     *
     * @throws \Squidex\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Squidex\Client\Model\ContentDto|\Squidex\Client\Model\ErrorDto|\Squidex\Client\Model\ErrorDto
     */
    public function deleteContentStatus($app, $schema, $id, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['deleteContentStatus'][0])
    {
        list($response) = $this->deleteContentStatusWithHttpInfo($app, $schema, $id, $x_unpublished, $x_languages, $contentType);
        return $response;
    }

    /**
     * Operation deleteContentStatusWithHttpInfo
     *
     * Cancel status change of a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to cancel. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteContentStatus'] to see the possible values for this operation
     *
     * @throws \Squidex\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Squidex\Client\Model\ContentDto|\Squidex\Client\Model\ErrorDto|\Squidex\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteContentStatusWithHttpInfo($app, $schema, $id, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['deleteContentStatus'][0])
    {
        $request = $this->deleteContentStatusRequest($app, $schema, $id, $x_unpublished, $x_languages, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Squidex\Client\Model\ContentDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex\Client\Model\ContentDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex\Client\Model\ContentDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Squidex\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Squidex\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Squidex\Client\Model\ContentDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex\Client\Model\ContentDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteContentStatusAsync
     *
     * Cancel status change of a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to cancel. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteContentStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteContentStatusAsync($app, $schema, $id, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['deleteContentStatus'][0])
    {
        return $this->deleteContentStatusAsyncWithHttpInfo($app, $schema, $id, $x_unpublished, $x_languages, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteContentStatusAsyncWithHttpInfo
     *
     * Cancel status change of a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to cancel. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteContentStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteContentStatusAsyncWithHttpInfo($app, $schema, $id, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['deleteContentStatus'][0])
    {
        $returnType = '\Squidex\Client\Model\ContentDto';
        $request = $this->deleteContentStatusRequest($app, $schema, $id, $x_unpublished, $x_languages, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteContentStatus'
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to cancel. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteContentStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteContentStatusRequest($app, $schema, $id, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['deleteContentStatus'][0])
    {

        // verify the required parameter 'app' is set
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling '
            );
        }

        // verify the required parameter 'schema' is set
        if ($schema === null || (is_array($schema) && count($schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $schema when calling '
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling '
            );
        }




        $resourcePath = '/api/content/{app}/{schema}/{id}/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_unpublished !== null) {
            $headerParams['X-Unpublished'] = ObjectSerializer::toHeaderValue($x_unpublished);
        }
        // header params
        if ($x_languages !== null) {
            $headerParams['X-Languages'] = ObjectSerializer::toHeaderValue($x_languages);
        }

        // path params
        if ($app !== null) {
            $resourcePath = str_replace(
                '{' . 'app' . '}',
                ObjectSerializer::toPathValue($app),
                $resourcePath
            );
        }
        // path params
        if ($schema !== null) {
            $resourcePath = str_replace(
                '{' . 'schema' . '}',
                ObjectSerializer::toPathValue($schema),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteVersion
     *
     * Delete the draft version.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to delete the draft from. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteVersion'] to see the possible values for this operation
     *
     * @throws \Squidex\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Squidex\Client\Model\ContentDto|\Squidex\Client\Model\ErrorDto|\Squidex\Client\Model\ErrorDto
     */
    public function deleteVersion($app, $schema, $id, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['deleteVersion'][0])
    {
        list($response) = $this->deleteVersionWithHttpInfo($app, $schema, $id, $x_unpublished, $x_languages, $contentType);
        return $response;
    }

    /**
     * Operation deleteVersionWithHttpInfo
     *
     * Delete the draft version.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to delete the draft from. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteVersion'] to see the possible values for this operation
     *
     * @throws \Squidex\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Squidex\Client\Model\ContentDto|\Squidex\Client\Model\ErrorDto|\Squidex\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteVersionWithHttpInfo($app, $schema, $id, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['deleteVersion'][0])
    {
        $request = $this->deleteVersionRequest($app, $schema, $id, $x_unpublished, $x_languages, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Squidex\Client\Model\ContentDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex\Client\Model\ContentDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex\Client\Model\ContentDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Squidex\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Squidex\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Squidex\Client\Model\ContentDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex\Client\Model\ContentDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteVersionAsync
     *
     * Delete the draft version.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to delete the draft from. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteVersion'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteVersionAsync($app, $schema, $id, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['deleteVersion'][0])
    {
        return $this->deleteVersionAsyncWithHttpInfo($app, $schema, $id, $x_unpublished, $x_languages, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteVersionAsyncWithHttpInfo
     *
     * Delete the draft version.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to delete the draft from. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteVersion'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteVersionAsyncWithHttpInfo($app, $schema, $id, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['deleteVersion'][0])
    {
        $returnType = '\Squidex\Client\Model\ContentDto';
        $request = $this->deleteVersionRequest($app, $schema, $id, $x_unpublished, $x_languages, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteVersion'
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to delete the draft from. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteVersion'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteVersionRequest($app, $schema, $id, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['deleteVersion'][0])
    {

        // verify the required parameter 'app' is set
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling '
            );
        }

        // verify the required parameter 'schema' is set
        if ($schema === null || (is_array($schema) && count($schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $schema when calling '
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling '
            );
        }




        $resourcePath = '/api/content/{app}/{schema}/{id}/draft';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_unpublished !== null) {
            $headerParams['X-Unpublished'] = ObjectSerializer::toHeaderValue($x_unpublished);
        }
        // header params
        if ($x_languages !== null) {
            $headerParams['X-Languages'] = ObjectSerializer::toHeaderValue($x_languages);
        }

        // path params
        if ($app !== null) {
            $resourcePath = str_replace(
                '{' . 'app' . '}',
                ObjectSerializer::toPathValue($app),
                $resourcePath
            );
        }
        // path params
        if ($schema !== null) {
            $resourcePath = str_replace(
                '{' . 'schema' . '}',
                ObjectSerializer::toPathValue($schema),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getContent
     *
     * Get a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content to fetch. (required)
     * @param  int $version The optional version. (optional, default to -2)
     * @param  string $x_fields The list of content fields (comma-separated). (optional)
     * @param  bool $x_flatten Provide the data as flat object. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getContent'] to see the possible values for this operation
     *
     * @throws \Squidex\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Squidex\Client\Model\ContentDto|\Squidex\Client\Model\ErrorDto
     */
    public function getContent($app, $schema, $id, $version = -2, $x_fields = null, $x_flatten = null, $x_languages = null, $x_unpublished = null, string $contentType = self::contentTypes['getContent'][0])
    {
        list($response) = $this->getContentWithHttpInfo($app, $schema, $id, $version, $x_fields, $x_flatten, $x_languages, $x_unpublished, $contentType);
        return $response;
    }

    /**
     * Operation getContentWithHttpInfo
     *
     * Get a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content to fetch. (required)
     * @param  int $version The optional version. (optional, default to -2)
     * @param  string $x_fields The list of content fields (comma-separated). (optional)
     * @param  bool $x_flatten Provide the data as flat object. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getContent'] to see the possible values for this operation
     *
     * @throws \Squidex\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Squidex\Client\Model\ContentDto|\Squidex\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getContentWithHttpInfo($app, $schema, $id, $version = -2, $x_fields = null, $x_flatten = null, $x_languages = null, $x_unpublished = null, string $contentType = self::contentTypes['getContent'][0])
    {
        $request = $this->getContentRequest($app, $schema, $id, $version, $x_fields, $x_flatten, $x_languages, $x_unpublished, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Squidex\Client\Model\ContentDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex\Client\Model\ContentDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex\Client\Model\ContentDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Squidex\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Squidex\Client\Model\ContentDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex\Client\Model\ContentDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getContentAsync
     *
     * Get a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content to fetch. (required)
     * @param  int $version The optional version. (optional, default to -2)
     * @param  string $x_fields The list of content fields (comma-separated). (optional)
     * @param  bool $x_flatten Provide the data as flat object. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getContent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContentAsync($app, $schema, $id, $version = -2, $x_fields = null, $x_flatten = null, $x_languages = null, $x_unpublished = null, string $contentType = self::contentTypes['getContent'][0])
    {
        return $this->getContentAsyncWithHttpInfo($app, $schema, $id, $version, $x_fields, $x_flatten, $x_languages, $x_unpublished, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getContentAsyncWithHttpInfo
     *
     * Get a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content to fetch. (required)
     * @param  int $version The optional version. (optional, default to -2)
     * @param  string $x_fields The list of content fields (comma-separated). (optional)
     * @param  bool $x_flatten Provide the data as flat object. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getContent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContentAsyncWithHttpInfo($app, $schema, $id, $version = -2, $x_fields = null, $x_flatten = null, $x_languages = null, $x_unpublished = null, string $contentType = self::contentTypes['getContent'][0])
    {
        $returnType = '\Squidex\Client\Model\ContentDto';
        $request = $this->getContentRequest($app, $schema, $id, $version, $x_fields, $x_flatten, $x_languages, $x_unpublished, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getContent'
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content to fetch. (required)
     * @param  int $version The optional version. (optional, default to -2)
     * @param  string $x_fields The list of content fields (comma-separated). (optional)
     * @param  bool $x_flatten Provide the data as flat object. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getContent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getContentRequest($app, $schema, $id, $version = -2, $x_fields = null, $x_flatten = null, $x_languages = null, $x_unpublished = null, string $contentType = self::contentTypes['getContent'][0])
    {

        // verify the required parameter 'app' is set
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling '
            );
        }

        // verify the required parameter 'schema' is set
        if ($schema === null || (is_array($schema) && count($schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $schema when calling '
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling '
            );
        }







        $resourcePath = '/api/content/{app}/{schema}/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $version,
            'version', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_fields !== null) {
            $headerParams['X-Fields'] = ObjectSerializer::toHeaderValue($x_fields);
        }
        // header params
        if ($x_flatten !== null) {
            $headerParams['X-Flatten'] = ObjectSerializer::toHeaderValue($x_flatten);
        }
        // header params
        if ($x_languages !== null) {
            $headerParams['X-Languages'] = ObjectSerializer::toHeaderValue($x_languages);
        }
        // header params
        if ($x_unpublished !== null) {
            $headerParams['X-Unpublished'] = ObjectSerializer::toHeaderValue($x_unpublished);
        }

        // path params
        if ($app !== null) {
            $resourcePath = str_replace(
                '{' . 'app' . '}',
                ObjectSerializer::toPathValue($app),
                $resourcePath
            );
        }
        // path params
        if ($schema !== null) {
            $resourcePath = str_replace(
                '{' . 'schema' . '}',
                ObjectSerializer::toPathValue($schema),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getContentValidity
     *
     * Get a content item validity.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content to fetch. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getContentValidity'] to see the possible values for this operation
     *
     * @throws \Squidex\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getContentValidity($app, $schema, $id, string $contentType = self::contentTypes['getContentValidity'][0])
    {
        $this->getContentValidityWithHttpInfo($app, $schema, $id, $contentType);
    }

    /**
     * Operation getContentValidityWithHttpInfo
     *
     * Get a content item validity.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content to fetch. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getContentValidity'] to see the possible values for this operation
     *
     * @throws \Squidex\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getContentValidityWithHttpInfo($app, $schema, $id, string $contentType = self::contentTypes['getContentValidity'][0])
    {
        $request = $this->getContentValidityRequest($app, $schema, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getContentValidityAsync
     *
     * Get a content item validity.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content to fetch. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getContentValidity'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContentValidityAsync($app, $schema, $id, string $contentType = self::contentTypes['getContentValidity'][0])
    {
        return $this->getContentValidityAsyncWithHttpInfo($app, $schema, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getContentValidityAsyncWithHttpInfo
     *
     * Get a content item validity.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content to fetch. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getContentValidity'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContentValidityAsyncWithHttpInfo($app, $schema, $id, string $contentType = self::contentTypes['getContentValidity'][0])
    {
        $returnType = '';
        $request = $this->getContentValidityRequest($app, $schema, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getContentValidity'
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content to fetch. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getContentValidity'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getContentValidityRequest($app, $schema, $id, string $contentType = self::contentTypes['getContentValidity'][0])
    {

        // verify the required parameter 'app' is set
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling '
            );
        }

        // verify the required parameter 'schema' is set
        if ($schema === null || (is_array($schema) && count($schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $schema when calling '
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling '
            );
        }


        $resourcePath = '/api/content/{app}/{schema}/{id}/validity';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app !== null) {
            $resourcePath = str_replace(
                '{' . 'app' . '}',
                ObjectSerializer::toPathValue($app),
                $resourcePath
            );
        }
        // path params
        if ($schema !== null) {
            $resourcePath = str_replace(
                '{' . 'schema' . '}',
                ObjectSerializer::toPathValue($schema),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getContentVersion
     *
     * Get a content by version.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content to fetch. (required)
     * @param  int $version The version fo the content to fetch. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getContentVersion'] to see the possible values for this operation
     *
     * @throws \Squidex\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject|\Squidex\Client\Model\ErrorDto
     * @deprecated
     */
    public function getContentVersion($app, $schema, $id, $version, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['getContentVersion'][0])
    {
        list($response) = $this->getContentVersionWithHttpInfo($app, $schema, $id, $version, $x_unpublished, $x_languages, $contentType);
        return $response;
    }

    /**
     * Operation getContentVersionWithHttpInfo
     *
     * Get a content by version.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content to fetch. (required)
     * @param  int $version The version fo the content to fetch. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getContentVersion'] to see the possible values for this operation
     *
     * @throws \Squidex\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject|\Squidex\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getContentVersionWithHttpInfo($app, $schema, $id, $version, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['getContentVersion'][0])
    {
        $request = $this->getContentVersionRequest($app, $schema, $id, $version, $x_unpublished, $x_languages, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Squidex\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getContentVersionAsync
     *
     * Get a content by version.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content to fetch. (required)
     * @param  int $version The version fo the content to fetch. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getContentVersion'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getContentVersionAsync($app, $schema, $id, $version, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['getContentVersion'][0])
    {
        return $this->getContentVersionAsyncWithHttpInfo($app, $schema, $id, $version, $x_unpublished, $x_languages, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getContentVersionAsyncWithHttpInfo
     *
     * Get a content by version.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content to fetch. (required)
     * @param  int $version The version fo the content to fetch. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getContentVersion'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getContentVersionAsyncWithHttpInfo($app, $schema, $id, $version, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['getContentVersion'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->getContentVersionRequest($app, $schema, $id, $version, $x_unpublished, $x_languages, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getContentVersion'
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content to fetch. (required)
     * @param  int $version The version fo the content to fetch. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getContentVersion'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getContentVersionRequest($app, $schema, $id, $version, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['getContentVersion'][0])
    {

        // verify the required parameter 'app' is set
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling '
            );
        }

        // verify the required parameter 'schema' is set
        if ($schema === null || (is_array($schema) && count($schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $schema when calling '
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling '
            );
        }

        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling '
            );
        }




        $resourcePath = '/api/content/{app}/{schema}/{id}/{version}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_unpublished !== null) {
            $headerParams['X-Unpublished'] = ObjectSerializer::toHeaderValue($x_unpublished);
        }
        // header params
        if ($x_languages !== null) {
            $headerParams['X-Languages'] = ObjectSerializer::toHeaderValue($x_languages);
        }

        // path params
        if ($app !== null) {
            $resourcePath = str_replace(
                '{' . 'app' . '}',
                ObjectSerializer::toPathValue($app),
                $resourcePath
            );
        }
        // path params
        if ($schema !== null) {
            $resourcePath = str_replace(
                '{' . 'schema' . '}',
                ObjectSerializer::toPathValue($schema),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/octet-stream', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getContents
     *
     * Queries contents.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $ids The optional ids of the content to fetch. (optional)
     * @param  string $q The optional json query. (optional)
     * @param  string $search Optional number of items to skip. (optional)
     * @param  float $top Optional number of items to take. (optional)
     * @param  float $skip Optional number of items to skip. (optional)
     * @param  string $orderby Optional OData order definition. (optional)
     * @param  string $filter Optional OData filter. (optional)
     * @param  string $x_fields The list of content fields (comma-separated). (optional)
     * @param  bool $x_flatten Provide the data as flat object. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getContents'] to see the possible values for this operation
     *
     * @throws \Squidex\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Squidex\Client\Model\ContentsDto|\Squidex\Client\Model\ErrorDto
     */
    public function getContents($app, $schema, $ids = null, $q = null, $search = null, $top = null, $skip = null, $orderby = null, $filter = null, $x_fields = null, $x_flatten = null, $x_languages = null, $x_no_slow_total = null, $x_no_total = null, $x_unpublished = null, string $contentType = self::contentTypes['getContents'][0])
    {
        list($response) = $this->getContentsWithHttpInfo($app, $schema, $ids, $q, $search, $top, $skip, $orderby, $filter, $x_fields, $x_flatten, $x_languages, $x_no_slow_total, $x_no_total, $x_unpublished, $contentType);
        return $response;
    }

    /**
     * Operation getContentsWithHttpInfo
     *
     * Queries contents.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $ids The optional ids of the content to fetch. (optional)
     * @param  string $q The optional json query. (optional)
     * @param  string $search Optional number of items to skip. (optional)
     * @param  float $top Optional number of items to take. (optional)
     * @param  float $skip Optional number of items to skip. (optional)
     * @param  string $orderby Optional OData order definition. (optional)
     * @param  string $filter Optional OData filter. (optional)
     * @param  string $x_fields The list of content fields (comma-separated). (optional)
     * @param  bool $x_flatten Provide the data as flat object. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getContents'] to see the possible values for this operation
     *
     * @throws \Squidex\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Squidex\Client\Model\ContentsDto|\Squidex\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getContentsWithHttpInfo($app, $schema, $ids = null, $q = null, $search = null, $top = null, $skip = null, $orderby = null, $filter = null, $x_fields = null, $x_flatten = null, $x_languages = null, $x_no_slow_total = null, $x_no_total = null, $x_unpublished = null, string $contentType = self::contentTypes['getContents'][0])
    {
        $request = $this->getContentsRequest($app, $schema, $ids, $q, $search, $top, $skip, $orderby, $filter, $x_fields, $x_flatten, $x_languages, $x_no_slow_total, $x_no_total, $x_unpublished, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Squidex\Client\Model\ContentsDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex\Client\Model\ContentsDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex\Client\Model\ContentsDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Squidex\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Squidex\Client\Model\ContentsDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex\Client\Model\ContentsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getContentsAsync
     *
     * Queries contents.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $ids The optional ids of the content to fetch. (optional)
     * @param  string $q The optional json query. (optional)
     * @param  string $search Optional number of items to skip. (optional)
     * @param  float $top Optional number of items to take. (optional)
     * @param  float $skip Optional number of items to skip. (optional)
     * @param  string $orderby Optional OData order definition. (optional)
     * @param  string $filter Optional OData filter. (optional)
     * @param  string $x_fields The list of content fields (comma-separated). (optional)
     * @param  bool $x_flatten Provide the data as flat object. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getContents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContentsAsync($app, $schema, $ids = null, $q = null, $search = null, $top = null, $skip = null, $orderby = null, $filter = null, $x_fields = null, $x_flatten = null, $x_languages = null, $x_no_slow_total = null, $x_no_total = null, $x_unpublished = null, string $contentType = self::contentTypes['getContents'][0])
    {
        return $this->getContentsAsyncWithHttpInfo($app, $schema, $ids, $q, $search, $top, $skip, $orderby, $filter, $x_fields, $x_flatten, $x_languages, $x_no_slow_total, $x_no_total, $x_unpublished, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getContentsAsyncWithHttpInfo
     *
     * Queries contents.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $ids The optional ids of the content to fetch. (optional)
     * @param  string $q The optional json query. (optional)
     * @param  string $search Optional number of items to skip. (optional)
     * @param  float $top Optional number of items to take. (optional)
     * @param  float $skip Optional number of items to skip. (optional)
     * @param  string $orderby Optional OData order definition. (optional)
     * @param  string $filter Optional OData filter. (optional)
     * @param  string $x_fields The list of content fields (comma-separated). (optional)
     * @param  bool $x_flatten Provide the data as flat object. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getContents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContentsAsyncWithHttpInfo($app, $schema, $ids = null, $q = null, $search = null, $top = null, $skip = null, $orderby = null, $filter = null, $x_fields = null, $x_flatten = null, $x_languages = null, $x_no_slow_total = null, $x_no_total = null, $x_unpublished = null, string $contentType = self::contentTypes['getContents'][0])
    {
        $returnType = '\Squidex\Client\Model\ContentsDto';
        $request = $this->getContentsRequest($app, $schema, $ids, $q, $search, $top, $skip, $orderby, $filter, $x_fields, $x_flatten, $x_languages, $x_no_slow_total, $x_no_total, $x_unpublished, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getContents'
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $ids The optional ids of the content to fetch. (optional)
     * @param  string $q The optional json query. (optional)
     * @param  string $search Optional number of items to skip. (optional)
     * @param  float $top Optional number of items to take. (optional)
     * @param  float $skip Optional number of items to skip. (optional)
     * @param  string $orderby Optional OData order definition. (optional)
     * @param  string $filter Optional OData filter. (optional)
     * @param  string $x_fields The list of content fields (comma-separated). (optional)
     * @param  bool $x_flatten Provide the data as flat object. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getContents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getContentsRequest($app, $schema, $ids = null, $q = null, $search = null, $top = null, $skip = null, $orderby = null, $filter = null, $x_fields = null, $x_flatten = null, $x_languages = null, $x_no_slow_total = null, $x_no_total = null, $x_unpublished = null, string $contentType = self::contentTypes['getContents'][0])
    {

        // verify the required parameter 'app' is set
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling '
            );
        }

        // verify the required parameter 'schema' is set
        if ($schema === null || (is_array($schema) && count($schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $schema when calling '
            );
        }















        $resourcePath = '/api/content/{app}/{schema}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ids,
            'ids', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $q,
            'q', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search,
            '$search', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_fields !== null) {
            $headerParams['X-Fields'] = ObjectSerializer::toHeaderValue($x_fields);
        }
        // header params
        if ($x_flatten !== null) {
            $headerParams['X-Flatten'] = ObjectSerializer::toHeaderValue($x_flatten);
        }
        // header params
        if ($x_languages !== null) {
            $headerParams['X-Languages'] = ObjectSerializer::toHeaderValue($x_languages);
        }
        // header params
        if ($x_no_slow_total !== null) {
            $headerParams['X-NoSlowTotal'] = ObjectSerializer::toHeaderValue($x_no_slow_total);
        }
        // header params
        if ($x_no_total !== null) {
            $headerParams['X-NoTotal'] = ObjectSerializer::toHeaderValue($x_no_total);
        }
        // header params
        if ($x_unpublished !== null) {
            $headerParams['X-Unpublished'] = ObjectSerializer::toHeaderValue($x_unpublished);
        }

        // path params
        if ($app !== null) {
            $resourcePath = str_replace(
                '{' . 'app' . '}',
                ObjectSerializer::toPathValue($app),
                $resourcePath
            );
        }
        // path params
        if ($schema !== null) {
            $resourcePath = str_replace(
                '{' . 'schema' . '}',
                ObjectSerializer::toPathValue($schema),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getContentsPost
     *
     * Queries contents.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  \Squidex\Client\Model\QueryDto $query_dto The required query object. (required)
     * @param  string $x_fields The list of content fields (comma-separated). (optional)
     * @param  bool $x_flatten Provide the data as flat object. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getContentsPost'] to see the possible values for this operation
     *
     * @throws \Squidex\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Squidex\Client\Model\ContentsDto|\Squidex\Client\Model\ErrorDto|\Squidex\Client\Model\ErrorDto
     */
    public function getContentsPost($app, $schema, $query_dto, $x_fields = null, $x_flatten = null, $x_languages = null, $x_no_slow_total = null, $x_no_total = null, $x_unpublished = null, string $contentType = self::contentTypes['getContentsPost'][0])
    {
        list($response) = $this->getContentsPostWithHttpInfo($app, $schema, $query_dto, $x_fields, $x_flatten, $x_languages, $x_no_slow_total, $x_no_total, $x_unpublished, $contentType);
        return $response;
    }

    /**
     * Operation getContentsPostWithHttpInfo
     *
     * Queries contents.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  \Squidex\Client\Model\QueryDto $query_dto The required query object. (required)
     * @param  string $x_fields The list of content fields (comma-separated). (optional)
     * @param  bool $x_flatten Provide the data as flat object. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getContentsPost'] to see the possible values for this operation
     *
     * @throws \Squidex\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Squidex\Client\Model\ContentsDto|\Squidex\Client\Model\ErrorDto|\Squidex\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getContentsPostWithHttpInfo($app, $schema, $query_dto, $x_fields = null, $x_flatten = null, $x_languages = null, $x_no_slow_total = null, $x_no_total = null, $x_unpublished = null, string $contentType = self::contentTypes['getContentsPost'][0])
    {
        $request = $this->getContentsPostRequest($app, $schema, $query_dto, $x_fields, $x_flatten, $x_languages, $x_no_slow_total, $x_no_total, $x_unpublished, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Squidex\Client\Model\ContentsDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex\Client\Model\ContentsDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex\Client\Model\ContentsDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Squidex\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Squidex\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Squidex\Client\Model\ContentsDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex\Client\Model\ContentsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getContentsPostAsync
     *
     * Queries contents.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  \Squidex\Client\Model\QueryDto $query_dto The required query object. (required)
     * @param  string $x_fields The list of content fields (comma-separated). (optional)
     * @param  bool $x_flatten Provide the data as flat object. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getContentsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContentsPostAsync($app, $schema, $query_dto, $x_fields = null, $x_flatten = null, $x_languages = null, $x_no_slow_total = null, $x_no_total = null, $x_unpublished = null, string $contentType = self::contentTypes['getContentsPost'][0])
    {
        return $this->getContentsPostAsyncWithHttpInfo($app, $schema, $query_dto, $x_fields, $x_flatten, $x_languages, $x_no_slow_total, $x_no_total, $x_unpublished, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getContentsPostAsyncWithHttpInfo
     *
     * Queries contents.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  \Squidex\Client\Model\QueryDto $query_dto The required query object. (required)
     * @param  string $x_fields The list of content fields (comma-separated). (optional)
     * @param  bool $x_flatten Provide the data as flat object. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getContentsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContentsPostAsyncWithHttpInfo($app, $schema, $query_dto, $x_fields = null, $x_flatten = null, $x_languages = null, $x_no_slow_total = null, $x_no_total = null, $x_unpublished = null, string $contentType = self::contentTypes['getContentsPost'][0])
    {
        $returnType = '\Squidex\Client\Model\ContentsDto';
        $request = $this->getContentsPostRequest($app, $schema, $query_dto, $x_fields, $x_flatten, $x_languages, $x_no_slow_total, $x_no_total, $x_unpublished, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getContentsPost'
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  \Squidex\Client\Model\QueryDto $query_dto The required query object. (required)
     * @param  string $x_fields The list of content fields (comma-separated). (optional)
     * @param  bool $x_flatten Provide the data as flat object. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getContentsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getContentsPostRequest($app, $schema, $query_dto, $x_fields = null, $x_flatten = null, $x_languages = null, $x_no_slow_total = null, $x_no_total = null, $x_unpublished = null, string $contentType = self::contentTypes['getContentsPost'][0])
    {

        // verify the required parameter 'app' is set
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling '
            );
        }

        // verify the required parameter 'schema' is set
        if ($schema === null || (is_array($schema) && count($schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $schema when calling '
            );
        }

        // verify the required parameter 'query_dto' is set
        if ($query_dto === null || (is_array($query_dto) && count($query_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $query_dto when calling '
            );
        }








        $resourcePath = '/api/content/{app}/{schema}/query';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_fields !== null) {
            $headerParams['X-Fields'] = ObjectSerializer::toHeaderValue($x_fields);
        }
        // header params
        if ($x_flatten !== null) {
            $headerParams['X-Flatten'] = ObjectSerializer::toHeaderValue($x_flatten);
        }
        // header params
        if ($x_languages !== null) {
            $headerParams['X-Languages'] = ObjectSerializer::toHeaderValue($x_languages);
        }
        // header params
        if ($x_no_slow_total !== null) {
            $headerParams['X-NoSlowTotal'] = ObjectSerializer::toHeaderValue($x_no_slow_total);
        }
        // header params
        if ($x_no_total !== null) {
            $headerParams['X-NoTotal'] = ObjectSerializer::toHeaderValue($x_no_total);
        }
        // header params
        if ($x_unpublished !== null) {
            $headerParams['X-Unpublished'] = ObjectSerializer::toHeaderValue($x_unpublished);
        }

        // path params
        if ($app !== null) {
            $resourcePath = str_replace(
                '{' . 'app' . '}',
                ObjectSerializer::toPathValue($app),
                $resourcePath
            );
        }
        // path params
        if ($schema !== null) {
            $resourcePath = str_replace(
                '{' . 'schema' . '}',
                ObjectSerializer::toPathValue($schema),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($query_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($query_dto));
            } else {
                $httpBody = $query_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getReferences
     *
     * Get all references of a content.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content to fetch. (required)
     * @param  string $q The optional json query. (optional)
     * @param  string $x_fields The list of content fields (comma-separated). (optional)
     * @param  bool $x_flatten Provide the data as flat object. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReferences'] to see the possible values for this operation
     *
     * @throws \Squidex\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Squidex\Client\Model\ContentsDto|\Squidex\Client\Model\ErrorDto
     */
    public function getReferences($app, $schema, $id, $q = null, $x_fields = null, $x_flatten = null, $x_languages = null, $x_unpublished = null, $x_no_slow_total = null, $x_no_total = null, string $contentType = self::contentTypes['getReferences'][0])
    {
        list($response) = $this->getReferencesWithHttpInfo($app, $schema, $id, $q, $x_fields, $x_flatten, $x_languages, $x_unpublished, $x_no_slow_total, $x_no_total, $contentType);
        return $response;
    }

    /**
     * Operation getReferencesWithHttpInfo
     *
     * Get all references of a content.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content to fetch. (required)
     * @param  string $q The optional json query. (optional)
     * @param  string $x_fields The list of content fields (comma-separated). (optional)
     * @param  bool $x_flatten Provide the data as flat object. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReferences'] to see the possible values for this operation
     *
     * @throws \Squidex\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Squidex\Client\Model\ContentsDto|\Squidex\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getReferencesWithHttpInfo($app, $schema, $id, $q = null, $x_fields = null, $x_flatten = null, $x_languages = null, $x_unpublished = null, $x_no_slow_total = null, $x_no_total = null, string $contentType = self::contentTypes['getReferences'][0])
    {
        $request = $this->getReferencesRequest($app, $schema, $id, $q, $x_fields, $x_flatten, $x_languages, $x_unpublished, $x_no_slow_total, $x_no_total, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Squidex\Client\Model\ContentsDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex\Client\Model\ContentsDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex\Client\Model\ContentsDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Squidex\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Squidex\Client\Model\ContentsDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex\Client\Model\ContentsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getReferencesAsync
     *
     * Get all references of a content.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content to fetch. (required)
     * @param  string $q The optional json query. (optional)
     * @param  string $x_fields The list of content fields (comma-separated). (optional)
     * @param  bool $x_flatten Provide the data as flat object. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReferences'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getReferencesAsync($app, $schema, $id, $q = null, $x_fields = null, $x_flatten = null, $x_languages = null, $x_unpublished = null, $x_no_slow_total = null, $x_no_total = null, string $contentType = self::contentTypes['getReferences'][0])
    {
        return $this->getReferencesAsyncWithHttpInfo($app, $schema, $id, $q, $x_fields, $x_flatten, $x_languages, $x_unpublished, $x_no_slow_total, $x_no_total, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getReferencesAsyncWithHttpInfo
     *
     * Get all references of a content.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content to fetch. (required)
     * @param  string $q The optional json query. (optional)
     * @param  string $x_fields The list of content fields (comma-separated). (optional)
     * @param  bool $x_flatten Provide the data as flat object. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReferences'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getReferencesAsyncWithHttpInfo($app, $schema, $id, $q = null, $x_fields = null, $x_flatten = null, $x_languages = null, $x_unpublished = null, $x_no_slow_total = null, $x_no_total = null, string $contentType = self::contentTypes['getReferences'][0])
    {
        $returnType = '\Squidex\Client\Model\ContentsDto';
        $request = $this->getReferencesRequest($app, $schema, $id, $q, $x_fields, $x_flatten, $x_languages, $x_unpublished, $x_no_slow_total, $x_no_total, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getReferences'
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content to fetch. (required)
     * @param  string $q The optional json query. (optional)
     * @param  string $x_fields The list of content fields (comma-separated). (optional)
     * @param  bool $x_flatten Provide the data as flat object. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReferences'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getReferencesRequest($app, $schema, $id, $q = null, $x_fields = null, $x_flatten = null, $x_languages = null, $x_unpublished = null, $x_no_slow_total = null, $x_no_total = null, string $contentType = self::contentTypes['getReferences'][0])
    {

        // verify the required parameter 'app' is set
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling '
            );
        }

        // verify the required parameter 'schema' is set
        if ($schema === null || (is_array($schema) && count($schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $schema when calling '
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling '
            );
        }









        $resourcePath = '/api/content/{app}/{schema}/{id}/references';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $q,
            'q', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_fields !== null) {
            $headerParams['X-Fields'] = ObjectSerializer::toHeaderValue($x_fields);
        }
        // header params
        if ($x_flatten !== null) {
            $headerParams['X-Flatten'] = ObjectSerializer::toHeaderValue($x_flatten);
        }
        // header params
        if ($x_languages !== null) {
            $headerParams['X-Languages'] = ObjectSerializer::toHeaderValue($x_languages);
        }
        // header params
        if ($x_unpublished !== null) {
            $headerParams['X-Unpublished'] = ObjectSerializer::toHeaderValue($x_unpublished);
        }
        // header params
        if ($x_no_slow_total !== null) {
            $headerParams['X-NoSlowTotal'] = ObjectSerializer::toHeaderValue($x_no_slow_total);
        }
        // header params
        if ($x_no_total !== null) {
            $headerParams['X-NoTotal'] = ObjectSerializer::toHeaderValue($x_no_total);
        }

        // path params
        if ($app !== null) {
            $resourcePath = str_replace(
                '{' . 'app' . '}',
                ObjectSerializer::toPathValue($app),
                $resourcePath
            );
        }
        // path params
        if ($schema !== null) {
            $resourcePath = str_replace(
                '{' . 'schema' . '}',
                ObjectSerializer::toPathValue($schema),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getReferencing
     *
     * Get a referencing contents of a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content to fetch. (required)
     * @param  string $q The optional json query. (optional)
     * @param  string $x_fields The list of content fields (comma-separated). (optional)
     * @param  bool $x_flatten Provide the data as flat object. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReferencing'] to see the possible values for this operation
     *
     * @throws \Squidex\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Squidex\Client\Model\ContentsDto|\Squidex\Client\Model\ErrorDto
     */
    public function getReferencing($app, $schema, $id, $q = null, $x_fields = null, $x_flatten = null, $x_languages = null, $x_unpublished = null, $x_no_slow_total = null, $x_no_total = null, string $contentType = self::contentTypes['getReferencing'][0])
    {
        list($response) = $this->getReferencingWithHttpInfo($app, $schema, $id, $q, $x_fields, $x_flatten, $x_languages, $x_unpublished, $x_no_slow_total, $x_no_total, $contentType);
        return $response;
    }

    /**
     * Operation getReferencingWithHttpInfo
     *
     * Get a referencing contents of a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content to fetch. (required)
     * @param  string $q The optional json query. (optional)
     * @param  string $x_fields The list of content fields (comma-separated). (optional)
     * @param  bool $x_flatten Provide the data as flat object. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReferencing'] to see the possible values for this operation
     *
     * @throws \Squidex\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Squidex\Client\Model\ContentsDto|\Squidex\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getReferencingWithHttpInfo($app, $schema, $id, $q = null, $x_fields = null, $x_flatten = null, $x_languages = null, $x_unpublished = null, $x_no_slow_total = null, $x_no_total = null, string $contentType = self::contentTypes['getReferencing'][0])
    {
        $request = $this->getReferencingRequest($app, $schema, $id, $q, $x_fields, $x_flatten, $x_languages, $x_unpublished, $x_no_slow_total, $x_no_total, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Squidex\Client\Model\ContentsDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex\Client\Model\ContentsDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex\Client\Model\ContentsDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Squidex\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Squidex\Client\Model\ContentsDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex\Client\Model\ContentsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getReferencingAsync
     *
     * Get a referencing contents of a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content to fetch. (required)
     * @param  string $q The optional json query. (optional)
     * @param  string $x_fields The list of content fields (comma-separated). (optional)
     * @param  bool $x_flatten Provide the data as flat object. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReferencing'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getReferencingAsync($app, $schema, $id, $q = null, $x_fields = null, $x_flatten = null, $x_languages = null, $x_unpublished = null, $x_no_slow_total = null, $x_no_total = null, string $contentType = self::contentTypes['getReferencing'][0])
    {
        return $this->getReferencingAsyncWithHttpInfo($app, $schema, $id, $q, $x_fields, $x_flatten, $x_languages, $x_unpublished, $x_no_slow_total, $x_no_total, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getReferencingAsyncWithHttpInfo
     *
     * Get a referencing contents of a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content to fetch. (required)
     * @param  string $q The optional json query. (optional)
     * @param  string $x_fields The list of content fields (comma-separated). (optional)
     * @param  bool $x_flatten Provide the data as flat object. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReferencing'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getReferencingAsyncWithHttpInfo($app, $schema, $id, $q = null, $x_fields = null, $x_flatten = null, $x_languages = null, $x_unpublished = null, $x_no_slow_total = null, $x_no_total = null, string $contentType = self::contentTypes['getReferencing'][0])
    {
        $returnType = '\Squidex\Client\Model\ContentsDto';
        $request = $this->getReferencingRequest($app, $schema, $id, $q, $x_fields, $x_flatten, $x_languages, $x_unpublished, $x_no_slow_total, $x_no_total, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getReferencing'
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content to fetch. (required)
     * @param  string $q The optional json query. (optional)
     * @param  string $x_fields The list of content fields (comma-separated). (optional)
     * @param  bool $x_flatten Provide the data as flat object. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReferencing'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getReferencingRequest($app, $schema, $id, $q = null, $x_fields = null, $x_flatten = null, $x_languages = null, $x_unpublished = null, $x_no_slow_total = null, $x_no_total = null, string $contentType = self::contentTypes['getReferencing'][0])
    {

        // verify the required parameter 'app' is set
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling '
            );
        }

        // verify the required parameter 'schema' is set
        if ($schema === null || (is_array($schema) && count($schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $schema when calling '
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling '
            );
        }









        $resourcePath = '/api/content/{app}/{schema}/{id}/referencing';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $q,
            'q', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_fields !== null) {
            $headerParams['X-Fields'] = ObjectSerializer::toHeaderValue($x_fields);
        }
        // header params
        if ($x_flatten !== null) {
            $headerParams['X-Flatten'] = ObjectSerializer::toHeaderValue($x_flatten);
        }
        // header params
        if ($x_languages !== null) {
            $headerParams['X-Languages'] = ObjectSerializer::toHeaderValue($x_languages);
        }
        // header params
        if ($x_unpublished !== null) {
            $headerParams['X-Unpublished'] = ObjectSerializer::toHeaderValue($x_unpublished);
        }
        // header params
        if ($x_no_slow_total !== null) {
            $headerParams['X-NoSlowTotal'] = ObjectSerializer::toHeaderValue($x_no_slow_total);
        }
        // header params
        if ($x_no_total !== null) {
            $headerParams['X-NoTotal'] = ObjectSerializer::toHeaderValue($x_no_total);
        }

        // path params
        if ($app !== null) {
            $resourcePath = str_replace(
                '{' . 'app' . '}',
                ObjectSerializer::toPathValue($app),
                $resourcePath
            );
        }
        // path params
        if ($schema !== null) {
            $resourcePath = str_replace(
                '{' . 'schema' . '}',
                ObjectSerializer::toPathValue($schema),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchContent
     *
     * Patchs a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to patch. (required)
     * @param  array<string,array> $request_body The patch for the content item. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchContent'] to see the possible values for this operation
     *
     * @throws \Squidex\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Squidex\Client\Model\ContentDto|\Squidex\Client\Model\ErrorDto|\Squidex\Client\Model\ErrorDto
     */
    public function patchContent($app, $schema, $id, $request_body, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['patchContent'][0])
    {
        list($response) = $this->patchContentWithHttpInfo($app, $schema, $id, $request_body, $x_unpublished, $x_languages, $contentType);
        return $response;
    }

    /**
     * Operation patchContentWithHttpInfo
     *
     * Patchs a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to patch. (required)
     * @param  array<string,array> $request_body The patch for the content item. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchContent'] to see the possible values for this operation
     *
     * @throws \Squidex\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Squidex\Client\Model\ContentDto|\Squidex\Client\Model\ErrorDto|\Squidex\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchContentWithHttpInfo($app, $schema, $id, $request_body, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['patchContent'][0])
    {
        $request = $this->patchContentRequest($app, $schema, $id, $request_body, $x_unpublished, $x_languages, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Squidex\Client\Model\ContentDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex\Client\Model\ContentDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex\Client\Model\ContentDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Squidex\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Squidex\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Squidex\Client\Model\ContentDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex\Client\Model\ContentDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchContentAsync
     *
     * Patchs a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to patch. (required)
     * @param  array<string,array> $request_body The patch for the content item. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchContent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchContentAsync($app, $schema, $id, $request_body, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['patchContent'][0])
    {
        return $this->patchContentAsyncWithHttpInfo($app, $schema, $id, $request_body, $x_unpublished, $x_languages, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchContentAsyncWithHttpInfo
     *
     * Patchs a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to patch. (required)
     * @param  array<string,array> $request_body The patch for the content item. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchContent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchContentAsyncWithHttpInfo($app, $schema, $id, $request_body, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['patchContent'][0])
    {
        $returnType = '\Squidex\Client\Model\ContentDto';
        $request = $this->patchContentRequest($app, $schema, $id, $request_body, $x_unpublished, $x_languages, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchContent'
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to patch. (required)
     * @param  array<string,array> $request_body The patch for the content item. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchContent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function patchContentRequest($app, $schema, $id, $request_body, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['patchContent'][0])
    {

        // verify the required parameter 'app' is set
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling '
            );
        }

        // verify the required parameter 'schema' is set
        if ($schema === null || (is_array($schema) && count($schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $schema when calling '
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling '
            );
        }

        // verify the required parameter 'request_body' is set
        if ($request_body === null || (is_array($request_body) && count($request_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request_body when calling '
            );
        }




        $resourcePath = '/api/content/{app}/{schema}/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_unpublished !== null) {
            $headerParams['X-Unpublished'] = ObjectSerializer::toHeaderValue($x_unpublished);
        }
        // header params
        if ($x_languages !== null) {
            $headerParams['X-Languages'] = ObjectSerializer::toHeaderValue($x_languages);
        }

        // path params
        if ($app !== null) {
            $resourcePath = str_replace(
                '{' . 'app' . '}',
                ObjectSerializer::toPathValue($app),
                $resourcePath
            );
        }
        // path params
        if ($schema !== null) {
            $resourcePath = str_replace(
                '{' . 'schema' . '}',
                ObjectSerializer::toPathValue($schema),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request_body));
            } else {
                $httpBody = $request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postContent
     *
     * Create a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  array<string,array> $request_body The full data for the content item. (required)
     * @param  string $status The initial status. (optional)
     * @param  string $id The optional custom content id. (optional)
     * @param  bool $publish True to automatically publish the content. (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postContent'] to see the possible values for this operation
     *
     * @throws \Squidex\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Squidex\Client\Model\ContentDto|\Squidex\Client\Model\ErrorDto|\Squidex\Client\Model\ErrorDto
     */
    public function postContent($app, $schema, $request_body, $status = null, $id = null, $publish = null, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['postContent'][0])
    {
        list($response) = $this->postContentWithHttpInfo($app, $schema, $request_body, $status, $id, $publish, $x_unpublished, $x_languages, $contentType);
        return $response;
    }

    /**
     * Operation postContentWithHttpInfo
     *
     * Create a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  array<string,array> $request_body The full data for the content item. (required)
     * @param  string $status The initial status. (optional)
     * @param  string $id The optional custom content id. (optional)
     * @param  bool $publish True to automatically publish the content. (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postContent'] to see the possible values for this operation
     *
     * @throws \Squidex\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Squidex\Client\Model\ContentDto|\Squidex\Client\Model\ErrorDto|\Squidex\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function postContentWithHttpInfo($app, $schema, $request_body, $status = null, $id = null, $publish = null, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['postContent'][0])
    {
        $request = $this->postContentRequest($app, $schema, $request_body, $status, $id, $publish, $x_unpublished, $x_languages, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Squidex\Client\Model\ContentDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex\Client\Model\ContentDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex\Client\Model\ContentDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Squidex\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Squidex\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Squidex\Client\Model\ContentDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex\Client\Model\ContentDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postContentAsync
     *
     * Create a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  array<string,array> $request_body The full data for the content item. (required)
     * @param  string $status The initial status. (optional)
     * @param  string $id The optional custom content id. (optional)
     * @param  bool $publish True to automatically publish the content. (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postContent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postContentAsync($app, $schema, $request_body, $status = null, $id = null, $publish = null, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['postContent'][0])
    {
        return $this->postContentAsyncWithHttpInfo($app, $schema, $request_body, $status, $id, $publish, $x_unpublished, $x_languages, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postContentAsyncWithHttpInfo
     *
     * Create a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  array<string,array> $request_body The full data for the content item. (required)
     * @param  string $status The initial status. (optional)
     * @param  string $id The optional custom content id. (optional)
     * @param  bool $publish True to automatically publish the content. (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postContent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postContentAsyncWithHttpInfo($app, $schema, $request_body, $status = null, $id = null, $publish = null, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['postContent'][0])
    {
        $returnType = '\Squidex\Client\Model\ContentDto';
        $request = $this->postContentRequest($app, $schema, $request_body, $status, $id, $publish, $x_unpublished, $x_languages, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postContent'
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  array<string,array> $request_body The full data for the content item. (required)
     * @param  string $status The initial status. (optional)
     * @param  string $id The optional custom content id. (optional)
     * @param  bool $publish True to automatically publish the content. (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postContent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postContentRequest($app, $schema, $request_body, $status = null, $id = null, $publish = null, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['postContent'][0])
    {

        // verify the required parameter 'app' is set
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling '
            );
        }

        // verify the required parameter 'schema' is set
        if ($schema === null || (is_array($schema) && count($schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $schema when calling '
            );
        }

        // verify the required parameter 'request_body' is set
        if ($request_body === null || (is_array($request_body) && count($request_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request_body when calling '
            );
        }







        $resourcePath = '/api/content/{app}/{schema}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $publish,
            'publish', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_unpublished !== null) {
            $headerParams['X-Unpublished'] = ObjectSerializer::toHeaderValue($x_unpublished);
        }
        // header params
        if ($x_languages !== null) {
            $headerParams['X-Languages'] = ObjectSerializer::toHeaderValue($x_languages);
        }

        // path params
        if ($app !== null) {
            $resourcePath = str_replace(
                '{' . 'app' . '}',
                ObjectSerializer::toPathValue($app),
                $resourcePath
            );
        }
        // path params
        if ($schema !== null) {
            $resourcePath = str_replace(
                '{' . 'schema' . '}',
                ObjectSerializer::toPathValue($schema),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request_body));
            } else {
                $httpBody = $request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postContents
     *
     * Import content items.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  \Squidex\Client\Model\ImportContentsDto $import_contents_dto The import request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postContents'] to see the possible values for this operation
     *
     * @throws \Squidex\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Squidex\Client\Model\BulkResultDto[]|\Squidex\Client\Model\ErrorDto|\Squidex\Client\Model\ErrorDto
     * @deprecated
     */
    public function postContents($app, $schema, $import_contents_dto, string $contentType = self::contentTypes['postContents'][0])
    {
        list($response) = $this->postContentsWithHttpInfo($app, $schema, $import_contents_dto, $contentType);
        return $response;
    }

    /**
     * Operation postContentsWithHttpInfo
     *
     * Import content items.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  \Squidex\Client\Model\ImportContentsDto $import_contents_dto The import request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postContents'] to see the possible values for this operation
     *
     * @throws \Squidex\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Squidex\Client\Model\BulkResultDto[]|\Squidex\Client\Model\ErrorDto|\Squidex\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function postContentsWithHttpInfo($app, $schema, $import_contents_dto, string $contentType = self::contentTypes['postContents'][0])
    {
        $request = $this->postContentsRequest($app, $schema, $import_contents_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Squidex\Client\Model\BulkResultDto[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex\Client\Model\BulkResultDto[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex\Client\Model\BulkResultDto[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Squidex\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Squidex\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Squidex\Client\Model\BulkResultDto[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex\Client\Model\BulkResultDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postContentsAsync
     *
     * Import content items.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  \Squidex\Client\Model\ImportContentsDto $import_contents_dto The import request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postContents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function postContentsAsync($app, $schema, $import_contents_dto, string $contentType = self::contentTypes['postContents'][0])
    {
        return $this->postContentsAsyncWithHttpInfo($app, $schema, $import_contents_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postContentsAsyncWithHttpInfo
     *
     * Import content items.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  \Squidex\Client\Model\ImportContentsDto $import_contents_dto The import request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postContents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function postContentsAsyncWithHttpInfo($app, $schema, $import_contents_dto, string $contentType = self::contentTypes['postContents'][0])
    {
        $returnType = '\Squidex\Client\Model\BulkResultDto[]';
        $request = $this->postContentsRequest($app, $schema, $import_contents_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postContents'
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  \Squidex\Client\Model\ImportContentsDto $import_contents_dto The import request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postContents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function postContentsRequest($app, $schema, $import_contents_dto, string $contentType = self::contentTypes['postContents'][0])
    {

        // verify the required parameter 'app' is set
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling '
            );
        }

        // verify the required parameter 'schema' is set
        if ($schema === null || (is_array($schema) && count($schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $schema when calling '
            );
        }

        // verify the required parameter 'import_contents_dto' is set
        if ($import_contents_dto === null || (is_array($import_contents_dto) && count($import_contents_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $import_contents_dto when calling '
            );
        }


        $resourcePath = '/api/content/{app}/{schema}/import';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app !== null) {
            $resourcePath = str_replace(
                '{' . 'app' . '}',
                ObjectSerializer::toPathValue($app),
                $resourcePath
            );
        }
        // path params
        if ($schema !== null) {
            $resourcePath = str_replace(
                '{' . 'schema' . '}',
                ObjectSerializer::toPathValue($schema),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($import_contents_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($import_contents_dto));
            } else {
                $httpBody = $import_contents_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postUpsertContent
     *
     * Upsert a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to update. (required)
     * @param  array<string,array> $request_body The full data for the content item. (required)
     * @param  string $status The initial status. (optional)
     * @param  bool $patch Makes the update as patch. (optional)
     * @param  bool $publish True to automatically publish the content. (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postUpsertContent'] to see the possible values for this operation
     *
     * @throws \Squidex\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Squidex\Client\Model\ContentDto|\Squidex\Client\Model\ErrorDto|\Squidex\Client\Model\ErrorDto
     */
    public function postUpsertContent($app, $schema, $id, $request_body, $status = null, $patch = null, $publish = null, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['postUpsertContent'][0])
    {
        list($response) = $this->postUpsertContentWithHttpInfo($app, $schema, $id, $request_body, $status, $patch, $publish, $x_unpublished, $x_languages, $contentType);
        return $response;
    }

    /**
     * Operation postUpsertContentWithHttpInfo
     *
     * Upsert a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to update. (required)
     * @param  array<string,array> $request_body The full data for the content item. (required)
     * @param  string $status The initial status. (optional)
     * @param  bool $patch Makes the update as patch. (optional)
     * @param  bool $publish True to automatically publish the content. (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postUpsertContent'] to see the possible values for this operation
     *
     * @throws \Squidex\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Squidex\Client\Model\ContentDto|\Squidex\Client\Model\ErrorDto|\Squidex\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function postUpsertContentWithHttpInfo($app, $schema, $id, $request_body, $status = null, $patch = null, $publish = null, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['postUpsertContent'][0])
    {
        $request = $this->postUpsertContentRequest($app, $schema, $id, $request_body, $status, $patch, $publish, $x_unpublished, $x_languages, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Squidex\Client\Model\ContentDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex\Client\Model\ContentDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex\Client\Model\ContentDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Squidex\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Squidex\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Squidex\Client\Model\ContentDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex\Client\Model\ContentDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postUpsertContentAsync
     *
     * Upsert a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to update. (required)
     * @param  array<string,array> $request_body The full data for the content item. (required)
     * @param  string $status The initial status. (optional)
     * @param  bool $patch Makes the update as patch. (optional)
     * @param  bool $publish True to automatically publish the content. (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postUpsertContent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postUpsertContentAsync($app, $schema, $id, $request_body, $status = null, $patch = null, $publish = null, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['postUpsertContent'][0])
    {
        return $this->postUpsertContentAsyncWithHttpInfo($app, $schema, $id, $request_body, $status, $patch, $publish, $x_unpublished, $x_languages, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postUpsertContentAsyncWithHttpInfo
     *
     * Upsert a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to update. (required)
     * @param  array<string,array> $request_body The full data for the content item. (required)
     * @param  string $status The initial status. (optional)
     * @param  bool $patch Makes the update as patch. (optional)
     * @param  bool $publish True to automatically publish the content. (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postUpsertContent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postUpsertContentAsyncWithHttpInfo($app, $schema, $id, $request_body, $status = null, $patch = null, $publish = null, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['postUpsertContent'][0])
    {
        $returnType = '\Squidex\Client\Model\ContentDto';
        $request = $this->postUpsertContentRequest($app, $schema, $id, $request_body, $status, $patch, $publish, $x_unpublished, $x_languages, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postUpsertContent'
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to update. (required)
     * @param  array<string,array> $request_body The full data for the content item. (required)
     * @param  string $status The initial status. (optional)
     * @param  bool $patch Makes the update as patch. (optional)
     * @param  bool $publish True to automatically publish the content. (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postUpsertContent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postUpsertContentRequest($app, $schema, $id, $request_body, $status = null, $patch = null, $publish = null, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['postUpsertContent'][0])
    {

        // verify the required parameter 'app' is set
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling '
            );
        }

        // verify the required parameter 'schema' is set
        if ($schema === null || (is_array($schema) && count($schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $schema when calling '
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling '
            );
        }

        // verify the required parameter 'request_body' is set
        if ($request_body === null || (is_array($request_body) && count($request_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request_body when calling '
            );
        }







        $resourcePath = '/api/content/{app}/{schema}/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $patch,
            'patch', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $publish,
            'publish', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_unpublished !== null) {
            $headerParams['X-Unpublished'] = ObjectSerializer::toHeaderValue($x_unpublished);
        }
        // header params
        if ($x_languages !== null) {
            $headerParams['X-Languages'] = ObjectSerializer::toHeaderValue($x_languages);
        }

        // path params
        if ($app !== null) {
            $resourcePath = str_replace(
                '{' . 'app' . '}',
                ObjectSerializer::toPathValue($app),
                $resourcePath
            );
        }
        // path params
        if ($schema !== null) {
            $resourcePath = str_replace(
                '{' . 'schema' . '}',
                ObjectSerializer::toPathValue($schema),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request_body));
            } else {
                $httpBody = $request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putContent
     *
     * Update a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to update. (required)
     * @param  array<string,array> $request_body The full data for the content item. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putContent'] to see the possible values for this operation
     *
     * @throws \Squidex\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Squidex\Client\Model\ContentDto|\Squidex\Client\Model\ErrorDto|\Squidex\Client\Model\ErrorDto
     */
    public function putContent($app, $schema, $id, $request_body, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['putContent'][0])
    {
        list($response) = $this->putContentWithHttpInfo($app, $schema, $id, $request_body, $x_unpublished, $x_languages, $contentType);
        return $response;
    }

    /**
     * Operation putContentWithHttpInfo
     *
     * Update a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to update. (required)
     * @param  array<string,array> $request_body The full data for the content item. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putContent'] to see the possible values for this operation
     *
     * @throws \Squidex\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Squidex\Client\Model\ContentDto|\Squidex\Client\Model\ErrorDto|\Squidex\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function putContentWithHttpInfo($app, $schema, $id, $request_body, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['putContent'][0])
    {
        $request = $this->putContentRequest($app, $schema, $id, $request_body, $x_unpublished, $x_languages, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Squidex\Client\Model\ContentDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex\Client\Model\ContentDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex\Client\Model\ContentDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Squidex\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Squidex\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Squidex\Client\Model\ContentDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex\Client\Model\ContentDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putContentAsync
     *
     * Update a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to update. (required)
     * @param  array<string,array> $request_body The full data for the content item. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putContent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putContentAsync($app, $schema, $id, $request_body, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['putContent'][0])
    {
        return $this->putContentAsyncWithHttpInfo($app, $schema, $id, $request_body, $x_unpublished, $x_languages, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putContentAsyncWithHttpInfo
     *
     * Update a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to update. (required)
     * @param  array<string,array> $request_body The full data for the content item. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putContent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putContentAsyncWithHttpInfo($app, $schema, $id, $request_body, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['putContent'][0])
    {
        $returnType = '\Squidex\Client\Model\ContentDto';
        $request = $this->putContentRequest($app, $schema, $id, $request_body, $x_unpublished, $x_languages, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putContent'
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to update. (required)
     * @param  array<string,array> $request_body The full data for the content item. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putContent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putContentRequest($app, $schema, $id, $request_body, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['putContent'][0])
    {

        // verify the required parameter 'app' is set
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling '
            );
        }

        // verify the required parameter 'schema' is set
        if ($schema === null || (is_array($schema) && count($schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $schema when calling '
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling '
            );
        }

        // verify the required parameter 'request_body' is set
        if ($request_body === null || (is_array($request_body) && count($request_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request_body when calling '
            );
        }




        $resourcePath = '/api/content/{app}/{schema}/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_unpublished !== null) {
            $headerParams['X-Unpublished'] = ObjectSerializer::toHeaderValue($x_unpublished);
        }
        // header params
        if ($x_languages !== null) {
            $headerParams['X-Languages'] = ObjectSerializer::toHeaderValue($x_languages);
        }

        // path params
        if ($app !== null) {
            $resourcePath = str_replace(
                '{' . 'app' . '}',
                ObjectSerializer::toPathValue($app),
                $resourcePath
            );
        }
        // path params
        if ($schema !== null) {
            $resourcePath = str_replace(
                '{' . 'schema' . '}',
                ObjectSerializer::toPathValue($schema),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request_body));
            } else {
                $httpBody = $request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putContentStatus
     *
     * Change status of a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to change. (required)
     * @param  \Squidex\Client\Model\ChangeStatusDto $change_status_dto The status request. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putContentStatus'] to see the possible values for this operation
     *
     * @throws \Squidex\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Squidex\Client\Model\ContentDto|\Squidex\Client\Model\ErrorDto|\Squidex\Client\Model\ErrorDto
     */
    public function putContentStatus($app, $schema, $id, $change_status_dto, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['putContentStatus'][0])
    {
        list($response) = $this->putContentStatusWithHttpInfo($app, $schema, $id, $change_status_dto, $x_unpublished, $x_languages, $contentType);
        return $response;
    }

    /**
     * Operation putContentStatusWithHttpInfo
     *
     * Change status of a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to change. (required)
     * @param  \Squidex\Client\Model\ChangeStatusDto $change_status_dto The status request. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putContentStatus'] to see the possible values for this operation
     *
     * @throws \Squidex\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Squidex\Client\Model\ContentDto|\Squidex\Client\Model\ErrorDto|\Squidex\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function putContentStatusWithHttpInfo($app, $schema, $id, $change_status_dto, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['putContentStatus'][0])
    {
        $request = $this->putContentStatusRequest($app, $schema, $id, $change_status_dto, $x_unpublished, $x_languages, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Squidex\Client\Model\ContentDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex\Client\Model\ContentDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex\Client\Model\ContentDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Squidex\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Squidex\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Squidex\Client\Model\ContentDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex\Client\Model\ContentDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putContentStatusAsync
     *
     * Change status of a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to change. (required)
     * @param  \Squidex\Client\Model\ChangeStatusDto $change_status_dto The status request. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putContentStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putContentStatusAsync($app, $schema, $id, $change_status_dto, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['putContentStatus'][0])
    {
        return $this->putContentStatusAsyncWithHttpInfo($app, $schema, $id, $change_status_dto, $x_unpublished, $x_languages, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putContentStatusAsyncWithHttpInfo
     *
     * Change status of a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to change. (required)
     * @param  \Squidex\Client\Model\ChangeStatusDto $change_status_dto The status request. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putContentStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putContentStatusAsyncWithHttpInfo($app, $schema, $id, $change_status_dto, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['putContentStatus'][0])
    {
        $returnType = '\Squidex\Client\Model\ContentDto';
        $request = $this->putContentStatusRequest($app, $schema, $id, $change_status_dto, $x_unpublished, $x_languages, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putContentStatus'
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to change. (required)
     * @param  \Squidex\Client\Model\ChangeStatusDto $change_status_dto The status request. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putContentStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putContentStatusRequest($app, $schema, $id, $change_status_dto, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['putContentStatus'][0])
    {

        // verify the required parameter 'app' is set
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling '
            );
        }

        // verify the required parameter 'schema' is set
        if ($schema === null || (is_array($schema) && count($schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $schema when calling '
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling '
            );
        }

        // verify the required parameter 'change_status_dto' is set
        if ($change_status_dto === null || (is_array($change_status_dto) && count($change_status_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $change_status_dto when calling '
            );
        }




        $resourcePath = '/api/content/{app}/{schema}/{id}/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_unpublished !== null) {
            $headerParams['X-Unpublished'] = ObjectSerializer::toHeaderValue($x_unpublished);
        }
        // header params
        if ($x_languages !== null) {
            $headerParams['X-Languages'] = ObjectSerializer::toHeaderValue($x_languages);
        }

        // path params
        if ($app !== null) {
            $resourcePath = str_replace(
                '{' . 'app' . '}',
                ObjectSerializer::toPathValue($app),
                $resourcePath
            );
        }
        // path params
        if ($schema !== null) {
            $resourcePath = str_replace(
                '{' . 'schema' . '}',
                ObjectSerializer::toPathValue($schema),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($change_status_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($change_status_dto));
            } else {
                $httpBody = $change_status_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bulkUpdateContents
     *
     * Bulk update content items.
     *
     * @param  string $app The name of the app. (required)
     * @param  \Squidex\Client\Model\BulkUpdateContentsDto $bulk_update_contents_dto The bulk update request. (required)
     * @param  string $schema The name of the schema. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkUpdateContents'] to see the possible values for this operation
     *
     * @throws \Squidex\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Squidex\Client\Model\BulkResultDto[]|\Squidex\Client\Model\ErrorDto|\Squidex\Client\Model\ErrorDto
     */
    public function bulkUpdateContents($app, $bulk_update_contents_dto, $schema = null, string $contentType = self::contentTypes['bulkUpdateContents'][0])
    {
        list($response) = $this->bulkUpdateContentsWithHttpInfo($app, $bulk_update_contents_dto, $schema, $contentType);
        return $response;
    }

    /**
     * Operation bulkUpdateContentsWithHttpInfo
     *
     * Bulk update content items.
     *
     * @param  string $app The name of the app. (required)
     * @param  \Squidex\Client\Model\BulkUpdateContentsDto $bulk_update_contents_dto The bulk update request. (required)
     * @param  string $schema The name of the schema. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkUpdateContents'] to see the possible values for this operation
     *
     * @throws \Squidex\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Squidex\Client\Model\BulkResultDto[]|\Squidex\Client\Model\ErrorDto|\Squidex\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function bulkUpdateContentsWithHttpInfo($app, $bulk_update_contents_dto, $schema = null, string $contentType = self::contentTypes['bulkUpdateContents'][0])
    {
        $request = $this->bulkUpdateContentsRequest($app, $bulk_update_contents_dto, $schema, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Squidex\Client\Model\BulkResultDto[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex\Client\Model\BulkResultDto[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex\Client\Model\BulkResultDto[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Squidex\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Squidex\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Squidex\Client\Model\BulkResultDto[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex\Client\Model\BulkResultDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bulkUpdateContentsAsync
     *
     * Bulk update content items.
     *
     * @param  string $app The name of the app. (required)
     * @param  \Squidex\Client\Model\BulkUpdateContentsDto $bulk_update_contents_dto The bulk update request. (required)
     * @param  string $schema The name of the schema. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkUpdateContents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkUpdateContentsAsync($app, $bulk_update_contents_dto, $schema = null, string $contentType = self::contentTypes['bulkUpdateContents'][0])
    {
        return $this->bulkUpdateContentsAsyncWithHttpInfo($app, $bulk_update_contents_dto, $schema, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bulkUpdateContentsAsyncWithHttpInfo
     *
     * Bulk update content items.
     *
     * @param  string $app The name of the app. (required)
     * @param  \Squidex\Client\Model\BulkUpdateContentsDto $bulk_update_contents_dto The bulk update request. (required)
     * @param  string $schema The name of the schema. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkUpdateContents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkUpdateContentsAsyncWithHttpInfo($app, $bulk_update_contents_dto, $schema = null, string $contentType = self::contentTypes['bulkUpdateContents'][0])
    {
        $returnType = '\Squidex\Client\Model\BulkResultDto[]';
        $request = $this->bulkUpdateContentsRequest($app, $bulk_update_contents_dto, $schema, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bulkUpdateContents'
     *
     * @param  string $app The name of the app. (required)
     * @param  \Squidex\Client\Model\BulkUpdateContentsDto $bulk_update_contents_dto The bulk update request. (required)
     * @param  string $schema The name of the schema. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkUpdateContents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function bulkUpdateContentsRequest($app, $bulk_update_contents_dto, $schema = null, string $contentType = self::contentTypes['bulkUpdateContents'][0])
    {

        // verify the required parameter 'app' is set
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling '
            );
        }

        // verify the required parameter 'bulk_update_contents_dto' is set
        if ($bulk_update_contents_dto === null || (is_array($bulk_update_contents_dto) && count($bulk_update_contents_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bulk_update_contents_dto when calling '
            );
        }



        $resourcePath = '/api/content/{app}/bulk';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $schema,
            'schema', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($app !== null) {
            $resourcePath = str_replace(
                '{' . 'app' . '}',
                ObjectSerializer::toPathValue($app),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($bulk_update_contents_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($bulk_update_contents_dto));
            } else {
                $httpBody = $bulk_update_contents_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllContents
     *
     * Queries contents.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $ids The list of ids to query. (optional)
     * @param  \DateTime $schedule_from The start of the schedule. (optional)
     * @param  \DateTime $schedule_to The end of the schedule. (optional)
     * @param  string $referencing The ID of the referencing content item. (optional)
     * @param  string $references The ID of the reference content item. (optional)
     * @param  string $q The optional json query. (optional)
     * @param  string $x_fields The list of content fields (comma-separated). (optional)
     * @param  bool $x_flatten Provide the data as flat object. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllContents'] to see the possible values for this operation
     *
     * @throws \Squidex\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Squidex\Client\Model\ContentsDto|\Squidex\Client\Model\ErrorDto
     */
    public function getAllContents($app, $ids = null, $schedule_from = null, $schedule_to = null, $referencing = null, $references = null, $q = null, $x_fields = null, $x_flatten = null, $x_languages = null, $x_no_slow_total = null, $x_no_total = null, $x_unpublished = null, string $contentType = self::contentTypes['getAllContents'][0])
    {
        list($response) = $this->getAllContentsWithHttpInfo($app, $ids, $schedule_from, $schedule_to, $referencing, $references, $q, $x_fields, $x_flatten, $x_languages, $x_no_slow_total, $x_no_total, $x_unpublished, $contentType);
        return $response;
    }

    /**
     * Operation getAllContentsWithHttpInfo
     *
     * Queries contents.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $ids The list of ids to query. (optional)
     * @param  \DateTime $schedule_from The start of the schedule. (optional)
     * @param  \DateTime $schedule_to The end of the schedule. (optional)
     * @param  string $referencing The ID of the referencing content item. (optional)
     * @param  string $references The ID of the reference content item. (optional)
     * @param  string $q The optional json query. (optional)
     * @param  string $x_fields The list of content fields (comma-separated). (optional)
     * @param  bool $x_flatten Provide the data as flat object. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllContents'] to see the possible values for this operation
     *
     * @throws \Squidex\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Squidex\Client\Model\ContentsDto|\Squidex\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllContentsWithHttpInfo($app, $ids = null, $schedule_from = null, $schedule_to = null, $referencing = null, $references = null, $q = null, $x_fields = null, $x_flatten = null, $x_languages = null, $x_no_slow_total = null, $x_no_total = null, $x_unpublished = null, string $contentType = self::contentTypes['getAllContents'][0])
    {
        $request = $this->getAllContentsRequest($app, $ids, $schedule_from, $schedule_to, $referencing, $references, $q, $x_fields, $x_flatten, $x_languages, $x_no_slow_total, $x_no_total, $x_unpublished, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Squidex\Client\Model\ContentsDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex\Client\Model\ContentsDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex\Client\Model\ContentsDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Squidex\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Squidex\Client\Model\ContentsDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex\Client\Model\ContentsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAllContentsAsync
     *
     * Queries contents.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $ids The list of ids to query. (optional)
     * @param  \DateTime $schedule_from The start of the schedule. (optional)
     * @param  \DateTime $schedule_to The end of the schedule. (optional)
     * @param  string $referencing The ID of the referencing content item. (optional)
     * @param  string $references The ID of the reference content item. (optional)
     * @param  string $q The optional json query. (optional)
     * @param  string $x_fields The list of content fields (comma-separated). (optional)
     * @param  bool $x_flatten Provide the data as flat object. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllContents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllContentsAsync($app, $ids = null, $schedule_from = null, $schedule_to = null, $referencing = null, $references = null, $q = null, $x_fields = null, $x_flatten = null, $x_languages = null, $x_no_slow_total = null, $x_no_total = null, $x_unpublished = null, string $contentType = self::contentTypes['getAllContents'][0])
    {
        return $this->getAllContentsAsyncWithHttpInfo($app, $ids, $schedule_from, $schedule_to, $referencing, $references, $q, $x_fields, $x_flatten, $x_languages, $x_no_slow_total, $x_no_total, $x_unpublished, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllContentsAsyncWithHttpInfo
     *
     * Queries contents.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $ids The list of ids to query. (optional)
     * @param  \DateTime $schedule_from The start of the schedule. (optional)
     * @param  \DateTime $schedule_to The end of the schedule. (optional)
     * @param  string $referencing The ID of the referencing content item. (optional)
     * @param  string $references The ID of the reference content item. (optional)
     * @param  string $q The optional json query. (optional)
     * @param  string $x_fields The list of content fields (comma-separated). (optional)
     * @param  bool $x_flatten Provide the data as flat object. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllContents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllContentsAsyncWithHttpInfo($app, $ids = null, $schedule_from = null, $schedule_to = null, $referencing = null, $references = null, $q = null, $x_fields = null, $x_flatten = null, $x_languages = null, $x_no_slow_total = null, $x_no_total = null, $x_unpublished = null, string $contentType = self::contentTypes['getAllContents'][0])
    {
        $returnType = '\Squidex\Client\Model\ContentsDto';
        $request = $this->getAllContentsRequest($app, $ids, $schedule_from, $schedule_to, $referencing, $references, $q, $x_fields, $x_flatten, $x_languages, $x_no_slow_total, $x_no_total, $x_unpublished, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllContents'
     *
     * @param  string $app The name of the app. (required)
     * @param  string $ids The list of ids to query. (optional)
     * @param  \DateTime $schedule_from The start of the schedule. (optional)
     * @param  \DateTime $schedule_to The end of the schedule. (optional)
     * @param  string $referencing The ID of the referencing content item. (optional)
     * @param  string $references The ID of the reference content item. (optional)
     * @param  string $q The optional json query. (optional)
     * @param  string $x_fields The list of content fields (comma-separated). (optional)
     * @param  bool $x_flatten Provide the data as flat object. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllContents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAllContentsRequest($app, $ids = null, $schedule_from = null, $schedule_to = null, $referencing = null, $references = null, $q = null, $x_fields = null, $x_flatten = null, $x_languages = null, $x_no_slow_total = null, $x_no_total = null, $x_unpublished = null, string $contentType = self::contentTypes['getAllContents'][0])
    {

        // verify the required parameter 'app' is set
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling '
            );
        }














        $resourcePath = '/api/content/{app}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ids,
            'ids', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $schedule_from,
            'scheduleFrom', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $schedule_to,
            'scheduleTo', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $referencing,
            'referencing', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $references,
            'references', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $q,
            'q', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_fields !== null) {
            $headerParams['X-Fields'] = ObjectSerializer::toHeaderValue($x_fields);
        }
        // header params
        if ($x_flatten !== null) {
            $headerParams['X-Flatten'] = ObjectSerializer::toHeaderValue($x_flatten);
        }
        // header params
        if ($x_languages !== null) {
            $headerParams['X-Languages'] = ObjectSerializer::toHeaderValue($x_languages);
        }
        // header params
        if ($x_no_slow_total !== null) {
            $headerParams['X-NoSlowTotal'] = ObjectSerializer::toHeaderValue($x_no_slow_total);
        }
        // header params
        if ($x_no_total !== null) {
            $headerParams['X-NoTotal'] = ObjectSerializer::toHeaderValue($x_no_total);
        }
        // header params
        if ($x_unpublished !== null) {
            $headerParams['X-Unpublished'] = ObjectSerializer::toHeaderValue($x_unpublished);
        }

        // path params
        if ($app !== null) {
            $resourcePath = str_replace(
                '{' . 'app' . '}',
                ObjectSerializer::toPathValue($app),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllContentsPost
     *
     * Queries contents.
     *
     * @param  string $app The name of the app. (required)
     * @param  \Squidex\Client\Model\AllContentsByPostDto $all_contents_by_post_dto The required query object. (required)
     * @param  string $x_fields The list of content fields (comma-separated). (optional)
     * @param  bool $x_flatten Provide the data as flat object. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllContentsPost'] to see the possible values for this operation
     *
     * @throws \Squidex\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Squidex\Client\Model\ContentsDto|\Squidex\Client\Model\ErrorDto|\Squidex\Client\Model\ErrorDto
     */
    public function getAllContentsPost($app, $all_contents_by_post_dto, $x_fields = null, $x_flatten = null, $x_languages = null, $x_no_slow_total = null, $x_no_total = null, $x_unpublished = null, string $contentType = self::contentTypes['getAllContentsPost'][0])
    {
        list($response) = $this->getAllContentsPostWithHttpInfo($app, $all_contents_by_post_dto, $x_fields, $x_flatten, $x_languages, $x_no_slow_total, $x_no_total, $x_unpublished, $contentType);
        return $response;
    }

    /**
     * Operation getAllContentsPostWithHttpInfo
     *
     * Queries contents.
     *
     * @param  string $app The name of the app. (required)
     * @param  \Squidex\Client\Model\AllContentsByPostDto $all_contents_by_post_dto The required query object. (required)
     * @param  string $x_fields The list of content fields (comma-separated). (optional)
     * @param  bool $x_flatten Provide the data as flat object. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllContentsPost'] to see the possible values for this operation
     *
     * @throws \Squidex\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Squidex\Client\Model\ContentsDto|\Squidex\Client\Model\ErrorDto|\Squidex\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllContentsPostWithHttpInfo($app, $all_contents_by_post_dto, $x_fields = null, $x_flatten = null, $x_languages = null, $x_no_slow_total = null, $x_no_total = null, $x_unpublished = null, string $contentType = self::contentTypes['getAllContentsPost'][0])
    {
        $request = $this->getAllContentsPostRequest($app, $all_contents_by_post_dto, $x_fields, $x_flatten, $x_languages, $x_no_slow_total, $x_no_total, $x_unpublished, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Squidex\Client\Model\ContentsDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex\Client\Model\ContentsDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex\Client\Model\ContentsDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Squidex\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Squidex\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Squidex\Client\Model\ContentsDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex\Client\Model\ContentsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAllContentsPostAsync
     *
     * Queries contents.
     *
     * @param  string $app The name of the app. (required)
     * @param  \Squidex\Client\Model\AllContentsByPostDto $all_contents_by_post_dto The required query object. (required)
     * @param  string $x_fields The list of content fields (comma-separated). (optional)
     * @param  bool $x_flatten Provide the data as flat object. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllContentsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllContentsPostAsync($app, $all_contents_by_post_dto, $x_fields = null, $x_flatten = null, $x_languages = null, $x_no_slow_total = null, $x_no_total = null, $x_unpublished = null, string $contentType = self::contentTypes['getAllContentsPost'][0])
    {
        return $this->getAllContentsPostAsyncWithHttpInfo($app, $all_contents_by_post_dto, $x_fields, $x_flatten, $x_languages, $x_no_slow_total, $x_no_total, $x_unpublished, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllContentsPostAsyncWithHttpInfo
     *
     * Queries contents.
     *
     * @param  string $app The name of the app. (required)
     * @param  \Squidex\Client\Model\AllContentsByPostDto $all_contents_by_post_dto The required query object. (required)
     * @param  string $x_fields The list of content fields (comma-separated). (optional)
     * @param  bool $x_flatten Provide the data as flat object. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllContentsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllContentsPostAsyncWithHttpInfo($app, $all_contents_by_post_dto, $x_fields = null, $x_flatten = null, $x_languages = null, $x_no_slow_total = null, $x_no_total = null, $x_unpublished = null, string $contentType = self::contentTypes['getAllContentsPost'][0])
    {
        $returnType = '\Squidex\Client\Model\ContentsDto';
        $request = $this->getAllContentsPostRequest($app, $all_contents_by_post_dto, $x_fields, $x_flatten, $x_languages, $x_no_slow_total, $x_no_total, $x_unpublished, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllContentsPost'
     *
     * @param  string $app The name of the app. (required)
     * @param  \Squidex\Client\Model\AllContentsByPostDto $all_contents_by_post_dto The required query object. (required)
     * @param  string $x_fields The list of content fields (comma-separated). (optional)
     * @param  bool $x_flatten Provide the data as flat object. (optional)
     * @param  string $x_languages The list of languages to resolve (comma-separated). (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllContentsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAllContentsPostRequest($app, $all_contents_by_post_dto, $x_fields = null, $x_flatten = null, $x_languages = null, $x_no_slow_total = null, $x_no_total = null, $x_unpublished = null, string $contentType = self::contentTypes['getAllContentsPost'][0])
    {

        // verify the required parameter 'app' is set
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling '
            );
        }

        // verify the required parameter 'all_contents_by_post_dto' is set
        if ($all_contents_by_post_dto === null || (is_array($all_contents_by_post_dto) && count($all_contents_by_post_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $all_contents_by_post_dto when calling '
            );
        }








        $resourcePath = '/api/content/{app}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_fields !== null) {
            $headerParams['X-Fields'] = ObjectSerializer::toHeaderValue($x_fields);
        }
        // header params
        if ($x_flatten !== null) {
            $headerParams['X-Flatten'] = ObjectSerializer::toHeaderValue($x_flatten);
        }
        // header params
        if ($x_languages !== null) {
            $headerParams['X-Languages'] = ObjectSerializer::toHeaderValue($x_languages);
        }
        // header params
        if ($x_no_slow_total !== null) {
            $headerParams['X-NoSlowTotal'] = ObjectSerializer::toHeaderValue($x_no_slow_total);
        }
        // header params
        if ($x_no_total !== null) {
            $headerParams['X-NoTotal'] = ObjectSerializer::toHeaderValue($x_no_total);
        }
        // header params
        if ($x_unpublished !== null) {
            $headerParams['X-Unpublished'] = ObjectSerializer::toHeaderValue($x_unpublished);
        }

        // path params
        if ($app !== null) {
            $resourcePath = str_replace(
                '{' . 'app' . '}',
                ObjectSerializer::toPathValue($app),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($all_contents_by_post_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($all_contents_by_post_dto));
            } else {
                $httpBody = $all_contents_by_post_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getGraphQL
     *
     * GraphQL endpoint.
     *
     * @param  string $app The name of the app. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGraphQL'] to see the possible values for this operation
     *
     * @throws \Squidex\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject|\Squidex\Client\Model\ErrorDto
     */
    public function getGraphQL($app, $x_unpublished = null, string $contentType = self::contentTypes['getGraphQL'][0])
    {
        list($response) = $this->getGraphQLWithHttpInfo($app, $x_unpublished, $contentType);
        return $response;
    }

    /**
     * Operation getGraphQLWithHttpInfo
     *
     * GraphQL endpoint.
     *
     * @param  string $app The name of the app. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGraphQL'] to see the possible values for this operation
     *
     * @throws \Squidex\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject|\Squidex\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getGraphQLWithHttpInfo($app, $x_unpublished = null, string $contentType = self::contentTypes['getGraphQL'][0])
    {
        $request = $this->getGraphQLRequest($app, $x_unpublished, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Squidex\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getGraphQLAsync
     *
     * GraphQL endpoint.
     *
     * @param  string $app The name of the app. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGraphQL'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGraphQLAsync($app, $x_unpublished = null, string $contentType = self::contentTypes['getGraphQL'][0])
    {
        return $this->getGraphQLAsyncWithHttpInfo($app, $x_unpublished, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getGraphQLAsyncWithHttpInfo
     *
     * GraphQL endpoint.
     *
     * @param  string $app The name of the app. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGraphQL'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGraphQLAsyncWithHttpInfo($app, $x_unpublished = null, string $contentType = self::contentTypes['getGraphQL'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->getGraphQLRequest($app, $x_unpublished, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getGraphQL'
     *
     * @param  string $app The name of the app. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGraphQL'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getGraphQLRequest($app, $x_unpublished = null, string $contentType = self::contentTypes['getGraphQL'][0])
    {

        // verify the required parameter 'app' is set
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling '
            );
        }



        $resourcePath = '/api/content/{app}/graphql';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_unpublished !== null) {
            $headerParams['X-Unpublished'] = ObjectSerializer::toHeaderValue($x_unpublished);
        }

        // path params
        if ($app !== null) {
            $resourcePath = str_replace(
                '{' . 'app' . '}',
                ObjectSerializer::toPathValue($app),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/octet-stream', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getGraphQL2
     *
     * GraphQL endpoint.
     *
     * @param  string $app The name of the app. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGraphQL2'] to see the possible values for this operation
     *
     * @throws \Squidex\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject|\Squidex\Client\Model\ErrorDto
     */
    public function getGraphQL2($app, $x_unpublished = null, string $contentType = self::contentTypes['getGraphQL2'][0])
    {
        list($response) = $this->getGraphQL2WithHttpInfo($app, $x_unpublished, $contentType);
        return $response;
    }

    /**
     * Operation getGraphQL2WithHttpInfo
     *
     * GraphQL endpoint.
     *
     * @param  string $app The name of the app. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGraphQL2'] to see the possible values for this operation
     *
     * @throws \Squidex\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject|\Squidex\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getGraphQL2WithHttpInfo($app, $x_unpublished = null, string $contentType = self::contentTypes['getGraphQL2'][0])
    {
        $request = $this->getGraphQL2Request($app, $x_unpublished, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Squidex\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getGraphQL2Async
     *
     * GraphQL endpoint.
     *
     * @param  string $app The name of the app. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGraphQL2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGraphQL2Async($app, $x_unpublished = null, string $contentType = self::contentTypes['getGraphQL2'][0])
    {
        return $this->getGraphQL2AsyncWithHttpInfo($app, $x_unpublished, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getGraphQL2AsyncWithHttpInfo
     *
     * GraphQL endpoint.
     *
     * @param  string $app The name of the app. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGraphQL2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGraphQL2AsyncWithHttpInfo($app, $x_unpublished = null, string $contentType = self::contentTypes['getGraphQL2'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->getGraphQL2Request($app, $x_unpublished, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getGraphQL2'
     *
     * @param  string $app The name of the app. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGraphQL2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getGraphQL2Request($app, $x_unpublished = null, string $contentType = self::contentTypes['getGraphQL2'][0])
    {

        // verify the required parameter 'app' is set
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling '
            );
        }



        $resourcePath = '/api/content/{app}/graphql/batch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_unpublished !== null) {
            $headerParams['X-Unpublished'] = ObjectSerializer::toHeaderValue($x_unpublished);
        }

        // path params
        if ($app !== null) {
            $resourcePath = str_replace(
                '{' . 'app' . '}',
                ObjectSerializer::toPathValue($app),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/octet-stream', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
