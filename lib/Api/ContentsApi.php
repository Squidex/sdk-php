<?php
/**
 * ContentsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Squidex API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * ContentsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ContentsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'contentsBulkUpdateContents' => [
            'application/json',
        ],
        'contentsCreateDraft' => [
            'application/json',
        ],
        'contentsDeleteContent' => [
            'application/json',
        ],
        'contentsDeleteContentStatus' => [
            'application/json',
        ],
        'contentsDeleteVersion' => [
            'application/json',
        ],
        'contentsGetContent' => [
            'application/json',
        ],
        'contentsGetContentValidity' => [
            'application/json',
        ],
        'contentsGetContentVersion' => [
            'application/json',
        ],
        'contentsGetContents' => [
            'application/json',
        ],
        'contentsGetContentsPost' => [
            'application/json',
        ],
        'contentsGetReferences' => [
            'application/json',
        ],
        'contentsGetReferencing' => [
            'application/json',
        ],
        'contentsPatchContent' => [
            'application/json',
        ],
        'contentsPostContent' => [
            'application/json',
        ],
        'contentsPostContents' => [
            'application/json',
        ],
        'contentsPostUpsertContent' => [
            'application/json',
        ],
        'contentsPutContent' => [
            'application/json',
        ],
        'contentsPutContentStatus' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation contentsBulkUpdateContents
     *
     * Bulk update content items.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  \OpenAPI\Client\Model\BulkUpdateContentsDto $bulk_update_contents_dto The bulk update request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsBulkUpdateContents'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BulkResultDto[]|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto
     */
    public function contentsBulkUpdateContents($app, $schema, $bulk_update_contents_dto, string $contentType = self::contentTypes['contentsBulkUpdateContents'][0])
    {
        list($response) = $this->contentsBulkUpdateContentsWithHttpInfo($app, $schema, $bulk_update_contents_dto, $contentType);
        return $response;
    }

    /**
     * Operation contentsBulkUpdateContentsWithHttpInfo
     *
     * Bulk update content items.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  \OpenAPI\Client\Model\BulkUpdateContentsDto $bulk_update_contents_dto The bulk update request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsBulkUpdateContents'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BulkResultDto[]|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function contentsBulkUpdateContentsWithHttpInfo($app, $schema, $bulk_update_contents_dto, string $contentType = self::contentTypes['contentsBulkUpdateContents'][0])
    {
        $request = $this->contentsBulkUpdateContentsRequest($app, $schema, $bulk_update_contents_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BulkResultDto[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\BulkResultDto[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BulkResultDto[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BulkResultDto[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BulkResultDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation contentsBulkUpdateContentsAsync
     *
     * Bulk update content items.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  \OpenAPI\Client\Model\BulkUpdateContentsDto $bulk_update_contents_dto The bulk update request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsBulkUpdateContents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contentsBulkUpdateContentsAsync($app, $schema, $bulk_update_contents_dto, string $contentType = self::contentTypes['contentsBulkUpdateContents'][0])
    {
        return $this->contentsBulkUpdateContentsAsyncWithHttpInfo($app, $schema, $bulk_update_contents_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation contentsBulkUpdateContentsAsyncWithHttpInfo
     *
     * Bulk update content items.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  \OpenAPI\Client\Model\BulkUpdateContentsDto $bulk_update_contents_dto The bulk update request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsBulkUpdateContents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contentsBulkUpdateContentsAsyncWithHttpInfo($app, $schema, $bulk_update_contents_dto, string $contentType = self::contentTypes['contentsBulkUpdateContents'][0])
    {
        $returnType = '\OpenAPI\Client\Model\BulkResultDto[]';
        $request = $this->contentsBulkUpdateContentsRequest($app, $schema, $bulk_update_contents_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'contentsBulkUpdateContents'
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  \OpenAPI\Client\Model\BulkUpdateContentsDto $bulk_update_contents_dto The bulk update request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsBulkUpdateContents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function contentsBulkUpdateContentsRequest($app, $schema, $bulk_update_contents_dto, string $contentType = self::contentTypes['contentsBulkUpdateContents'][0])
    {

        // verify the required parameter 'app' is set
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling contentsBulkUpdateContents'
            );
        }

        // verify the required parameter 'schema' is set
        if ($schema === null || (is_array($schema) && count($schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $schema when calling contentsBulkUpdateContents'
            );
        }

        // verify the required parameter 'bulk_update_contents_dto' is set
        if ($bulk_update_contents_dto === null || (is_array($bulk_update_contents_dto) && count($bulk_update_contents_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bulk_update_contents_dto when calling contentsBulkUpdateContents'
            );
        }


        $resourcePath = '/api/content/{app}/{schema}/bulk';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app !== null) {
            $resourcePath = str_replace(
                '{' . 'app' . '}',
                ObjectSerializer::toPathValue($app),
                $resourcePath
            );
        }
        // path params
        if ($schema !== null) {
            $resourcePath = str_replace(
                '{' . 'schema' . '}',
                ObjectSerializer::toPathValue($schema),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($bulk_update_contents_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($bulk_update_contents_dto));
            } else {
                $httpBody = $bulk_update_contents_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation contentsCreateDraft
     *
     * Create a new draft version.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to create the draft for. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsCreateDraft'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ContentDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto
     */
    public function contentsCreateDraft($app, $schema, $id, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['contentsCreateDraft'][0])
    {
        list($response) = $this->contentsCreateDraftWithHttpInfo($app, $schema, $id, $x_unpublished, $x_languages, $contentType);
        return $response;
    }

    /**
     * Operation contentsCreateDraftWithHttpInfo
     *
     * Create a new draft version.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to create the draft for. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsCreateDraft'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ContentDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function contentsCreateDraftWithHttpInfo($app, $schema, $id, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['contentsCreateDraft'][0])
    {
        $request = $this->contentsCreateDraftRequest($app, $schema, $id, $x_unpublished, $x_languages, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ContentDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ContentDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ContentDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ContentDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ContentDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation contentsCreateDraftAsync
     *
     * Create a new draft version.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to create the draft for. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsCreateDraft'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contentsCreateDraftAsync($app, $schema, $id, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['contentsCreateDraft'][0])
    {
        return $this->contentsCreateDraftAsyncWithHttpInfo($app, $schema, $id, $x_unpublished, $x_languages, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation contentsCreateDraftAsyncWithHttpInfo
     *
     * Create a new draft version.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to create the draft for. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsCreateDraft'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contentsCreateDraftAsyncWithHttpInfo($app, $schema, $id, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['contentsCreateDraft'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ContentDto';
        $request = $this->contentsCreateDraftRequest($app, $schema, $id, $x_unpublished, $x_languages, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'contentsCreateDraft'
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to create the draft for. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsCreateDraft'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function contentsCreateDraftRequest($app, $schema, $id, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['contentsCreateDraft'][0])
    {

        // verify the required parameter 'app' is set
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling contentsCreateDraft'
            );
        }

        // verify the required parameter 'schema' is set
        if ($schema === null || (is_array($schema) && count($schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $schema when calling contentsCreateDraft'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling contentsCreateDraft'
            );
        }




        $resourcePath = '/api/content/{app}/{schema}/{id}/draft';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_unpublished !== null) {
            $headerParams['X-Unpublished'] = ObjectSerializer::toHeaderValue($x_unpublished);
        }
        // header params
        if ($x_languages !== null) {
            $headerParams['X-Languages'] = ObjectSerializer::toHeaderValue($x_languages);
        }

        // path params
        if ($app !== null) {
            $resourcePath = str_replace(
                '{' . 'app' . '}',
                ObjectSerializer::toPathValue($app),
                $resourcePath
            );
        }
        // path params
        if ($schema !== null) {
            $resourcePath = str_replace(
                '{' . 'schema' . '}',
                ObjectSerializer::toPathValue($schema),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation contentsDeleteContent
     *
     * Delete a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to delete. (required)
     * @param  bool $check_referrers True to check referrers of this content. (optional)
     * @param  bool $permanent True to delete the content permanently. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsDeleteContent'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function contentsDeleteContent($app, $schema, $id, $check_referrers = null, $permanent = null, string $contentType = self::contentTypes['contentsDeleteContent'][0])
    {
        $this->contentsDeleteContentWithHttpInfo($app, $schema, $id, $check_referrers, $permanent, $contentType);
    }

    /**
     * Operation contentsDeleteContentWithHttpInfo
     *
     * Delete a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to delete. (required)
     * @param  bool $check_referrers True to check referrers of this content. (optional)
     * @param  bool $permanent True to delete the content permanently. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsDeleteContent'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function contentsDeleteContentWithHttpInfo($app, $schema, $id, $check_referrers = null, $permanent = null, string $contentType = self::contentTypes['contentsDeleteContent'][0])
    {
        $request = $this->contentsDeleteContentRequest($app, $schema, $id, $check_referrers, $permanent, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation contentsDeleteContentAsync
     *
     * Delete a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to delete. (required)
     * @param  bool $check_referrers True to check referrers of this content. (optional)
     * @param  bool $permanent True to delete the content permanently. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsDeleteContent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contentsDeleteContentAsync($app, $schema, $id, $check_referrers = null, $permanent = null, string $contentType = self::contentTypes['contentsDeleteContent'][0])
    {
        return $this->contentsDeleteContentAsyncWithHttpInfo($app, $schema, $id, $check_referrers, $permanent, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation contentsDeleteContentAsyncWithHttpInfo
     *
     * Delete a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to delete. (required)
     * @param  bool $check_referrers True to check referrers of this content. (optional)
     * @param  bool $permanent True to delete the content permanently. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsDeleteContent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contentsDeleteContentAsyncWithHttpInfo($app, $schema, $id, $check_referrers = null, $permanent = null, string $contentType = self::contentTypes['contentsDeleteContent'][0])
    {
        $returnType = '';
        $request = $this->contentsDeleteContentRequest($app, $schema, $id, $check_referrers, $permanent, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'contentsDeleteContent'
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to delete. (required)
     * @param  bool $check_referrers True to check referrers of this content. (optional)
     * @param  bool $permanent True to delete the content permanently. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsDeleteContent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function contentsDeleteContentRequest($app, $schema, $id, $check_referrers = null, $permanent = null, string $contentType = self::contentTypes['contentsDeleteContent'][0])
    {

        // verify the required parameter 'app' is set
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling contentsDeleteContent'
            );
        }

        // verify the required parameter 'schema' is set
        if ($schema === null || (is_array($schema) && count($schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $schema when calling contentsDeleteContent'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling contentsDeleteContent'
            );
        }




        $resourcePath = '/api/content/{app}/{schema}/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $check_referrers,
            'checkReferrers', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $permanent,
            'permanent', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($app !== null) {
            $resourcePath = str_replace(
                '{' . 'app' . '}',
                ObjectSerializer::toPathValue($app),
                $resourcePath
            );
        }
        // path params
        if ($schema !== null) {
            $resourcePath = str_replace(
                '{' . 'schema' . '}',
                ObjectSerializer::toPathValue($schema),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation contentsDeleteContentStatus
     *
     * Cancel status change of a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to cancel. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsDeleteContentStatus'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ContentDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto
     */
    public function contentsDeleteContentStatus($app, $schema, $id, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['contentsDeleteContentStatus'][0])
    {
        list($response) = $this->contentsDeleteContentStatusWithHttpInfo($app, $schema, $id, $x_unpublished, $x_languages, $contentType);
        return $response;
    }

    /**
     * Operation contentsDeleteContentStatusWithHttpInfo
     *
     * Cancel status change of a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to cancel. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsDeleteContentStatus'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ContentDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function contentsDeleteContentStatusWithHttpInfo($app, $schema, $id, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['contentsDeleteContentStatus'][0])
    {
        $request = $this->contentsDeleteContentStatusRequest($app, $schema, $id, $x_unpublished, $x_languages, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ContentDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ContentDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ContentDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ContentDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ContentDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation contentsDeleteContentStatusAsync
     *
     * Cancel status change of a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to cancel. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsDeleteContentStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contentsDeleteContentStatusAsync($app, $schema, $id, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['contentsDeleteContentStatus'][0])
    {
        return $this->contentsDeleteContentStatusAsyncWithHttpInfo($app, $schema, $id, $x_unpublished, $x_languages, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation contentsDeleteContentStatusAsyncWithHttpInfo
     *
     * Cancel status change of a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to cancel. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsDeleteContentStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contentsDeleteContentStatusAsyncWithHttpInfo($app, $schema, $id, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['contentsDeleteContentStatus'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ContentDto';
        $request = $this->contentsDeleteContentStatusRequest($app, $schema, $id, $x_unpublished, $x_languages, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'contentsDeleteContentStatus'
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to cancel. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsDeleteContentStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function contentsDeleteContentStatusRequest($app, $schema, $id, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['contentsDeleteContentStatus'][0])
    {

        // verify the required parameter 'app' is set
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling contentsDeleteContentStatus'
            );
        }

        // verify the required parameter 'schema' is set
        if ($schema === null || (is_array($schema) && count($schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $schema when calling contentsDeleteContentStatus'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling contentsDeleteContentStatus'
            );
        }




        $resourcePath = '/api/content/{app}/{schema}/{id}/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_unpublished !== null) {
            $headerParams['X-Unpublished'] = ObjectSerializer::toHeaderValue($x_unpublished);
        }
        // header params
        if ($x_languages !== null) {
            $headerParams['X-Languages'] = ObjectSerializer::toHeaderValue($x_languages);
        }

        // path params
        if ($app !== null) {
            $resourcePath = str_replace(
                '{' . 'app' . '}',
                ObjectSerializer::toPathValue($app),
                $resourcePath
            );
        }
        // path params
        if ($schema !== null) {
            $resourcePath = str_replace(
                '{' . 'schema' . '}',
                ObjectSerializer::toPathValue($schema),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation contentsDeleteVersion
     *
     * Delete the draft version.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to delete the draft from. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsDeleteVersion'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ContentDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto
     */
    public function contentsDeleteVersion($app, $schema, $id, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['contentsDeleteVersion'][0])
    {
        list($response) = $this->contentsDeleteVersionWithHttpInfo($app, $schema, $id, $x_unpublished, $x_languages, $contentType);
        return $response;
    }

    /**
     * Operation contentsDeleteVersionWithHttpInfo
     *
     * Delete the draft version.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to delete the draft from. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsDeleteVersion'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ContentDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function contentsDeleteVersionWithHttpInfo($app, $schema, $id, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['contentsDeleteVersion'][0])
    {
        $request = $this->contentsDeleteVersionRequest($app, $schema, $id, $x_unpublished, $x_languages, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ContentDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ContentDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ContentDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ContentDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ContentDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation contentsDeleteVersionAsync
     *
     * Delete the draft version.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to delete the draft from. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsDeleteVersion'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contentsDeleteVersionAsync($app, $schema, $id, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['contentsDeleteVersion'][0])
    {
        return $this->contentsDeleteVersionAsyncWithHttpInfo($app, $schema, $id, $x_unpublished, $x_languages, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation contentsDeleteVersionAsyncWithHttpInfo
     *
     * Delete the draft version.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to delete the draft from. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsDeleteVersion'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contentsDeleteVersionAsyncWithHttpInfo($app, $schema, $id, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['contentsDeleteVersion'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ContentDto';
        $request = $this->contentsDeleteVersionRequest($app, $schema, $id, $x_unpublished, $x_languages, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'contentsDeleteVersion'
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to delete the draft from. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsDeleteVersion'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function contentsDeleteVersionRequest($app, $schema, $id, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['contentsDeleteVersion'][0])
    {

        // verify the required parameter 'app' is set
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling contentsDeleteVersion'
            );
        }

        // verify the required parameter 'schema' is set
        if ($schema === null || (is_array($schema) && count($schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $schema when calling contentsDeleteVersion'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling contentsDeleteVersion'
            );
        }




        $resourcePath = '/api/content/{app}/{schema}/{id}/draft';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_unpublished !== null) {
            $headerParams['X-Unpublished'] = ObjectSerializer::toHeaderValue($x_unpublished);
        }
        // header params
        if ($x_languages !== null) {
            $headerParams['X-Languages'] = ObjectSerializer::toHeaderValue($x_languages);
        }

        // path params
        if ($app !== null) {
            $resourcePath = str_replace(
                '{' . 'app' . '}',
                ObjectSerializer::toPathValue($app),
                $resourcePath
            );
        }
        // path params
        if ($schema !== null) {
            $resourcePath = str_replace(
                '{' . 'schema' . '}',
                ObjectSerializer::toPathValue($schema),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation contentsGetContent
     *
     * Get a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content to fetch. (required)
     * @param  int $version The optional version. (optional, default to -2)
     * @param  bool $x_flatten Provide the data as flat object. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsGetContent'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ContentDto|\OpenAPI\Client\Model\ErrorDto
     */
    public function contentsGetContent($app, $schema, $id, $version = -2, $x_flatten = null, $x_languages = null, $x_unpublished = null, string $contentType = self::contentTypes['contentsGetContent'][0])
    {
        list($response) = $this->contentsGetContentWithHttpInfo($app, $schema, $id, $version, $x_flatten, $x_languages, $x_unpublished, $contentType);
        return $response;
    }

    /**
     * Operation contentsGetContentWithHttpInfo
     *
     * Get a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content to fetch. (required)
     * @param  int $version The optional version. (optional, default to -2)
     * @param  bool $x_flatten Provide the data as flat object. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsGetContent'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ContentDto|\OpenAPI\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function contentsGetContentWithHttpInfo($app, $schema, $id, $version = -2, $x_flatten = null, $x_languages = null, $x_unpublished = null, string $contentType = self::contentTypes['contentsGetContent'][0])
    {
        $request = $this->contentsGetContentRequest($app, $schema, $id, $version, $x_flatten, $x_languages, $x_unpublished, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ContentDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ContentDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ContentDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ContentDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ContentDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation contentsGetContentAsync
     *
     * Get a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content to fetch. (required)
     * @param  int $version The optional version. (optional, default to -2)
     * @param  bool $x_flatten Provide the data as flat object. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsGetContent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contentsGetContentAsync($app, $schema, $id, $version = -2, $x_flatten = null, $x_languages = null, $x_unpublished = null, string $contentType = self::contentTypes['contentsGetContent'][0])
    {
        return $this->contentsGetContentAsyncWithHttpInfo($app, $schema, $id, $version, $x_flatten, $x_languages, $x_unpublished, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation contentsGetContentAsyncWithHttpInfo
     *
     * Get a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content to fetch. (required)
     * @param  int $version The optional version. (optional, default to -2)
     * @param  bool $x_flatten Provide the data as flat object. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsGetContent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contentsGetContentAsyncWithHttpInfo($app, $schema, $id, $version = -2, $x_flatten = null, $x_languages = null, $x_unpublished = null, string $contentType = self::contentTypes['contentsGetContent'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ContentDto';
        $request = $this->contentsGetContentRequest($app, $schema, $id, $version, $x_flatten, $x_languages, $x_unpublished, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'contentsGetContent'
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content to fetch. (required)
     * @param  int $version The optional version. (optional, default to -2)
     * @param  bool $x_flatten Provide the data as flat object. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsGetContent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function contentsGetContentRequest($app, $schema, $id, $version = -2, $x_flatten = null, $x_languages = null, $x_unpublished = null, string $contentType = self::contentTypes['contentsGetContent'][0])
    {

        // verify the required parameter 'app' is set
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling contentsGetContent'
            );
        }

        // verify the required parameter 'schema' is set
        if ($schema === null || (is_array($schema) && count($schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $schema when calling contentsGetContent'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling contentsGetContent'
            );
        }






        $resourcePath = '/api/content/{app}/{schema}/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $version,
            'version', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_flatten !== null) {
            $headerParams['X-Flatten'] = ObjectSerializer::toHeaderValue($x_flatten);
        }
        // header params
        if ($x_languages !== null) {
            $headerParams['X-Languages'] = ObjectSerializer::toHeaderValue($x_languages);
        }
        // header params
        if ($x_unpublished !== null) {
            $headerParams['X-Unpublished'] = ObjectSerializer::toHeaderValue($x_unpublished);
        }

        // path params
        if ($app !== null) {
            $resourcePath = str_replace(
                '{' . 'app' . '}',
                ObjectSerializer::toPathValue($app),
                $resourcePath
            );
        }
        // path params
        if ($schema !== null) {
            $resourcePath = str_replace(
                '{' . 'schema' . '}',
                ObjectSerializer::toPathValue($schema),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation contentsGetContentValidity
     *
     * Get a content item validity.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content to fetch. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsGetContentValidity'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function contentsGetContentValidity($app, $schema, $id, string $contentType = self::contentTypes['contentsGetContentValidity'][0])
    {
        $this->contentsGetContentValidityWithHttpInfo($app, $schema, $id, $contentType);
    }

    /**
     * Operation contentsGetContentValidityWithHttpInfo
     *
     * Get a content item validity.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content to fetch. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsGetContentValidity'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function contentsGetContentValidityWithHttpInfo($app, $schema, $id, string $contentType = self::contentTypes['contentsGetContentValidity'][0])
    {
        $request = $this->contentsGetContentValidityRequest($app, $schema, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation contentsGetContentValidityAsync
     *
     * Get a content item validity.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content to fetch. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsGetContentValidity'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contentsGetContentValidityAsync($app, $schema, $id, string $contentType = self::contentTypes['contentsGetContentValidity'][0])
    {
        return $this->contentsGetContentValidityAsyncWithHttpInfo($app, $schema, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation contentsGetContentValidityAsyncWithHttpInfo
     *
     * Get a content item validity.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content to fetch. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsGetContentValidity'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contentsGetContentValidityAsyncWithHttpInfo($app, $schema, $id, string $contentType = self::contentTypes['contentsGetContentValidity'][0])
    {
        $returnType = '';
        $request = $this->contentsGetContentValidityRequest($app, $schema, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'contentsGetContentValidity'
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content to fetch. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsGetContentValidity'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function contentsGetContentValidityRequest($app, $schema, $id, string $contentType = self::contentTypes['contentsGetContentValidity'][0])
    {

        // verify the required parameter 'app' is set
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling contentsGetContentValidity'
            );
        }

        // verify the required parameter 'schema' is set
        if ($schema === null || (is_array($schema) && count($schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $schema when calling contentsGetContentValidity'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling contentsGetContentValidity'
            );
        }


        $resourcePath = '/api/content/{app}/{schema}/{id}/validity';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app !== null) {
            $resourcePath = str_replace(
                '{' . 'app' . '}',
                ObjectSerializer::toPathValue($app),
                $resourcePath
            );
        }
        // path params
        if ($schema !== null) {
            $resourcePath = str_replace(
                '{' . 'schema' . '}',
                ObjectSerializer::toPathValue($schema),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation contentsGetContentVersion
     *
     * Get a content by version.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content to fetch. (required)
     * @param  int $version The version fo the content to fetch. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsGetContentVersion'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject|\OpenAPI\Client\Model\ErrorDto
     * @deprecated
     */
    public function contentsGetContentVersion($app, $schema, $id, $version, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['contentsGetContentVersion'][0])
    {
        list($response) = $this->contentsGetContentVersionWithHttpInfo($app, $schema, $id, $version, $x_unpublished, $x_languages, $contentType);
        return $response;
    }

    /**
     * Operation contentsGetContentVersionWithHttpInfo
     *
     * Get a content by version.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content to fetch. (required)
     * @param  int $version The version fo the content to fetch. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsGetContentVersion'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject|\OpenAPI\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function contentsGetContentVersionWithHttpInfo($app, $schema, $id, $version, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['contentsGetContentVersion'][0])
    {
        $request = $this->contentsGetContentVersionRequest($app, $schema, $id, $version, $x_unpublished, $x_languages, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation contentsGetContentVersionAsync
     *
     * Get a content by version.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content to fetch. (required)
     * @param  int $version The version fo the content to fetch. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsGetContentVersion'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function contentsGetContentVersionAsync($app, $schema, $id, $version, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['contentsGetContentVersion'][0])
    {
        return $this->contentsGetContentVersionAsyncWithHttpInfo($app, $schema, $id, $version, $x_unpublished, $x_languages, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation contentsGetContentVersionAsyncWithHttpInfo
     *
     * Get a content by version.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content to fetch. (required)
     * @param  int $version The version fo the content to fetch. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsGetContentVersion'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function contentsGetContentVersionAsyncWithHttpInfo($app, $schema, $id, $version, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['contentsGetContentVersion'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->contentsGetContentVersionRequest($app, $schema, $id, $version, $x_unpublished, $x_languages, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'contentsGetContentVersion'
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content to fetch. (required)
     * @param  int $version The version fo the content to fetch. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsGetContentVersion'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function contentsGetContentVersionRequest($app, $schema, $id, $version, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['contentsGetContentVersion'][0])
    {

        // verify the required parameter 'app' is set
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling contentsGetContentVersion'
            );
        }

        // verify the required parameter 'schema' is set
        if ($schema === null || (is_array($schema) && count($schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $schema when calling contentsGetContentVersion'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling contentsGetContentVersion'
            );
        }

        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling contentsGetContentVersion'
            );
        }




        $resourcePath = '/api/content/{app}/{schema}/{id}/{version}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_unpublished !== null) {
            $headerParams['X-Unpublished'] = ObjectSerializer::toHeaderValue($x_unpublished);
        }
        // header params
        if ($x_languages !== null) {
            $headerParams['X-Languages'] = ObjectSerializer::toHeaderValue($x_languages);
        }

        // path params
        if ($app !== null) {
            $resourcePath = str_replace(
                '{' . 'app' . '}',
                ObjectSerializer::toPathValue($app),
                $resourcePath
            );
        }
        // path params
        if ($schema !== null) {
            $resourcePath = str_replace(
                '{' . 'schema' . '}',
                ObjectSerializer::toPathValue($schema),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/octet-stream', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation contentsGetContents
     *
     * Queries contents.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $ids The optional ids of the content to fetch. (optional)
     * @param  string $q The optional json query. (optional)
     * @param  string $search Optional number of items to skip. (optional)
     * @param  float $top Optional number of items to take. (optional)
     * @param  float $skip Optional number of items to skip. (optional)
     * @param  string $orderby Optional OData order definition. (optional)
     * @param  string $filter Optional OData filter. (optional)
     * @param  bool $x_flatten Provide the data as flat object. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsGetContents'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ContentsDto|\OpenAPI\Client\Model\ErrorDto
     */
    public function contentsGetContents($app, $schema, $ids = null, $q = null, $search = null, $top = null, $skip = null, $orderby = null, $filter = null, $x_flatten = null, $x_languages = null, $x_no_slow_total = null, $x_no_total = null, $x_unpublished = null, string $contentType = self::contentTypes['contentsGetContents'][0])
    {
        list($response) = $this->contentsGetContentsWithHttpInfo($app, $schema, $ids, $q, $search, $top, $skip, $orderby, $filter, $x_flatten, $x_languages, $x_no_slow_total, $x_no_total, $x_unpublished, $contentType);
        return $response;
    }

    /**
     * Operation contentsGetContentsWithHttpInfo
     *
     * Queries contents.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $ids The optional ids of the content to fetch. (optional)
     * @param  string $q The optional json query. (optional)
     * @param  string $search Optional number of items to skip. (optional)
     * @param  float $top Optional number of items to take. (optional)
     * @param  float $skip Optional number of items to skip. (optional)
     * @param  string $orderby Optional OData order definition. (optional)
     * @param  string $filter Optional OData filter. (optional)
     * @param  bool $x_flatten Provide the data as flat object. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsGetContents'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ContentsDto|\OpenAPI\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function contentsGetContentsWithHttpInfo($app, $schema, $ids = null, $q = null, $search = null, $top = null, $skip = null, $orderby = null, $filter = null, $x_flatten = null, $x_languages = null, $x_no_slow_total = null, $x_no_total = null, $x_unpublished = null, string $contentType = self::contentTypes['contentsGetContents'][0])
    {
        $request = $this->contentsGetContentsRequest($app, $schema, $ids, $q, $search, $top, $skip, $orderby, $filter, $x_flatten, $x_languages, $x_no_slow_total, $x_no_total, $x_unpublished, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ContentsDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ContentsDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ContentsDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ContentsDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ContentsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation contentsGetContentsAsync
     *
     * Queries contents.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $ids The optional ids of the content to fetch. (optional)
     * @param  string $q The optional json query. (optional)
     * @param  string $search Optional number of items to skip. (optional)
     * @param  float $top Optional number of items to take. (optional)
     * @param  float $skip Optional number of items to skip. (optional)
     * @param  string $orderby Optional OData order definition. (optional)
     * @param  string $filter Optional OData filter. (optional)
     * @param  bool $x_flatten Provide the data as flat object. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsGetContents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contentsGetContentsAsync($app, $schema, $ids = null, $q = null, $search = null, $top = null, $skip = null, $orderby = null, $filter = null, $x_flatten = null, $x_languages = null, $x_no_slow_total = null, $x_no_total = null, $x_unpublished = null, string $contentType = self::contentTypes['contentsGetContents'][0])
    {
        return $this->contentsGetContentsAsyncWithHttpInfo($app, $schema, $ids, $q, $search, $top, $skip, $orderby, $filter, $x_flatten, $x_languages, $x_no_slow_total, $x_no_total, $x_unpublished, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation contentsGetContentsAsyncWithHttpInfo
     *
     * Queries contents.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $ids The optional ids of the content to fetch. (optional)
     * @param  string $q The optional json query. (optional)
     * @param  string $search Optional number of items to skip. (optional)
     * @param  float $top Optional number of items to take. (optional)
     * @param  float $skip Optional number of items to skip. (optional)
     * @param  string $orderby Optional OData order definition. (optional)
     * @param  string $filter Optional OData filter. (optional)
     * @param  bool $x_flatten Provide the data as flat object. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsGetContents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contentsGetContentsAsyncWithHttpInfo($app, $schema, $ids = null, $q = null, $search = null, $top = null, $skip = null, $orderby = null, $filter = null, $x_flatten = null, $x_languages = null, $x_no_slow_total = null, $x_no_total = null, $x_unpublished = null, string $contentType = self::contentTypes['contentsGetContents'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ContentsDto';
        $request = $this->contentsGetContentsRequest($app, $schema, $ids, $q, $search, $top, $skip, $orderby, $filter, $x_flatten, $x_languages, $x_no_slow_total, $x_no_total, $x_unpublished, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'contentsGetContents'
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $ids The optional ids of the content to fetch. (optional)
     * @param  string $q The optional json query. (optional)
     * @param  string $search Optional number of items to skip. (optional)
     * @param  float $top Optional number of items to take. (optional)
     * @param  float $skip Optional number of items to skip. (optional)
     * @param  string $orderby Optional OData order definition. (optional)
     * @param  string $filter Optional OData filter. (optional)
     * @param  bool $x_flatten Provide the data as flat object. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsGetContents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function contentsGetContentsRequest($app, $schema, $ids = null, $q = null, $search = null, $top = null, $skip = null, $orderby = null, $filter = null, $x_flatten = null, $x_languages = null, $x_no_slow_total = null, $x_no_total = null, $x_unpublished = null, string $contentType = self::contentTypes['contentsGetContents'][0])
    {

        // verify the required parameter 'app' is set
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling contentsGetContents'
            );
        }

        // verify the required parameter 'schema' is set
        if ($schema === null || (is_array($schema) && count($schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $schema when calling contentsGetContents'
            );
        }














        $resourcePath = '/api/content/{app}/{schema}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ids,
            'ids', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $q,
            'q', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search,
            '$search', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_flatten !== null) {
            $headerParams['X-Flatten'] = ObjectSerializer::toHeaderValue($x_flatten);
        }
        // header params
        if ($x_languages !== null) {
            $headerParams['X-Languages'] = ObjectSerializer::toHeaderValue($x_languages);
        }
        // header params
        if ($x_no_slow_total !== null) {
            $headerParams['X-NoSlowTotal'] = ObjectSerializer::toHeaderValue($x_no_slow_total);
        }
        // header params
        if ($x_no_total !== null) {
            $headerParams['X-NoTotal'] = ObjectSerializer::toHeaderValue($x_no_total);
        }
        // header params
        if ($x_unpublished !== null) {
            $headerParams['X-Unpublished'] = ObjectSerializer::toHeaderValue($x_unpublished);
        }

        // path params
        if ($app !== null) {
            $resourcePath = str_replace(
                '{' . 'app' . '}',
                ObjectSerializer::toPathValue($app),
                $resourcePath
            );
        }
        // path params
        if ($schema !== null) {
            $resourcePath = str_replace(
                '{' . 'schema' . '}',
                ObjectSerializer::toPathValue($schema),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation contentsGetContentsPost
     *
     * Queries contents.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  \OpenAPI\Client\Model\QueryDto $query_dto The required query object. (required)
     * @param  bool $x_flatten Provide the data as flat object. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsGetContentsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ContentsDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto
     */
    public function contentsGetContentsPost($app, $schema, $query_dto, $x_flatten = null, $x_languages = null, $x_no_slow_total = null, $x_no_total = null, $x_unpublished = null, string $contentType = self::contentTypes['contentsGetContentsPost'][0])
    {
        list($response) = $this->contentsGetContentsPostWithHttpInfo($app, $schema, $query_dto, $x_flatten, $x_languages, $x_no_slow_total, $x_no_total, $x_unpublished, $contentType);
        return $response;
    }

    /**
     * Operation contentsGetContentsPostWithHttpInfo
     *
     * Queries contents.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  \OpenAPI\Client\Model\QueryDto $query_dto The required query object. (required)
     * @param  bool $x_flatten Provide the data as flat object. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsGetContentsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ContentsDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function contentsGetContentsPostWithHttpInfo($app, $schema, $query_dto, $x_flatten = null, $x_languages = null, $x_no_slow_total = null, $x_no_total = null, $x_unpublished = null, string $contentType = self::contentTypes['contentsGetContentsPost'][0])
    {
        $request = $this->contentsGetContentsPostRequest($app, $schema, $query_dto, $x_flatten, $x_languages, $x_no_slow_total, $x_no_total, $x_unpublished, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ContentsDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ContentsDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ContentsDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ContentsDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ContentsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation contentsGetContentsPostAsync
     *
     * Queries contents.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  \OpenAPI\Client\Model\QueryDto $query_dto The required query object. (required)
     * @param  bool $x_flatten Provide the data as flat object. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsGetContentsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contentsGetContentsPostAsync($app, $schema, $query_dto, $x_flatten = null, $x_languages = null, $x_no_slow_total = null, $x_no_total = null, $x_unpublished = null, string $contentType = self::contentTypes['contentsGetContentsPost'][0])
    {
        return $this->contentsGetContentsPostAsyncWithHttpInfo($app, $schema, $query_dto, $x_flatten, $x_languages, $x_no_slow_total, $x_no_total, $x_unpublished, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation contentsGetContentsPostAsyncWithHttpInfo
     *
     * Queries contents.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  \OpenAPI\Client\Model\QueryDto $query_dto The required query object. (required)
     * @param  bool $x_flatten Provide the data as flat object. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsGetContentsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contentsGetContentsPostAsyncWithHttpInfo($app, $schema, $query_dto, $x_flatten = null, $x_languages = null, $x_no_slow_total = null, $x_no_total = null, $x_unpublished = null, string $contentType = self::contentTypes['contentsGetContentsPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ContentsDto';
        $request = $this->contentsGetContentsPostRequest($app, $schema, $query_dto, $x_flatten, $x_languages, $x_no_slow_total, $x_no_total, $x_unpublished, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'contentsGetContentsPost'
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  \OpenAPI\Client\Model\QueryDto $query_dto The required query object. (required)
     * @param  bool $x_flatten Provide the data as flat object. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsGetContentsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function contentsGetContentsPostRequest($app, $schema, $query_dto, $x_flatten = null, $x_languages = null, $x_no_slow_total = null, $x_no_total = null, $x_unpublished = null, string $contentType = self::contentTypes['contentsGetContentsPost'][0])
    {

        // verify the required parameter 'app' is set
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling contentsGetContentsPost'
            );
        }

        // verify the required parameter 'schema' is set
        if ($schema === null || (is_array($schema) && count($schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $schema when calling contentsGetContentsPost'
            );
        }

        // verify the required parameter 'query_dto' is set
        if ($query_dto === null || (is_array($query_dto) && count($query_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $query_dto when calling contentsGetContentsPost'
            );
        }







        $resourcePath = '/api/content/{app}/{schema}/query';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_flatten !== null) {
            $headerParams['X-Flatten'] = ObjectSerializer::toHeaderValue($x_flatten);
        }
        // header params
        if ($x_languages !== null) {
            $headerParams['X-Languages'] = ObjectSerializer::toHeaderValue($x_languages);
        }
        // header params
        if ($x_no_slow_total !== null) {
            $headerParams['X-NoSlowTotal'] = ObjectSerializer::toHeaderValue($x_no_slow_total);
        }
        // header params
        if ($x_no_total !== null) {
            $headerParams['X-NoTotal'] = ObjectSerializer::toHeaderValue($x_no_total);
        }
        // header params
        if ($x_unpublished !== null) {
            $headerParams['X-Unpublished'] = ObjectSerializer::toHeaderValue($x_unpublished);
        }

        // path params
        if ($app !== null) {
            $resourcePath = str_replace(
                '{' . 'app' . '}',
                ObjectSerializer::toPathValue($app),
                $resourcePath
            );
        }
        // path params
        if ($schema !== null) {
            $resourcePath = str_replace(
                '{' . 'schema' . '}',
                ObjectSerializer::toPathValue($schema),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($query_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($query_dto));
            } else {
                $httpBody = $query_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation contentsGetReferences
     *
     * Get all references of a content.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content to fetch. (required)
     * @param  string $q The optional json query. (optional)
     * @param  bool $x_flatten Provide the data as flat object. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsGetReferences'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ContentsDto|\OpenAPI\Client\Model\ErrorDto
     */
    public function contentsGetReferences($app, $schema, $id, $q = null, $x_flatten = null, $x_languages = null, $x_unpublished = null, $x_no_slow_total = null, $x_no_total = null, string $contentType = self::contentTypes['contentsGetReferences'][0])
    {
        list($response) = $this->contentsGetReferencesWithHttpInfo($app, $schema, $id, $q, $x_flatten, $x_languages, $x_unpublished, $x_no_slow_total, $x_no_total, $contentType);
        return $response;
    }

    /**
     * Operation contentsGetReferencesWithHttpInfo
     *
     * Get all references of a content.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content to fetch. (required)
     * @param  string $q The optional json query. (optional)
     * @param  bool $x_flatten Provide the data as flat object. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsGetReferences'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ContentsDto|\OpenAPI\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function contentsGetReferencesWithHttpInfo($app, $schema, $id, $q = null, $x_flatten = null, $x_languages = null, $x_unpublished = null, $x_no_slow_total = null, $x_no_total = null, string $contentType = self::contentTypes['contentsGetReferences'][0])
    {
        $request = $this->contentsGetReferencesRequest($app, $schema, $id, $q, $x_flatten, $x_languages, $x_unpublished, $x_no_slow_total, $x_no_total, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ContentsDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ContentsDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ContentsDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ContentsDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ContentsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation contentsGetReferencesAsync
     *
     * Get all references of a content.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content to fetch. (required)
     * @param  string $q The optional json query. (optional)
     * @param  bool $x_flatten Provide the data as flat object. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsGetReferences'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contentsGetReferencesAsync($app, $schema, $id, $q = null, $x_flatten = null, $x_languages = null, $x_unpublished = null, $x_no_slow_total = null, $x_no_total = null, string $contentType = self::contentTypes['contentsGetReferences'][0])
    {
        return $this->contentsGetReferencesAsyncWithHttpInfo($app, $schema, $id, $q, $x_flatten, $x_languages, $x_unpublished, $x_no_slow_total, $x_no_total, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation contentsGetReferencesAsyncWithHttpInfo
     *
     * Get all references of a content.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content to fetch. (required)
     * @param  string $q The optional json query. (optional)
     * @param  bool $x_flatten Provide the data as flat object. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsGetReferences'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contentsGetReferencesAsyncWithHttpInfo($app, $schema, $id, $q = null, $x_flatten = null, $x_languages = null, $x_unpublished = null, $x_no_slow_total = null, $x_no_total = null, string $contentType = self::contentTypes['contentsGetReferences'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ContentsDto';
        $request = $this->contentsGetReferencesRequest($app, $schema, $id, $q, $x_flatten, $x_languages, $x_unpublished, $x_no_slow_total, $x_no_total, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'contentsGetReferences'
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content to fetch. (required)
     * @param  string $q The optional json query. (optional)
     * @param  bool $x_flatten Provide the data as flat object. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsGetReferences'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function contentsGetReferencesRequest($app, $schema, $id, $q = null, $x_flatten = null, $x_languages = null, $x_unpublished = null, $x_no_slow_total = null, $x_no_total = null, string $contentType = self::contentTypes['contentsGetReferences'][0])
    {

        // verify the required parameter 'app' is set
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling contentsGetReferences'
            );
        }

        // verify the required parameter 'schema' is set
        if ($schema === null || (is_array($schema) && count($schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $schema when calling contentsGetReferences'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling contentsGetReferences'
            );
        }








        $resourcePath = '/api/content/{app}/{schema}/{id}/references';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $q,
            'q', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_flatten !== null) {
            $headerParams['X-Flatten'] = ObjectSerializer::toHeaderValue($x_flatten);
        }
        // header params
        if ($x_languages !== null) {
            $headerParams['X-Languages'] = ObjectSerializer::toHeaderValue($x_languages);
        }
        // header params
        if ($x_unpublished !== null) {
            $headerParams['X-Unpublished'] = ObjectSerializer::toHeaderValue($x_unpublished);
        }
        // header params
        if ($x_no_slow_total !== null) {
            $headerParams['X-NoSlowTotal'] = ObjectSerializer::toHeaderValue($x_no_slow_total);
        }
        // header params
        if ($x_no_total !== null) {
            $headerParams['X-NoTotal'] = ObjectSerializer::toHeaderValue($x_no_total);
        }

        // path params
        if ($app !== null) {
            $resourcePath = str_replace(
                '{' . 'app' . '}',
                ObjectSerializer::toPathValue($app),
                $resourcePath
            );
        }
        // path params
        if ($schema !== null) {
            $resourcePath = str_replace(
                '{' . 'schema' . '}',
                ObjectSerializer::toPathValue($schema),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation contentsGetReferencing
     *
     * Get a referencing contents of a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content to fetch. (required)
     * @param  string $q The optional json query. (optional)
     * @param  bool $x_flatten Provide the data as flat object. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsGetReferencing'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ContentsDto|\OpenAPI\Client\Model\ErrorDto
     */
    public function contentsGetReferencing($app, $schema, $id, $q = null, $x_flatten = null, $x_languages = null, $x_unpublished = null, $x_no_slow_total = null, $x_no_total = null, string $contentType = self::contentTypes['contentsGetReferencing'][0])
    {
        list($response) = $this->contentsGetReferencingWithHttpInfo($app, $schema, $id, $q, $x_flatten, $x_languages, $x_unpublished, $x_no_slow_total, $x_no_total, $contentType);
        return $response;
    }

    /**
     * Operation contentsGetReferencingWithHttpInfo
     *
     * Get a referencing contents of a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content to fetch. (required)
     * @param  string $q The optional json query. (optional)
     * @param  bool $x_flatten Provide the data as flat object. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsGetReferencing'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ContentsDto|\OpenAPI\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function contentsGetReferencingWithHttpInfo($app, $schema, $id, $q = null, $x_flatten = null, $x_languages = null, $x_unpublished = null, $x_no_slow_total = null, $x_no_total = null, string $contentType = self::contentTypes['contentsGetReferencing'][0])
    {
        $request = $this->contentsGetReferencingRequest($app, $schema, $id, $q, $x_flatten, $x_languages, $x_unpublished, $x_no_slow_total, $x_no_total, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ContentsDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ContentsDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ContentsDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ContentsDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ContentsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation contentsGetReferencingAsync
     *
     * Get a referencing contents of a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content to fetch. (required)
     * @param  string $q The optional json query. (optional)
     * @param  bool $x_flatten Provide the data as flat object. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsGetReferencing'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contentsGetReferencingAsync($app, $schema, $id, $q = null, $x_flatten = null, $x_languages = null, $x_unpublished = null, $x_no_slow_total = null, $x_no_total = null, string $contentType = self::contentTypes['contentsGetReferencing'][0])
    {
        return $this->contentsGetReferencingAsyncWithHttpInfo($app, $schema, $id, $q, $x_flatten, $x_languages, $x_unpublished, $x_no_slow_total, $x_no_total, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation contentsGetReferencingAsyncWithHttpInfo
     *
     * Get a referencing contents of a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content to fetch. (required)
     * @param  string $q The optional json query. (optional)
     * @param  bool $x_flatten Provide the data as flat object. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsGetReferencing'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contentsGetReferencingAsyncWithHttpInfo($app, $schema, $id, $q = null, $x_flatten = null, $x_languages = null, $x_unpublished = null, $x_no_slow_total = null, $x_no_total = null, string $contentType = self::contentTypes['contentsGetReferencing'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ContentsDto';
        $request = $this->contentsGetReferencingRequest($app, $schema, $id, $q, $x_flatten, $x_languages, $x_unpublished, $x_no_slow_total, $x_no_total, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'contentsGetReferencing'
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content to fetch. (required)
     * @param  string $q The optional json query. (optional)
     * @param  bool $x_flatten Provide the data as flat object. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsGetReferencing'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function contentsGetReferencingRequest($app, $schema, $id, $q = null, $x_flatten = null, $x_languages = null, $x_unpublished = null, $x_no_slow_total = null, $x_no_total = null, string $contentType = self::contentTypes['contentsGetReferencing'][0])
    {

        // verify the required parameter 'app' is set
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling contentsGetReferencing'
            );
        }

        // verify the required parameter 'schema' is set
        if ($schema === null || (is_array($schema) && count($schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $schema when calling contentsGetReferencing'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling contentsGetReferencing'
            );
        }








        $resourcePath = '/api/content/{app}/{schema}/{id}/referencing';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $q,
            'q', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_flatten !== null) {
            $headerParams['X-Flatten'] = ObjectSerializer::toHeaderValue($x_flatten);
        }
        // header params
        if ($x_languages !== null) {
            $headerParams['X-Languages'] = ObjectSerializer::toHeaderValue($x_languages);
        }
        // header params
        if ($x_unpublished !== null) {
            $headerParams['X-Unpublished'] = ObjectSerializer::toHeaderValue($x_unpublished);
        }
        // header params
        if ($x_no_slow_total !== null) {
            $headerParams['X-NoSlowTotal'] = ObjectSerializer::toHeaderValue($x_no_slow_total);
        }
        // header params
        if ($x_no_total !== null) {
            $headerParams['X-NoTotal'] = ObjectSerializer::toHeaderValue($x_no_total);
        }

        // path params
        if ($app !== null) {
            $resourcePath = str_replace(
                '{' . 'app' . '}',
                ObjectSerializer::toPathValue($app),
                $resourcePath
            );
        }
        // path params
        if ($schema !== null) {
            $resourcePath = str_replace(
                '{' . 'schema' . '}',
                ObjectSerializer::toPathValue($schema),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation contentsPatchContent
     *
     * Patchs a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to patch. (required)
     * @param  array<string,array> $request_body The patch for the content item. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsPatchContent'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ContentDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto
     */
    public function contentsPatchContent($app, $schema, $id, $request_body, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['contentsPatchContent'][0])
    {
        list($response) = $this->contentsPatchContentWithHttpInfo($app, $schema, $id, $request_body, $x_unpublished, $x_languages, $contentType);
        return $response;
    }

    /**
     * Operation contentsPatchContentWithHttpInfo
     *
     * Patchs a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to patch. (required)
     * @param  array<string,array> $request_body The patch for the content item. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsPatchContent'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ContentDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function contentsPatchContentWithHttpInfo($app, $schema, $id, $request_body, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['contentsPatchContent'][0])
    {
        $request = $this->contentsPatchContentRequest($app, $schema, $id, $request_body, $x_unpublished, $x_languages, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ContentDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ContentDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ContentDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ContentDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ContentDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation contentsPatchContentAsync
     *
     * Patchs a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to patch. (required)
     * @param  array<string,array> $request_body The patch for the content item. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsPatchContent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contentsPatchContentAsync($app, $schema, $id, $request_body, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['contentsPatchContent'][0])
    {
        return $this->contentsPatchContentAsyncWithHttpInfo($app, $schema, $id, $request_body, $x_unpublished, $x_languages, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation contentsPatchContentAsyncWithHttpInfo
     *
     * Patchs a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to patch. (required)
     * @param  array<string,array> $request_body The patch for the content item. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsPatchContent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contentsPatchContentAsyncWithHttpInfo($app, $schema, $id, $request_body, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['contentsPatchContent'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ContentDto';
        $request = $this->contentsPatchContentRequest($app, $schema, $id, $request_body, $x_unpublished, $x_languages, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'contentsPatchContent'
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to patch. (required)
     * @param  array<string,array> $request_body The patch for the content item. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsPatchContent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function contentsPatchContentRequest($app, $schema, $id, $request_body, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['contentsPatchContent'][0])
    {

        // verify the required parameter 'app' is set
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling contentsPatchContent'
            );
        }

        // verify the required parameter 'schema' is set
        if ($schema === null || (is_array($schema) && count($schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $schema when calling contentsPatchContent'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling contentsPatchContent'
            );
        }

        // verify the required parameter 'request_body' is set
        if ($request_body === null || (is_array($request_body) && count($request_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request_body when calling contentsPatchContent'
            );
        }




        $resourcePath = '/api/content/{app}/{schema}/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_unpublished !== null) {
            $headerParams['X-Unpublished'] = ObjectSerializer::toHeaderValue($x_unpublished);
        }
        // header params
        if ($x_languages !== null) {
            $headerParams['X-Languages'] = ObjectSerializer::toHeaderValue($x_languages);
        }

        // path params
        if ($app !== null) {
            $resourcePath = str_replace(
                '{' . 'app' . '}',
                ObjectSerializer::toPathValue($app),
                $resourcePath
            );
        }
        // path params
        if ($schema !== null) {
            $resourcePath = str_replace(
                '{' . 'schema' . '}',
                ObjectSerializer::toPathValue($schema),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request_body));
            } else {
                $httpBody = $request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation contentsPostContent
     *
     * Create a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  array<string,array> $request_body The full data for the content item. (required)
     * @param  string $status The initial status. (optional)
     * @param  string $id The optional custom content id. (optional)
     * @param  bool $publish True to automatically publish the content. (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsPostContent'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ContentDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto
     */
    public function contentsPostContent($app, $schema, $request_body, $status = null, $id = null, $publish = null, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['contentsPostContent'][0])
    {
        list($response) = $this->contentsPostContentWithHttpInfo($app, $schema, $request_body, $status, $id, $publish, $x_unpublished, $x_languages, $contentType);
        return $response;
    }

    /**
     * Operation contentsPostContentWithHttpInfo
     *
     * Create a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  array<string,array> $request_body The full data for the content item. (required)
     * @param  string $status The initial status. (optional)
     * @param  string $id The optional custom content id. (optional)
     * @param  bool $publish True to automatically publish the content. (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsPostContent'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ContentDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function contentsPostContentWithHttpInfo($app, $schema, $request_body, $status = null, $id = null, $publish = null, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['contentsPostContent'][0])
    {
        $request = $this->contentsPostContentRequest($app, $schema, $request_body, $status, $id, $publish, $x_unpublished, $x_languages, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\ContentDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ContentDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ContentDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ContentDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ContentDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation contentsPostContentAsync
     *
     * Create a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  array<string,array> $request_body The full data for the content item. (required)
     * @param  string $status The initial status. (optional)
     * @param  string $id The optional custom content id. (optional)
     * @param  bool $publish True to automatically publish the content. (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsPostContent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contentsPostContentAsync($app, $schema, $request_body, $status = null, $id = null, $publish = null, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['contentsPostContent'][0])
    {
        return $this->contentsPostContentAsyncWithHttpInfo($app, $schema, $request_body, $status, $id, $publish, $x_unpublished, $x_languages, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation contentsPostContentAsyncWithHttpInfo
     *
     * Create a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  array<string,array> $request_body The full data for the content item. (required)
     * @param  string $status The initial status. (optional)
     * @param  string $id The optional custom content id. (optional)
     * @param  bool $publish True to automatically publish the content. (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsPostContent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contentsPostContentAsyncWithHttpInfo($app, $schema, $request_body, $status = null, $id = null, $publish = null, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['contentsPostContent'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ContentDto';
        $request = $this->contentsPostContentRequest($app, $schema, $request_body, $status, $id, $publish, $x_unpublished, $x_languages, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'contentsPostContent'
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  array<string,array> $request_body The full data for the content item. (required)
     * @param  string $status The initial status. (optional)
     * @param  string $id The optional custom content id. (optional)
     * @param  bool $publish True to automatically publish the content. (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsPostContent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function contentsPostContentRequest($app, $schema, $request_body, $status = null, $id = null, $publish = null, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['contentsPostContent'][0])
    {

        // verify the required parameter 'app' is set
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling contentsPostContent'
            );
        }

        // verify the required parameter 'schema' is set
        if ($schema === null || (is_array($schema) && count($schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $schema when calling contentsPostContent'
            );
        }

        // verify the required parameter 'request_body' is set
        if ($request_body === null || (is_array($request_body) && count($request_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request_body when calling contentsPostContent'
            );
        }







        $resourcePath = '/api/content/{app}/{schema}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $publish,
            'publish', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_unpublished !== null) {
            $headerParams['X-Unpublished'] = ObjectSerializer::toHeaderValue($x_unpublished);
        }
        // header params
        if ($x_languages !== null) {
            $headerParams['X-Languages'] = ObjectSerializer::toHeaderValue($x_languages);
        }

        // path params
        if ($app !== null) {
            $resourcePath = str_replace(
                '{' . 'app' . '}',
                ObjectSerializer::toPathValue($app),
                $resourcePath
            );
        }
        // path params
        if ($schema !== null) {
            $resourcePath = str_replace(
                '{' . 'schema' . '}',
                ObjectSerializer::toPathValue($schema),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request_body));
            } else {
                $httpBody = $request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation contentsPostContents
     *
     * Import content items.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  \OpenAPI\Client\Model\ImportContentsDto $import_contents_dto The import request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsPostContents'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BulkResultDto[]|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto
     * @deprecated
     */
    public function contentsPostContents($app, $schema, $import_contents_dto, string $contentType = self::contentTypes['contentsPostContents'][0])
    {
        list($response) = $this->contentsPostContentsWithHttpInfo($app, $schema, $import_contents_dto, $contentType);
        return $response;
    }

    /**
     * Operation contentsPostContentsWithHttpInfo
     *
     * Import content items.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  \OpenAPI\Client\Model\ImportContentsDto $import_contents_dto The import request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsPostContents'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BulkResultDto[]|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function contentsPostContentsWithHttpInfo($app, $schema, $import_contents_dto, string $contentType = self::contentTypes['contentsPostContents'][0])
    {
        $request = $this->contentsPostContentsRequest($app, $schema, $import_contents_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BulkResultDto[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\BulkResultDto[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BulkResultDto[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BulkResultDto[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BulkResultDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation contentsPostContentsAsync
     *
     * Import content items.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  \OpenAPI\Client\Model\ImportContentsDto $import_contents_dto The import request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsPostContents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function contentsPostContentsAsync($app, $schema, $import_contents_dto, string $contentType = self::contentTypes['contentsPostContents'][0])
    {
        return $this->contentsPostContentsAsyncWithHttpInfo($app, $schema, $import_contents_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation contentsPostContentsAsyncWithHttpInfo
     *
     * Import content items.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  \OpenAPI\Client\Model\ImportContentsDto $import_contents_dto The import request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsPostContents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function contentsPostContentsAsyncWithHttpInfo($app, $schema, $import_contents_dto, string $contentType = self::contentTypes['contentsPostContents'][0])
    {
        $returnType = '\OpenAPI\Client\Model\BulkResultDto[]';
        $request = $this->contentsPostContentsRequest($app, $schema, $import_contents_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'contentsPostContents'
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  \OpenAPI\Client\Model\ImportContentsDto $import_contents_dto The import request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsPostContents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function contentsPostContentsRequest($app, $schema, $import_contents_dto, string $contentType = self::contentTypes['contentsPostContents'][0])
    {

        // verify the required parameter 'app' is set
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling contentsPostContents'
            );
        }

        // verify the required parameter 'schema' is set
        if ($schema === null || (is_array($schema) && count($schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $schema when calling contentsPostContents'
            );
        }

        // verify the required parameter 'import_contents_dto' is set
        if ($import_contents_dto === null || (is_array($import_contents_dto) && count($import_contents_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $import_contents_dto when calling contentsPostContents'
            );
        }


        $resourcePath = '/api/content/{app}/{schema}/import';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app !== null) {
            $resourcePath = str_replace(
                '{' . 'app' . '}',
                ObjectSerializer::toPathValue($app),
                $resourcePath
            );
        }
        // path params
        if ($schema !== null) {
            $resourcePath = str_replace(
                '{' . 'schema' . '}',
                ObjectSerializer::toPathValue($schema),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($import_contents_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($import_contents_dto));
            } else {
                $httpBody = $import_contents_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation contentsPostUpsertContent
     *
     * Upsert a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to update. (required)
     * @param  array<string,array> $request_body The full data for the content item. (required)
     * @param  string $status The initial status. (optional)
     * @param  bool $patch Makes the update as patch. (optional)
     * @param  bool $publish True to automatically publish the content. (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsPostUpsertContent'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ContentDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto
     */
    public function contentsPostUpsertContent($app, $schema, $id, $request_body, $status = null, $patch = null, $publish = null, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['contentsPostUpsertContent'][0])
    {
        list($response) = $this->contentsPostUpsertContentWithHttpInfo($app, $schema, $id, $request_body, $status, $patch, $publish, $x_unpublished, $x_languages, $contentType);
        return $response;
    }

    /**
     * Operation contentsPostUpsertContentWithHttpInfo
     *
     * Upsert a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to update. (required)
     * @param  array<string,array> $request_body The full data for the content item. (required)
     * @param  string $status The initial status. (optional)
     * @param  bool $patch Makes the update as patch. (optional)
     * @param  bool $publish True to automatically publish the content. (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsPostUpsertContent'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ContentDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function contentsPostUpsertContentWithHttpInfo($app, $schema, $id, $request_body, $status = null, $patch = null, $publish = null, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['contentsPostUpsertContent'][0])
    {
        $request = $this->contentsPostUpsertContentRequest($app, $schema, $id, $request_body, $status, $patch, $publish, $x_unpublished, $x_languages, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ContentDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ContentDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ContentDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ContentDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ContentDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation contentsPostUpsertContentAsync
     *
     * Upsert a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to update. (required)
     * @param  array<string,array> $request_body The full data for the content item. (required)
     * @param  string $status The initial status. (optional)
     * @param  bool $patch Makes the update as patch. (optional)
     * @param  bool $publish True to automatically publish the content. (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsPostUpsertContent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contentsPostUpsertContentAsync($app, $schema, $id, $request_body, $status = null, $patch = null, $publish = null, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['contentsPostUpsertContent'][0])
    {
        return $this->contentsPostUpsertContentAsyncWithHttpInfo($app, $schema, $id, $request_body, $status, $patch, $publish, $x_unpublished, $x_languages, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation contentsPostUpsertContentAsyncWithHttpInfo
     *
     * Upsert a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to update. (required)
     * @param  array<string,array> $request_body The full data for the content item. (required)
     * @param  string $status The initial status. (optional)
     * @param  bool $patch Makes the update as patch. (optional)
     * @param  bool $publish True to automatically publish the content. (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsPostUpsertContent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contentsPostUpsertContentAsyncWithHttpInfo($app, $schema, $id, $request_body, $status = null, $patch = null, $publish = null, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['contentsPostUpsertContent'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ContentDto';
        $request = $this->contentsPostUpsertContentRequest($app, $schema, $id, $request_body, $status, $patch, $publish, $x_unpublished, $x_languages, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'contentsPostUpsertContent'
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to update. (required)
     * @param  array<string,array> $request_body The full data for the content item. (required)
     * @param  string $status The initial status. (optional)
     * @param  bool $patch Makes the update as patch. (optional)
     * @param  bool $publish True to automatically publish the content. (optional)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsPostUpsertContent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function contentsPostUpsertContentRequest($app, $schema, $id, $request_body, $status = null, $patch = null, $publish = null, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['contentsPostUpsertContent'][0])
    {

        // verify the required parameter 'app' is set
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling contentsPostUpsertContent'
            );
        }

        // verify the required parameter 'schema' is set
        if ($schema === null || (is_array($schema) && count($schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $schema when calling contentsPostUpsertContent'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling contentsPostUpsertContent'
            );
        }

        // verify the required parameter 'request_body' is set
        if ($request_body === null || (is_array($request_body) && count($request_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request_body when calling contentsPostUpsertContent'
            );
        }







        $resourcePath = '/api/content/{app}/{schema}/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $patch,
            'patch', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $publish,
            'publish', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_unpublished !== null) {
            $headerParams['X-Unpublished'] = ObjectSerializer::toHeaderValue($x_unpublished);
        }
        // header params
        if ($x_languages !== null) {
            $headerParams['X-Languages'] = ObjectSerializer::toHeaderValue($x_languages);
        }

        // path params
        if ($app !== null) {
            $resourcePath = str_replace(
                '{' . 'app' . '}',
                ObjectSerializer::toPathValue($app),
                $resourcePath
            );
        }
        // path params
        if ($schema !== null) {
            $resourcePath = str_replace(
                '{' . 'schema' . '}',
                ObjectSerializer::toPathValue($schema),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request_body));
            } else {
                $httpBody = $request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation contentsPutContent
     *
     * Update a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to update. (required)
     * @param  array<string,array> $request_body The full data for the content item. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsPutContent'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ContentDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto
     */
    public function contentsPutContent($app, $schema, $id, $request_body, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['contentsPutContent'][0])
    {
        list($response) = $this->contentsPutContentWithHttpInfo($app, $schema, $id, $request_body, $x_unpublished, $x_languages, $contentType);
        return $response;
    }

    /**
     * Operation contentsPutContentWithHttpInfo
     *
     * Update a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to update. (required)
     * @param  array<string,array> $request_body The full data for the content item. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsPutContent'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ContentDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function contentsPutContentWithHttpInfo($app, $schema, $id, $request_body, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['contentsPutContent'][0])
    {
        $request = $this->contentsPutContentRequest($app, $schema, $id, $request_body, $x_unpublished, $x_languages, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ContentDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ContentDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ContentDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ContentDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ContentDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation contentsPutContentAsync
     *
     * Update a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to update. (required)
     * @param  array<string,array> $request_body The full data for the content item. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsPutContent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contentsPutContentAsync($app, $schema, $id, $request_body, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['contentsPutContent'][0])
    {
        return $this->contentsPutContentAsyncWithHttpInfo($app, $schema, $id, $request_body, $x_unpublished, $x_languages, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation contentsPutContentAsyncWithHttpInfo
     *
     * Update a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to update. (required)
     * @param  array<string,array> $request_body The full data for the content item. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsPutContent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contentsPutContentAsyncWithHttpInfo($app, $schema, $id, $request_body, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['contentsPutContent'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ContentDto';
        $request = $this->contentsPutContentRequest($app, $schema, $id, $request_body, $x_unpublished, $x_languages, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'contentsPutContent'
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to update. (required)
     * @param  array<string,array> $request_body The full data for the content item. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsPutContent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function contentsPutContentRequest($app, $schema, $id, $request_body, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['contentsPutContent'][0])
    {

        // verify the required parameter 'app' is set
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling contentsPutContent'
            );
        }

        // verify the required parameter 'schema' is set
        if ($schema === null || (is_array($schema) && count($schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $schema when calling contentsPutContent'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling contentsPutContent'
            );
        }

        // verify the required parameter 'request_body' is set
        if ($request_body === null || (is_array($request_body) && count($request_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request_body when calling contentsPutContent'
            );
        }




        $resourcePath = '/api/content/{app}/{schema}/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_unpublished !== null) {
            $headerParams['X-Unpublished'] = ObjectSerializer::toHeaderValue($x_unpublished);
        }
        // header params
        if ($x_languages !== null) {
            $headerParams['X-Languages'] = ObjectSerializer::toHeaderValue($x_languages);
        }

        // path params
        if ($app !== null) {
            $resourcePath = str_replace(
                '{' . 'app' . '}',
                ObjectSerializer::toPathValue($app),
                $resourcePath
            );
        }
        // path params
        if ($schema !== null) {
            $resourcePath = str_replace(
                '{' . 'schema' . '}',
                ObjectSerializer::toPathValue($schema),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request_body));
            } else {
                $httpBody = $request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation contentsPutContentStatus
     *
     * Change status of a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to change. (required)
     * @param  \OpenAPI\Client\Model\ChangeStatusDto $change_status_dto The status request. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsPutContentStatus'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ContentDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto
     */
    public function contentsPutContentStatus($app, $schema, $id, $change_status_dto, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['contentsPutContentStatus'][0])
    {
        list($response) = $this->contentsPutContentStatusWithHttpInfo($app, $schema, $id, $change_status_dto, $x_unpublished, $x_languages, $contentType);
        return $response;
    }

    /**
     * Operation contentsPutContentStatusWithHttpInfo
     *
     * Change status of a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to change. (required)
     * @param  \OpenAPI\Client\Model\ChangeStatusDto $change_status_dto The status request. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsPutContentStatus'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ContentDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function contentsPutContentStatusWithHttpInfo($app, $schema, $id, $change_status_dto, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['contentsPutContentStatus'][0])
    {
        $request = $this->contentsPutContentStatusRequest($app, $schema, $id, $change_status_dto, $x_unpublished, $x_languages, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ContentDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ContentDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ContentDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ContentDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ContentDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation contentsPutContentStatusAsync
     *
     * Change status of a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to change. (required)
     * @param  \OpenAPI\Client\Model\ChangeStatusDto $change_status_dto The status request. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsPutContentStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contentsPutContentStatusAsync($app, $schema, $id, $change_status_dto, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['contentsPutContentStatus'][0])
    {
        return $this->contentsPutContentStatusAsyncWithHttpInfo($app, $schema, $id, $change_status_dto, $x_unpublished, $x_languages, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation contentsPutContentStatusAsyncWithHttpInfo
     *
     * Change status of a content item.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to change. (required)
     * @param  \OpenAPI\Client\Model\ChangeStatusDto $change_status_dto The status request. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsPutContentStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contentsPutContentStatusAsyncWithHttpInfo($app, $schema, $id, $change_status_dto, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['contentsPutContentStatus'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ContentDto';
        $request = $this->contentsPutContentStatusRequest($app, $schema, $id, $change_status_dto, $x_unpublished, $x_languages, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'contentsPutContentStatus'
     *
     * @param  string $app The name of the app. (required)
     * @param  string $schema The name of the schema. (required)
     * @param  string $id The ID of the content item to change. (required)
     * @param  \OpenAPI\Client\Model\ChangeStatusDto $change_status_dto The status request. (required)
     * @param  bool $x_unpublished Return unpublished content items. (optional)
     * @param  string $x_languages Only resolve these languages (comma-separated). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contentsPutContentStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function contentsPutContentStatusRequest($app, $schema, $id, $change_status_dto, $x_unpublished = null, $x_languages = null, string $contentType = self::contentTypes['contentsPutContentStatus'][0])
    {

        // verify the required parameter 'app' is set
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling contentsPutContentStatus'
            );
        }

        // verify the required parameter 'schema' is set
        if ($schema === null || (is_array($schema) && count($schema) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $schema when calling contentsPutContentStatus'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling contentsPutContentStatus'
            );
        }

        // verify the required parameter 'change_status_dto' is set
        if ($change_status_dto === null || (is_array($change_status_dto) && count($change_status_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $change_status_dto when calling contentsPutContentStatus'
            );
        }




        $resourcePath = '/api/content/{app}/{schema}/{id}/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_unpublished !== null) {
            $headerParams['X-Unpublished'] = ObjectSerializer::toHeaderValue($x_unpublished);
        }
        // header params
        if ($x_languages !== null) {
            $headerParams['X-Languages'] = ObjectSerializer::toHeaderValue($x_languages);
        }

        // path params
        if ($app !== null) {
            $resourcePath = str_replace(
                '{' . 'app' . '}',
                ObjectSerializer::toPathValue($app),
                $resourcePath
            );
        }
        // path params
        if ($schema !== null) {
            $resourcePath = str_replace(
                '{' . 'schema' . '}',
                ObjectSerializer::toPathValue($schema),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($change_status_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($change_status_dto));
            } else {
                $httpBody = $change_status_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
