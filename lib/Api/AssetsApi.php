<?php
/**
 * AssetsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Squidex/Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Squidex API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Squidex/Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Squidex/Client\ApiException;
use Squidex/Client\Configuration;
use Squidex/Client\HeaderSelector;
use Squidex/Client\ObjectSerializer;

/**
 * AssetsApi Class Doc Comment
 *
 * @category Class
 * @package  Squidex/Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AssetsApi
{
    /**
     * @var
     */
    protected $options;
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getAssetContent' => [
            'application/json',
        ],
        'getAssetContentBySlug' => [
            'application/json',
        ],
        'deleteAssetFolder' => [
            'application/json',
        ],
        'getAssetFolders' => [
            'application/json',
        ],
        'postAssetFolder' => [
            'application/json',
        ],
        'putAssetFolder' => [
            'application/json',
        ],
        'putAssetFolderParent' => [
            'application/json',
        ],
        'bulkUpdateAssets' => [
            'application/json',
        ],
        'deleteAsset' => [
            'application/json',
        ],
        'getAsset' => [
            'application/json',
        ],
        'getAssets' => [
            'application/json',
        ],
        'getAssetsPost' => [
            'application/json',
        ],
        'getTags' => [
            'application/json',
        ],
        'postAsset' => [
            'multipart/form-data',
        ],
        'postUpsertAsset' => [
            'multipart/form-data',
        ],
        'putAsset' => [
            'application/json',
        ],
        'putAssetContent' => [
            'multipart/form-data',
        ],
        'putAssetParent' => [
            'application/json',
        ],
        'putTag' => [
            'application/json',
        ],
    ];

/**
     * @param $options
     */
    public function __construct($options) {
        $this->options = $options;
        $this->client =  new Client();
        $this->config =  new Configuration();
        $this->headerSelector = new HeaderSelector();
        $this->hostIndex = 0;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getAssetContent
     *
     * Get the asset content.
     *
     * @param  string $id The ID of the asset. (required)
     * @param  int $version The optional version of the asset. (optional)
     * @param  int $cache The cache duration in seconds. (optional)
     * @param  int $download Set it to 0 to prevent download. (optional)
     * @param  int $width The target width of the asset, if it is an image. (optional)
     * @param  int $height The target height of the asset, if it is an image. (optional)
     * @param  int $quality Optional image quality, it is is an jpeg image. (optional)
     * @param  ResizeMode $mode The resize mode when the width and height is defined. (optional)
     * @param  string $bg Optional background color. (optional)
     * @param  float $focus_x Override the y focus point. (optional)
     * @param  float $focus_y Override the x focus point. (optional)
     * @param  bool $nofocus True to ignore the asset focus point if any. (optional)
     * @param  bool $auto True to use auto format. (optional)
     * @param  bool $force True to force a new resize even if it already stored. (optional)
     * @param  ImageFormat $format True to force a new resize even if it already stored. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetContent'] to see the possible values for this operation
     *
     * @throws \Squidex/Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject|\Squidex/Client\Model\ErrorDto
     * @deprecated
     */
    public function getAssetContent($id, $version = null, $cache = null, $download = null, $width = null, $height = null, $quality = null, $mode = null, $bg = null, $focus_x = null, $focus_y = null, $nofocus = null, $auto = null, $force = null, $format = null, string $contentType = self::contentTypes['getAssetContent'][0])
    {
        list($response) = $this->getAssetContentWithHttpInfo($id, $version, $cache, $download, $width, $height, $quality, $mode, $bg, $focus_x, $focus_y, $nofocus, $auto, $force, $format, $contentType);
        return $response;
    }

    /**
     * Operation getAssetContentWithHttpInfo
     *
     * Get the asset content.
     *
     * @param  string $id The ID of the asset. (required)
     * @param  int $version The optional version of the asset. (optional)
     * @param  int $cache The cache duration in seconds. (optional)
     * @param  int $download Set it to 0 to prevent download. (optional)
     * @param  int $width The target width of the asset, if it is an image. (optional)
     * @param  int $height The target height of the asset, if it is an image. (optional)
     * @param  int $quality Optional image quality, it is is an jpeg image. (optional)
     * @param  ResizeMode $mode The resize mode when the width and height is defined. (optional)
     * @param  string $bg Optional background color. (optional)
     * @param  float $focus_x Override the y focus point. (optional)
     * @param  float $focus_y Override the x focus point. (optional)
     * @param  bool $nofocus True to ignore the asset focus point if any. (optional)
     * @param  bool $auto True to use auto format. (optional)
     * @param  bool $force True to force a new resize even if it already stored. (optional)
     * @param  ImageFormat $format True to force a new resize even if it already stored. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetContent'] to see the possible values for this operation
     *
     * @throws \Squidex/Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject|\Squidex/Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getAssetContentWithHttpInfo($id, $version = null, $cache = null, $download = null, $width = null, $height = null, $quality = null, $mode = null, $bg = null, $focus_x = null, $focus_y = null, $nofocus = null, $auto = null, $force = null, $format = null, string $contentType = self::contentTypes['getAssetContent'][0])
    {
        $request = $this->getAssetContentRequest($id, $version, $cache, $download, $width, $height, $quality, $mode, $bg, $focus_x, $focus_y, $nofocus, $auto, $force, $format, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Squidex/Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex/Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex/Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex/Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAssetContentAsync
     *
     * Get the asset content.
     *
     * @param  string $id The ID of the asset. (required)
     * @param  int $version The optional version of the asset. (optional)
     * @param  int $cache The cache duration in seconds. (optional)
     * @param  int $download Set it to 0 to prevent download. (optional)
     * @param  int $width The target width of the asset, if it is an image. (optional)
     * @param  int $height The target height of the asset, if it is an image. (optional)
     * @param  int $quality Optional image quality, it is is an jpeg image. (optional)
     * @param  ResizeMode $mode The resize mode when the width and height is defined. (optional)
     * @param  string $bg Optional background color. (optional)
     * @param  float $focus_x Override the y focus point. (optional)
     * @param  float $focus_y Override the x focus point. (optional)
     * @param  bool $nofocus True to ignore the asset focus point if any. (optional)
     * @param  bool $auto True to use auto format. (optional)
     * @param  bool $force True to force a new resize even if it already stored. (optional)
     * @param  ImageFormat $format True to force a new resize even if it already stored. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetContent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getAssetContentAsync($id, $version = null, $cache = null, $download = null, $width = null, $height = null, $quality = null, $mode = null, $bg = null, $focus_x = null, $focus_y = null, $nofocus = null, $auto = null, $force = null, $format = null, string $contentType = self::contentTypes['getAssetContent'][0])
    {
        return $this->getAssetContentAsyncWithHttpInfo($id, $version, $cache, $download, $width, $height, $quality, $mode, $bg, $focus_x, $focus_y, $nofocus, $auto, $force, $format, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAssetContentAsyncWithHttpInfo
     *
     * Get the asset content.
     *
     * @param  string $id The ID of the asset. (required)
     * @param  int $version The optional version of the asset. (optional)
     * @param  int $cache The cache duration in seconds. (optional)
     * @param  int $download Set it to 0 to prevent download. (optional)
     * @param  int $width The target width of the asset, if it is an image. (optional)
     * @param  int $height The target height of the asset, if it is an image. (optional)
     * @param  int $quality Optional image quality, it is is an jpeg image. (optional)
     * @param  ResizeMode $mode The resize mode when the width and height is defined. (optional)
     * @param  string $bg Optional background color. (optional)
     * @param  float $focus_x Override the y focus point. (optional)
     * @param  float $focus_y Override the x focus point. (optional)
     * @param  bool $nofocus True to ignore the asset focus point if any. (optional)
     * @param  bool $auto True to use auto format. (optional)
     * @param  bool $force True to force a new resize even if it already stored. (optional)
     * @param  ImageFormat $format True to force a new resize even if it already stored. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetContent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getAssetContentAsyncWithHttpInfo($id, $version = null, $cache = null, $download = null, $width = null, $height = null, $quality = null, $mode = null, $bg = null, $focus_x = null, $focus_y = null, $nofocus = null, $auto = null, $force = null, $format = null, string $contentType = self::contentTypes['getAssetContent'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->getAssetContentRequest($id, $version, $cache, $download, $width, $height, $quality, $mode, $bg, $focus_x, $focus_y, $nofocus, $auto, $force, $format, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAssetContent'
     *
     * @param  string $id The ID of the asset. (required)
     * @param  int $version The optional version of the asset. (optional)
     * @param  int $cache The cache duration in seconds. (optional)
     * @param  int $download Set it to 0 to prevent download. (optional)
     * @param  int $width The target width of the asset, if it is an image. (optional)
     * @param  int $height The target height of the asset, if it is an image. (optional)
     * @param  int $quality Optional image quality, it is is an jpeg image. (optional)
     * @param  ResizeMode $mode The resize mode when the width and height is defined. (optional)
     * @param  string $bg Optional background color. (optional)
     * @param  float $focus_x Override the y focus point. (optional)
     * @param  float $focus_y Override the x focus point. (optional)
     * @param  bool $nofocus True to ignore the asset focus point if any. (optional)
     * @param  bool $auto True to use auto format. (optional)
     * @param  bool $force True to force a new resize even if it already stored. (optional)
     * @param  ImageFormat $format True to force a new resize even if it already stored. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetContent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getAssetContentRequest($id, $version = null, $cache = null, $download = null, $width = null, $height = null, $quality = null, $mode = null, $bg = null, $focus_x = null, $focus_y = null, $nofocus = null, $auto = null, $force = null, $format = null, string $contentType = self::contentTypes['getAssetContent'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling '
            );
        }
















        $resourcePath = '/api/assets/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = $this->getAuthorizationHeader();
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $version,
            'version', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cache,
            'cache', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $download,
            'download', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $width,
            'width', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $height,
            'height', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $quality,
            'quality', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $mode,
            'mode', // param base name
            'ResizeMode', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $bg,
            'bg', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $focus_x,
            'focusX', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $focus_y,
            'focusY', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $nofocus,
            'nofocus', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $auto,
            'auto', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $force,
            'force', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $format,
            'format', // param base name
            'ImageFormat', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/octet-stream', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAssetContentBySlug
     *
     * Get the asset content.
     *
     * @param  string $id_or_slug The id or slug of the asset. (required)
     * @param  string $more Optional suffix that can be used to seo-optimize the link to the image Has not effect. (required)
     * @param  int $version The optional version of the asset. (optional)
     * @param  int $cache The cache duration in seconds. (optional)
     * @param  int $download Set it to 0 to prevent download. (optional)
     * @param  int $width The target width of the asset, if it is an image. (optional)
     * @param  int $height The target height of the asset, if it is an image. (optional)
     * @param  int $quality Optional image quality, it is is an jpeg image. (optional)
     * @param  ResizeMode $mode The resize mode when the width and height is defined. (optional)
     * @param  string $bg Optional background color. (optional)
     * @param  float $focus_x Override the y focus point. (optional)
     * @param  float $focus_y Override the x focus point. (optional)
     * @param  bool $nofocus True to ignore the asset focus point if any. (optional)
     * @param  bool $auto True to use auto format. (optional)
     * @param  bool $force True to force a new resize even if it already stored. (optional)
     * @param  ImageFormat $format True to force a new resize even if it already stored. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetContentBySlug'] to see the possible values for this operation
     *
     * @throws \Squidex/Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject|\Squidex/Client\Model\ErrorDto
     */
    public function getAssetContentBySlug($id_or_slug, $more, $version = null, $cache = null, $download = null, $width = null, $height = null, $quality = null, $mode = null, $bg = null, $focus_x = null, $focus_y = null, $nofocus = null, $auto = null, $force = null, $format = null, string $contentType = self::contentTypes['getAssetContentBySlug'][0])
    {
        list($response) = $this->getAssetContentBySlugWithHttpInfo($id_or_slug, $more, $version, $cache, $download, $width, $height, $quality, $mode, $bg, $focus_x, $focus_y, $nofocus, $auto, $force, $format, $contentType);
        return $response;
    }

    /**
     * Operation getAssetContentBySlugWithHttpInfo
     *
     * Get the asset content.
     *
     * @param  string $id_or_slug The id or slug of the asset. (required)
     * @param  string $more Optional suffix that can be used to seo-optimize the link to the image Has not effect. (required)
     * @param  int $version The optional version of the asset. (optional)
     * @param  int $cache The cache duration in seconds. (optional)
     * @param  int $download Set it to 0 to prevent download. (optional)
     * @param  int $width The target width of the asset, if it is an image. (optional)
     * @param  int $height The target height of the asset, if it is an image. (optional)
     * @param  int $quality Optional image quality, it is is an jpeg image. (optional)
     * @param  ResizeMode $mode The resize mode when the width and height is defined. (optional)
     * @param  string $bg Optional background color. (optional)
     * @param  float $focus_x Override the y focus point. (optional)
     * @param  float $focus_y Override the x focus point. (optional)
     * @param  bool $nofocus True to ignore the asset focus point if any. (optional)
     * @param  bool $auto True to use auto format. (optional)
     * @param  bool $force True to force a new resize even if it already stored. (optional)
     * @param  ImageFormat $format True to force a new resize even if it already stored. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetContentBySlug'] to see the possible values for this operation
     *
     * @throws \Squidex/Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject|\Squidex/Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssetContentBySlugWithHttpInfo($id_or_slug, $more, $version = null, $cache = null, $download = null, $width = null, $height = null, $quality = null, $mode = null, $bg = null, $focus_x = null, $focus_y = null, $nofocus = null, $auto = null, $force = null, $format = null, string $contentType = self::contentTypes['getAssetContentBySlug'][0])
    {
        $request = $this->getAssetContentBySlugRequest($id_or_slug, $more, $version, $cache, $download, $width, $height, $quality, $mode, $bg, $focus_x, $focus_y, $nofocus, $auto, $force, $format, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Squidex/Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex/Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex/Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex/Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAssetContentBySlugAsync
     *
     * Get the asset content.
     *
     * @param  string $id_or_slug The id or slug of the asset. (required)
     * @param  string $more Optional suffix that can be used to seo-optimize the link to the image Has not effect. (required)
     * @param  int $version The optional version of the asset. (optional)
     * @param  int $cache The cache duration in seconds. (optional)
     * @param  int $download Set it to 0 to prevent download. (optional)
     * @param  int $width The target width of the asset, if it is an image. (optional)
     * @param  int $height The target height of the asset, if it is an image. (optional)
     * @param  int $quality Optional image quality, it is is an jpeg image. (optional)
     * @param  ResizeMode $mode The resize mode when the width and height is defined. (optional)
     * @param  string $bg Optional background color. (optional)
     * @param  float $focus_x Override the y focus point. (optional)
     * @param  float $focus_y Override the x focus point. (optional)
     * @param  bool $nofocus True to ignore the asset focus point if any. (optional)
     * @param  bool $auto True to use auto format. (optional)
     * @param  bool $force True to force a new resize even if it already stored. (optional)
     * @param  ImageFormat $format True to force a new resize even if it already stored. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetContentBySlug'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssetContentBySlugAsync($id_or_slug, $more, $version = null, $cache = null, $download = null, $width = null, $height = null, $quality = null, $mode = null, $bg = null, $focus_x = null, $focus_y = null, $nofocus = null, $auto = null, $force = null, $format = null, string $contentType = self::contentTypes['getAssetContentBySlug'][0])
    {
        return $this->getAssetContentBySlugAsyncWithHttpInfo($id_or_slug, $more, $version, $cache, $download, $width, $height, $quality, $mode, $bg, $focus_x, $focus_y, $nofocus, $auto, $force, $format, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAssetContentBySlugAsyncWithHttpInfo
     *
     * Get the asset content.
     *
     * @param  string $id_or_slug The id or slug of the asset. (required)
     * @param  string $more Optional suffix that can be used to seo-optimize the link to the image Has not effect. (required)
     * @param  int $version The optional version of the asset. (optional)
     * @param  int $cache The cache duration in seconds. (optional)
     * @param  int $download Set it to 0 to prevent download. (optional)
     * @param  int $width The target width of the asset, if it is an image. (optional)
     * @param  int $height The target height of the asset, if it is an image. (optional)
     * @param  int $quality Optional image quality, it is is an jpeg image. (optional)
     * @param  ResizeMode $mode The resize mode when the width and height is defined. (optional)
     * @param  string $bg Optional background color. (optional)
     * @param  float $focus_x Override the y focus point. (optional)
     * @param  float $focus_y Override the x focus point. (optional)
     * @param  bool $nofocus True to ignore the asset focus point if any. (optional)
     * @param  bool $auto True to use auto format. (optional)
     * @param  bool $force True to force a new resize even if it already stored. (optional)
     * @param  ImageFormat $format True to force a new resize even if it already stored. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetContentBySlug'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssetContentBySlugAsyncWithHttpInfo($id_or_slug, $more, $version = null, $cache = null, $download = null, $width = null, $height = null, $quality = null, $mode = null, $bg = null, $focus_x = null, $focus_y = null, $nofocus = null, $auto = null, $force = null, $format = null, string $contentType = self::contentTypes['getAssetContentBySlug'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->getAssetContentBySlugRequest($id_or_slug, $more, $version, $cache, $download, $width, $height, $quality, $mode, $bg, $focus_x, $focus_y, $nofocus, $auto, $force, $format, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAssetContentBySlug'
     *
     * @param  string $id_or_slug The id or slug of the asset. (required)
     * @param  string $more Optional suffix that can be used to seo-optimize the link to the image Has not effect. (required)
     * @param  int $version The optional version of the asset. (optional)
     * @param  int $cache The cache duration in seconds. (optional)
     * @param  int $download Set it to 0 to prevent download. (optional)
     * @param  int $width The target width of the asset, if it is an image. (optional)
     * @param  int $height The target height of the asset, if it is an image. (optional)
     * @param  int $quality Optional image quality, it is is an jpeg image. (optional)
     * @param  ResizeMode $mode The resize mode when the width and height is defined. (optional)
     * @param  string $bg Optional background color. (optional)
     * @param  float $focus_x Override the y focus point. (optional)
     * @param  float $focus_y Override the x focus point. (optional)
     * @param  bool $nofocus True to ignore the asset focus point if any. (optional)
     * @param  bool $auto True to use auto format. (optional)
     * @param  bool $force True to force a new resize even if it already stored. (optional)
     * @param  ImageFormat $format True to force a new resize even if it already stored. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetContentBySlug'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAssetContentBySlugRequest($id_or_slug, $more, $version = null, $cache = null, $download = null, $width = null, $height = null, $quality = null, $mode = null, $bg = null, $focus_x = null, $focus_y = null, $nofocus = null, $auto = null, $force = null, $format = null, string $contentType = self::contentTypes['getAssetContentBySlug'][0])
    {

        // verify the required parameter 'app' is set
        $app = $this->options['appName'];
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling '
            );
        }

        // verify the required parameter 'id_or_slug' is set
        if ($id_or_slug === null || (is_array($id_or_slug) && count($id_or_slug) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_or_slug when calling '
            );
        }

        // verify the required parameter 'more' is set
        if ($more === null || (is_array($more) && count($more) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $more when calling '
            );
        }
















        $resourcePath = '/api/assets/{app}/{idOrSlug}/{more}';
        $formParams = [];
        $queryParams = [];
        $headerParams = $this->getAuthorizationHeader();
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $version,
            'version', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cache,
            'cache', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $download,
            'download', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $width,
            'width', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $height,
            'height', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $quality,
            'quality', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $mode,
            'mode', // param base name
            'ResizeMode', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $bg,
            'bg', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $focus_x,
            'focusX', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $focus_y,
            'focusY', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $nofocus,
            'nofocus', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $auto,
            'auto', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $force,
            'force', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $format,
            'format', // param base name
            'ImageFormat', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id_or_slug !== null) {
            $resourcePath = str_replace(
                '{' . 'idOrSlug' . '}',
                ObjectSerializer::toPathValue($id_or_slug),
                $resourcePath
            );
        }
        // path params
        if ($more !== null) {
            $resourcePath = str_replace(
                '{' . 'more' . '}',
                ObjectSerializer::toPathValue($more),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/octet-stream', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAssetFolder
     *
     * Delete an asset folder.
     *
     * @param  string $id The ID of the asset folder to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAssetFolder'] to see the possible values for this operation
     *
     * @throws \Squidex/Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteAssetFolder($id, string $contentType = self::contentTypes['deleteAssetFolder'][0])
    {
        $this->deleteAssetFolderWithHttpInfo($id, $contentType);
    }

    /**
     * Operation deleteAssetFolderWithHttpInfo
     *
     * Delete an asset folder.
     *
     * @param  string $id The ID of the asset folder to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAssetFolder'] to see the possible values for this operation
     *
     * @throws \Squidex/Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAssetFolderWithHttpInfo($id, string $contentType = self::contentTypes['deleteAssetFolder'][0])
    {
        $request = $this->deleteAssetFolderRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex/Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex/Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAssetFolderAsync
     *
     * Delete an asset folder.
     *
     * @param  string $id The ID of the asset folder to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAssetFolder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAssetFolderAsync($id, string $contentType = self::contentTypes['deleteAssetFolder'][0])
    {
        return $this->deleteAssetFolderAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAssetFolderAsyncWithHttpInfo
     *
     * Delete an asset folder.
     *
     * @param  string $id The ID of the asset folder to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAssetFolder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAssetFolderAsyncWithHttpInfo($id, string $contentType = self::contentTypes['deleteAssetFolder'][0])
    {
        $returnType = '';
        $request = $this->deleteAssetFolderRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAssetFolder'
     *
     * @param  string $id The ID of the asset folder to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAssetFolder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteAssetFolderRequest($id, string $contentType = self::contentTypes['deleteAssetFolder'][0])
    {

        // verify the required parameter 'app' is set
        $app = $this->options['appName'];
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling '
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling '
            );
        }


        $resourcePath = '/api/apps/{app}/assets/folders/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = $this->getAuthorizationHeader();
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAssetFolders
     *
     * Get asset folders.
     *
     * @param  string $parent_id The optional parent folder id. (optional)
     * @param  AssetFolderScope $scope The scope of the query. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetFolders'] to see the possible values for this operation
     *
     * @throws \Squidex/Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Squidex/Client\Model\AssetFoldersDto|\Squidex/Client\Model\ErrorDto
     */
    public function getAssetFolders($parent_id = null, $scope = null, string $contentType = self::contentTypes['getAssetFolders'][0])
    {
        list($response) = $this->getAssetFoldersWithHttpInfo($parent_id, $scope, $contentType);
        return $response;
    }

    /**
     * Operation getAssetFoldersWithHttpInfo
     *
     * Get asset folders.
     *
     * @param  string $parent_id The optional parent folder id. (optional)
     * @param  AssetFolderScope $scope The scope of the query. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetFolders'] to see the possible values for this operation
     *
     * @throws \Squidex/Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Squidex/Client\Model\AssetFoldersDto|\Squidex/Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssetFoldersWithHttpInfo($parent_id = null, $scope = null, string $contentType = self::contentTypes['getAssetFolders'][0])
    {
        $request = $this->getAssetFoldersRequest($parent_id, $scope, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Squidex/Client\Model\AssetFoldersDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex/Client\Model\AssetFoldersDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex/Client\Model\AssetFoldersDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Squidex/Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex/Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex/Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Squidex/Client\Model\AssetFoldersDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex/Client\Model\AssetFoldersDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex/Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAssetFoldersAsync
     *
     * Get asset folders.
     *
     * @param  string $parent_id The optional parent folder id. (optional)
     * @param  AssetFolderScope $scope The scope of the query. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetFolders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssetFoldersAsync($parent_id = null, $scope = null, string $contentType = self::contentTypes['getAssetFolders'][0])
    {
        return $this->getAssetFoldersAsyncWithHttpInfo($parent_id, $scope, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAssetFoldersAsyncWithHttpInfo
     *
     * Get asset folders.
     *
     * @param  string $parent_id The optional parent folder id. (optional)
     * @param  AssetFolderScope $scope The scope of the query. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetFolders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssetFoldersAsyncWithHttpInfo($parent_id = null, $scope = null, string $contentType = self::contentTypes['getAssetFolders'][0])
    {
        $returnType = '\Squidex/Client\Model\AssetFoldersDto';
        $request = $this->getAssetFoldersRequest($parent_id, $scope, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAssetFolders'
     *
     * @param  string $parent_id The optional parent folder id. (optional)
     * @param  AssetFolderScope $scope The scope of the query. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetFolders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAssetFoldersRequest($parent_id = null, $scope = null, string $contentType = self::contentTypes['getAssetFolders'][0])
    {

        // verify the required parameter 'app' is set
        $app = $this->options['appName'];
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling '
            );
        }




        $resourcePath = '/api/apps/{app}/assets/folders';
        $formParams = [];
        $queryParams = [];
        $headerParams = $this->getAuthorizationHeader();
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $parent_id,
            'parentId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $scope,
            'scope', // param base name
            'AssetFolderScope', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postAssetFolder
     *
     * Create an asset folder.
     *
     * @param  \Squidex/Client\Model\CreateAssetFolderDto $create_asset_folder_dto The asset folder object that needs to be added to the App. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAssetFolder'] to see the possible values for this operation
     *
     * @throws \Squidex/Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Squidex/Client\Model\AssetFolderDto|\Squidex/Client\Model\ErrorDto|\Squidex/Client\Model\ErrorDto
     */
    public function postAssetFolder($create_asset_folder_dto, string $contentType = self::contentTypes['postAssetFolder'][0])
    {
        list($response) = $this->postAssetFolderWithHttpInfo($create_asset_folder_dto, $contentType);
        return $response;
    }

    /**
     * Operation postAssetFolderWithHttpInfo
     *
     * Create an asset folder.
     *
     * @param  \Squidex/Client\Model\CreateAssetFolderDto $create_asset_folder_dto The asset folder object that needs to be added to the App. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAssetFolder'] to see the possible values for this operation
     *
     * @throws \Squidex/Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Squidex/Client\Model\AssetFolderDto|\Squidex/Client\Model\ErrorDto|\Squidex/Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function postAssetFolderWithHttpInfo($create_asset_folder_dto, string $contentType = self::contentTypes['postAssetFolder'][0])
    {
        $request = $this->postAssetFolderRequest($create_asset_folder_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Squidex/Client\Model\AssetFolderDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex/Client\Model\AssetFolderDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex/Client\Model\AssetFolderDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Squidex/Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex/Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex/Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Squidex/Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex/Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex/Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Squidex/Client\Model\AssetFolderDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex/Client\Model\AssetFolderDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex/Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex/Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postAssetFolderAsync
     *
     * Create an asset folder.
     *
     * @param  \Squidex/Client\Model\CreateAssetFolderDto $create_asset_folder_dto The asset folder object that needs to be added to the App. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAssetFolder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postAssetFolderAsync($create_asset_folder_dto, string $contentType = self::contentTypes['postAssetFolder'][0])
    {
        return $this->postAssetFolderAsyncWithHttpInfo($create_asset_folder_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postAssetFolderAsyncWithHttpInfo
     *
     * Create an asset folder.
     *
     * @param  \Squidex/Client\Model\CreateAssetFolderDto $create_asset_folder_dto The asset folder object that needs to be added to the App. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAssetFolder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postAssetFolderAsyncWithHttpInfo($create_asset_folder_dto, string $contentType = self::contentTypes['postAssetFolder'][0])
    {
        $returnType = '\Squidex/Client\Model\AssetFolderDto';
        $request = $this->postAssetFolderRequest($create_asset_folder_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postAssetFolder'
     *
     * @param  \Squidex/Client\Model\CreateAssetFolderDto $create_asset_folder_dto The asset folder object that needs to be added to the App. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAssetFolder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postAssetFolderRequest($create_asset_folder_dto, string $contentType = self::contentTypes['postAssetFolder'][0])
    {

        // verify the required parameter 'app' is set
        $app = $this->options['appName'];
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling '
            );
        }

        // verify the required parameter 'create_asset_folder_dto' is set
        if ($create_asset_folder_dto === null || (is_array($create_asset_folder_dto) && count($create_asset_folder_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_asset_folder_dto when calling '
            );
        }


        $resourcePath = '/api/apps/{app}/assets/folders';
        $formParams = [];
        $queryParams = [];
        $headerParams = $this->getAuthorizationHeader();
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_asset_folder_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_asset_folder_dto));
            } else {
                $httpBody = $create_asset_folder_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putAssetFolder
     *
     * Update an asset folder.
     *
     * @param  string $id The ID of the asset folder. (required)
     * @param  \Squidex/Client\Model\RenameAssetFolderDto $rename_asset_folder_dto The asset folder object that needs to updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putAssetFolder'] to see the possible values for this operation
     *
     * @throws \Squidex/Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Squidex/Client\Model\AssetFolderDto|\Squidex/Client\Model\ErrorDto|\Squidex/Client\Model\ErrorDto
     */
    public function putAssetFolder($id, $rename_asset_folder_dto, string $contentType = self::contentTypes['putAssetFolder'][0])
    {
        list($response) = $this->putAssetFolderWithHttpInfo($id, $rename_asset_folder_dto, $contentType);
        return $response;
    }

    /**
     * Operation putAssetFolderWithHttpInfo
     *
     * Update an asset folder.
     *
     * @param  string $id The ID of the asset folder. (required)
     * @param  \Squidex/Client\Model\RenameAssetFolderDto $rename_asset_folder_dto The asset folder object that needs to updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putAssetFolder'] to see the possible values for this operation
     *
     * @throws \Squidex/Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Squidex/Client\Model\AssetFolderDto|\Squidex/Client\Model\ErrorDto|\Squidex/Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function putAssetFolderWithHttpInfo($id, $rename_asset_folder_dto, string $contentType = self::contentTypes['putAssetFolder'][0])
    {
        $request = $this->putAssetFolderRequest($id, $rename_asset_folder_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Squidex/Client\Model\AssetFolderDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex/Client\Model\AssetFolderDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex/Client\Model\AssetFolderDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Squidex/Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex/Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex/Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Squidex/Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex/Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex/Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Squidex/Client\Model\AssetFolderDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex/Client\Model\AssetFolderDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex/Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex/Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putAssetFolderAsync
     *
     * Update an asset folder.
     *
     * @param  string $id The ID of the asset folder. (required)
     * @param  \Squidex/Client\Model\RenameAssetFolderDto $rename_asset_folder_dto The asset folder object that needs to updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putAssetFolder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putAssetFolderAsync($id, $rename_asset_folder_dto, string $contentType = self::contentTypes['putAssetFolder'][0])
    {
        return $this->putAssetFolderAsyncWithHttpInfo($id, $rename_asset_folder_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putAssetFolderAsyncWithHttpInfo
     *
     * Update an asset folder.
     *
     * @param  string $id The ID of the asset folder. (required)
     * @param  \Squidex/Client\Model\RenameAssetFolderDto $rename_asset_folder_dto The asset folder object that needs to updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putAssetFolder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putAssetFolderAsyncWithHttpInfo($id, $rename_asset_folder_dto, string $contentType = self::contentTypes['putAssetFolder'][0])
    {
        $returnType = '\Squidex/Client\Model\AssetFolderDto';
        $request = $this->putAssetFolderRequest($id, $rename_asset_folder_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putAssetFolder'
     *
     * @param  string $id The ID of the asset folder. (required)
     * @param  \Squidex/Client\Model\RenameAssetFolderDto $rename_asset_folder_dto The asset folder object that needs to updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putAssetFolder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putAssetFolderRequest($id, $rename_asset_folder_dto, string $contentType = self::contentTypes['putAssetFolder'][0])
    {

        // verify the required parameter 'app' is set
        $app = $this->options['appName'];
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling '
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling '
            );
        }

        // verify the required parameter 'rename_asset_folder_dto' is set
        if ($rename_asset_folder_dto === null || (is_array($rename_asset_folder_dto) && count($rename_asset_folder_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rename_asset_folder_dto when calling '
            );
        }


        $resourcePath = '/api/apps/{app}/assets/folders/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = $this->getAuthorizationHeader();
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($rename_asset_folder_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($rename_asset_folder_dto));
            } else {
                $httpBody = $rename_asset_folder_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putAssetFolderParent
     *
     * Move an asset folder.
     *
     * @param  string $id The ID of the asset folder. (required)
     * @param  \Squidex/Client\Model\MoveAssetFolderDto $move_asset_folder_dto The asset folder object that needs to updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putAssetFolderParent'] to see the possible values for this operation
     *
     * @throws \Squidex/Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Squidex/Client\Model\AssetFolderDto|\Squidex/Client\Model\ErrorDto|\Squidex/Client\Model\ErrorDto
     */
    public function putAssetFolderParent($id, $move_asset_folder_dto, string $contentType = self::contentTypes['putAssetFolderParent'][0])
    {
        list($response) = $this->putAssetFolderParentWithHttpInfo($id, $move_asset_folder_dto, $contentType);
        return $response;
    }

    /**
     * Operation putAssetFolderParentWithHttpInfo
     *
     * Move an asset folder.
     *
     * @param  string $id The ID of the asset folder. (required)
     * @param  \Squidex/Client\Model\MoveAssetFolderDto $move_asset_folder_dto The asset folder object that needs to updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putAssetFolderParent'] to see the possible values for this operation
     *
     * @throws \Squidex/Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Squidex/Client\Model\AssetFolderDto|\Squidex/Client\Model\ErrorDto|\Squidex/Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function putAssetFolderParentWithHttpInfo($id, $move_asset_folder_dto, string $contentType = self::contentTypes['putAssetFolderParent'][0])
    {
        $request = $this->putAssetFolderParentRequest($id, $move_asset_folder_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Squidex/Client\Model\AssetFolderDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex/Client\Model\AssetFolderDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex/Client\Model\AssetFolderDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Squidex/Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex/Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex/Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Squidex/Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex/Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex/Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Squidex/Client\Model\AssetFolderDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex/Client\Model\AssetFolderDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex/Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex/Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putAssetFolderParentAsync
     *
     * Move an asset folder.
     *
     * @param  string $id The ID of the asset folder. (required)
     * @param  \Squidex/Client\Model\MoveAssetFolderDto $move_asset_folder_dto The asset folder object that needs to updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putAssetFolderParent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putAssetFolderParentAsync($id, $move_asset_folder_dto, string $contentType = self::contentTypes['putAssetFolderParent'][0])
    {
        return $this->putAssetFolderParentAsyncWithHttpInfo($id, $move_asset_folder_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putAssetFolderParentAsyncWithHttpInfo
     *
     * Move an asset folder.
     *
     * @param  string $id The ID of the asset folder. (required)
     * @param  \Squidex/Client\Model\MoveAssetFolderDto $move_asset_folder_dto The asset folder object that needs to updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putAssetFolderParent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putAssetFolderParentAsyncWithHttpInfo($id, $move_asset_folder_dto, string $contentType = self::contentTypes['putAssetFolderParent'][0])
    {
        $returnType = '\Squidex/Client\Model\AssetFolderDto';
        $request = $this->putAssetFolderParentRequest($id, $move_asset_folder_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putAssetFolderParent'
     *
     * @param  string $id The ID of the asset folder. (required)
     * @param  \Squidex/Client\Model\MoveAssetFolderDto $move_asset_folder_dto The asset folder object that needs to updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putAssetFolderParent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putAssetFolderParentRequest($id, $move_asset_folder_dto, string $contentType = self::contentTypes['putAssetFolderParent'][0])
    {

        // verify the required parameter 'app' is set
        $app = $this->options['appName'];
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling '
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling '
            );
        }

        // verify the required parameter 'move_asset_folder_dto' is set
        if ($move_asset_folder_dto === null || (is_array($move_asset_folder_dto) && count($move_asset_folder_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $move_asset_folder_dto when calling '
            );
        }


        $resourcePath = '/api/apps/{app}/assets/folders/{id}/parent';
        $formParams = [];
        $queryParams = [];
        $headerParams = $this->getAuthorizationHeader();
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($move_asset_folder_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($move_asset_folder_dto));
            } else {
                $httpBody = $move_asset_folder_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bulkUpdateAssets
     *
     * Bulk update assets.
     *
     * @param  \Squidex/Client\Model\BulkUpdateAssetsDto $bulk_update_assets_dto The bulk update request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkUpdateAssets'] to see the possible values for this operation
     *
     * @throws \Squidex/Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Squidex/Client\Model\BulkResultDto[]|\Squidex/Client\Model\ErrorDto|\Squidex/Client\Model\ErrorDto
     */
    public function bulkUpdateAssets($bulk_update_assets_dto, string $contentType = self::contentTypes['bulkUpdateAssets'][0])
    {
        list($response) = $this->bulkUpdateAssetsWithHttpInfo($bulk_update_assets_dto, $contentType);
        return $response;
    }

    /**
     * Operation bulkUpdateAssetsWithHttpInfo
     *
     * Bulk update assets.
     *
     * @param  \Squidex/Client\Model\BulkUpdateAssetsDto $bulk_update_assets_dto The bulk update request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkUpdateAssets'] to see the possible values for this operation
     *
     * @throws \Squidex/Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Squidex/Client\Model\BulkResultDto[]|\Squidex/Client\Model\ErrorDto|\Squidex/Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function bulkUpdateAssetsWithHttpInfo($bulk_update_assets_dto, string $contentType = self::contentTypes['bulkUpdateAssets'][0])
    {
        $request = $this->bulkUpdateAssetsRequest($bulk_update_assets_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Squidex/Client\Model\BulkResultDto[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex/Client\Model\BulkResultDto[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex/Client\Model\BulkResultDto[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Squidex/Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex/Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex/Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Squidex/Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex/Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex/Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Squidex/Client\Model\BulkResultDto[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex/Client\Model\BulkResultDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex/Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex/Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bulkUpdateAssetsAsync
     *
     * Bulk update assets.
     *
     * @param  \Squidex/Client\Model\BulkUpdateAssetsDto $bulk_update_assets_dto The bulk update request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkUpdateAssets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkUpdateAssetsAsync($bulk_update_assets_dto, string $contentType = self::contentTypes['bulkUpdateAssets'][0])
    {
        return $this->bulkUpdateAssetsAsyncWithHttpInfo($bulk_update_assets_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bulkUpdateAssetsAsyncWithHttpInfo
     *
     * Bulk update assets.
     *
     * @param  \Squidex/Client\Model\BulkUpdateAssetsDto $bulk_update_assets_dto The bulk update request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkUpdateAssets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkUpdateAssetsAsyncWithHttpInfo($bulk_update_assets_dto, string $contentType = self::contentTypes['bulkUpdateAssets'][0])
    {
        $returnType = '\Squidex/Client\Model\BulkResultDto[]';
        $request = $this->bulkUpdateAssetsRequest($bulk_update_assets_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bulkUpdateAssets'
     *
     * @param  \Squidex/Client\Model\BulkUpdateAssetsDto $bulk_update_assets_dto The bulk update request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkUpdateAssets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function bulkUpdateAssetsRequest($bulk_update_assets_dto, string $contentType = self::contentTypes['bulkUpdateAssets'][0])
    {

        // verify the required parameter 'app' is set
        $app = $this->options['appName'];
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling '
            );
        }

        // verify the required parameter 'bulk_update_assets_dto' is set
        if ($bulk_update_assets_dto === null || (is_array($bulk_update_assets_dto) && count($bulk_update_assets_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bulk_update_assets_dto when calling '
            );
        }


        $resourcePath = '/api/apps/{app}/assets/bulk';
        $formParams = [];
        $queryParams = [];
        $headerParams = $this->getAuthorizationHeader();
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($bulk_update_assets_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($bulk_update_assets_dto));
            } else {
                $httpBody = $bulk_update_assets_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAsset
     *
     * Delete an asset.
     *
     * @param  string $id The ID of the asset to delete. (required)
     * @param  bool $check_referrers True to check referrers of this asset. (optional)
     * @param  bool $permanent True to delete the asset permanently. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAsset'] to see the possible values for this operation
     *
     * @throws \Squidex/Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteAsset($id, $check_referrers = null, $permanent = null, string $contentType = self::contentTypes['deleteAsset'][0])
    {
        $this->deleteAssetWithHttpInfo($id, $check_referrers, $permanent, $contentType);
    }

    /**
     * Operation deleteAssetWithHttpInfo
     *
     * Delete an asset.
     *
     * @param  string $id The ID of the asset to delete. (required)
     * @param  bool $check_referrers True to check referrers of this asset. (optional)
     * @param  bool $permanent True to delete the asset permanently. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAsset'] to see the possible values for this operation
     *
     * @throws \Squidex/Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAssetWithHttpInfo($id, $check_referrers = null, $permanent = null, string $contentType = self::contentTypes['deleteAsset'][0])
    {
        $request = $this->deleteAssetRequest($id, $check_referrers, $permanent, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex/Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex/Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAssetAsync
     *
     * Delete an asset.
     *
     * @param  string $id The ID of the asset to delete. (required)
     * @param  bool $check_referrers True to check referrers of this asset. (optional)
     * @param  bool $permanent True to delete the asset permanently. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAsset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAssetAsync($id, $check_referrers = null, $permanent = null, string $contentType = self::contentTypes['deleteAsset'][0])
    {
        return $this->deleteAssetAsyncWithHttpInfo($id, $check_referrers, $permanent, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAssetAsyncWithHttpInfo
     *
     * Delete an asset.
     *
     * @param  string $id The ID of the asset to delete. (required)
     * @param  bool $check_referrers True to check referrers of this asset. (optional)
     * @param  bool $permanent True to delete the asset permanently. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAsset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAssetAsyncWithHttpInfo($id, $check_referrers = null, $permanent = null, string $contentType = self::contentTypes['deleteAsset'][0])
    {
        $returnType = '';
        $request = $this->deleteAssetRequest($id, $check_referrers, $permanent, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAsset'
     *
     * @param  string $id The ID of the asset to delete. (required)
     * @param  bool $check_referrers True to check referrers of this asset. (optional)
     * @param  bool $permanent True to delete the asset permanently. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAsset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteAssetRequest($id, $check_referrers = null, $permanent = null, string $contentType = self::contentTypes['deleteAsset'][0])
    {

        // verify the required parameter 'app' is set
        $app = $this->options['appName'];
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling '
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling '
            );
        }




        $resourcePath = '/api/apps/{app}/assets/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = $this->getAuthorizationHeader();
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $check_referrers,
            'checkReferrers', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $permanent,
            'permanent', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAsset
     *
     * Get an asset by id.
     *
     * @param  string $id The ID of the asset to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAsset'] to see the possible values for this operation
     *
     * @throws \Squidex/Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Squidex/Client\Model\AssetDto|\Squidex/Client\Model\ErrorDto
     */
    public function getAsset($id, string $contentType = self::contentTypes['getAsset'][0])
    {
        list($response) = $this->getAssetWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation getAssetWithHttpInfo
     *
     * Get an asset by id.
     *
     * @param  string $id The ID of the asset to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAsset'] to see the possible values for this operation
     *
     * @throws \Squidex/Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Squidex/Client\Model\AssetDto|\Squidex/Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssetWithHttpInfo($id, string $contentType = self::contentTypes['getAsset'][0])
    {
        $request = $this->getAssetRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Squidex/Client\Model\AssetDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex/Client\Model\AssetDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex/Client\Model\AssetDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Squidex/Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex/Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex/Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Squidex/Client\Model\AssetDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex/Client\Model\AssetDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex/Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAssetAsync
     *
     * Get an asset by id.
     *
     * @param  string $id The ID of the asset to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAsset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssetAsync($id, string $contentType = self::contentTypes['getAsset'][0])
    {
        return $this->getAssetAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAssetAsyncWithHttpInfo
     *
     * Get an asset by id.
     *
     * @param  string $id The ID of the asset to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAsset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssetAsyncWithHttpInfo($id, string $contentType = self::contentTypes['getAsset'][0])
    {
        $returnType = '\Squidex/Client\Model\AssetDto';
        $request = $this->getAssetRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAsset'
     *
     * @param  string $id The ID of the asset to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAsset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAssetRequest($id, string $contentType = self::contentTypes['getAsset'][0])
    {

        // verify the required parameter 'app' is set
        $app = $this->options['appName'];
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling '
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling '
            );
        }


        $resourcePath = '/api/apps/{app}/assets/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = $this->getAuthorizationHeader();
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAssets
     *
     * Get assets.
     *
     * @param  string $parent_id The optional parent folder id. (optional)
     * @param  string $ids The optional asset ids. (optional)
     * @param  string $q The optional json query. (optional)
     * @param  float $top Optional number of items to take. (optional)
     * @param  float $skip Optional number of items to skip. (optional)
     * @param  string $orderby Optional OData order definition. (optional)
     * @param  string $filter Optional OData filter. (optional)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssets'] to see the possible values for this operation
     *
     * @throws \Squidex/Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Squidex/Client\Model\AssetsDto|\Squidex/Client\Model\ErrorDto
     */
    public function getAssets($parent_id = null, $ids = null, $q = null, $top = null, $skip = null, $orderby = null, $filter = null, $x_no_total = null, $x_no_slow_total = null, string $contentType = self::contentTypes['getAssets'][0])
    {
        list($response) = $this->getAssetsWithHttpInfo($parent_id, $ids, $q, $top, $skip, $orderby, $filter, $x_no_total, $x_no_slow_total, $contentType);
        return $response;
    }

    /**
     * Operation getAssetsWithHttpInfo
     *
     * Get assets.
     *
     * @param  string $parent_id The optional parent folder id. (optional)
     * @param  string $ids The optional asset ids. (optional)
     * @param  string $q The optional json query. (optional)
     * @param  float $top Optional number of items to take. (optional)
     * @param  float $skip Optional number of items to skip. (optional)
     * @param  string $orderby Optional OData order definition. (optional)
     * @param  string $filter Optional OData filter. (optional)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssets'] to see the possible values for this operation
     *
     * @throws \Squidex/Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Squidex/Client\Model\AssetsDto|\Squidex/Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssetsWithHttpInfo($parent_id = null, $ids = null, $q = null, $top = null, $skip = null, $orderby = null, $filter = null, $x_no_total = null, $x_no_slow_total = null, string $contentType = self::contentTypes['getAssets'][0])
    {
        $request = $this->getAssetsRequest($parent_id, $ids, $q, $top, $skip, $orderby, $filter, $x_no_total, $x_no_slow_total, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Squidex/Client\Model\AssetsDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex/Client\Model\AssetsDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex/Client\Model\AssetsDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Squidex/Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex/Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex/Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Squidex/Client\Model\AssetsDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex/Client\Model\AssetsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex/Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAssetsAsync
     *
     * Get assets.
     *
     * @param  string $parent_id The optional parent folder id. (optional)
     * @param  string $ids The optional asset ids. (optional)
     * @param  string $q The optional json query. (optional)
     * @param  float $top Optional number of items to take. (optional)
     * @param  float $skip Optional number of items to skip. (optional)
     * @param  string $orderby Optional OData order definition. (optional)
     * @param  string $filter Optional OData filter. (optional)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssetsAsync($parent_id = null, $ids = null, $q = null, $top = null, $skip = null, $orderby = null, $filter = null, $x_no_total = null, $x_no_slow_total = null, string $contentType = self::contentTypes['getAssets'][0])
    {
        return $this->getAssetsAsyncWithHttpInfo($parent_id, $ids, $q, $top, $skip, $orderby, $filter, $x_no_total, $x_no_slow_total, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAssetsAsyncWithHttpInfo
     *
     * Get assets.
     *
     * @param  string $parent_id The optional parent folder id. (optional)
     * @param  string $ids The optional asset ids. (optional)
     * @param  string $q The optional json query. (optional)
     * @param  float $top Optional number of items to take. (optional)
     * @param  float $skip Optional number of items to skip. (optional)
     * @param  string $orderby Optional OData order definition. (optional)
     * @param  string $filter Optional OData filter. (optional)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssetsAsyncWithHttpInfo($parent_id = null, $ids = null, $q = null, $top = null, $skip = null, $orderby = null, $filter = null, $x_no_total = null, $x_no_slow_total = null, string $contentType = self::contentTypes['getAssets'][0])
    {
        $returnType = '\Squidex/Client\Model\AssetsDto';
        $request = $this->getAssetsRequest($parent_id, $ids, $q, $top, $skip, $orderby, $filter, $x_no_total, $x_no_slow_total, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAssets'
     *
     * @param  string $parent_id The optional parent folder id. (optional)
     * @param  string $ids The optional asset ids. (optional)
     * @param  string $q The optional json query. (optional)
     * @param  float $top Optional number of items to take. (optional)
     * @param  float $skip Optional number of items to skip. (optional)
     * @param  string $orderby Optional OData order definition. (optional)
     * @param  string $filter Optional OData filter. (optional)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAssetsRequest($parent_id = null, $ids = null, $q = null, $top = null, $skip = null, $orderby = null, $filter = null, $x_no_total = null, $x_no_slow_total = null, string $contentType = self::contentTypes['getAssets'][0])
    {

        // verify the required parameter 'app' is set
        $app = $this->options['appName'];
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling '
            );
        }











        $resourcePath = '/api/apps/{app}/assets';
        $formParams = [];
        $queryParams = [];
        $headerParams = $this->getAuthorizationHeader();
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $parent_id,
            'parentId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ids,
            'ids', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $q,
            'q', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_no_total !== null) {
            $headerParams['X-NoTotal'] = ObjectSerializer::toHeaderValue($x_no_total);
        }
        // header params
        if ($x_no_slow_total !== null) {
            $headerParams['X-NoSlowTotal'] = ObjectSerializer::toHeaderValue($x_no_slow_total);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAssetsPost
     *
     * Get assets.
     *
     * @param  \Squidex/Client\Model\QueryDto $query_dto The required query object. (required)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetsPost'] to see the possible values for this operation
     *
     * @throws \Squidex/Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Squidex/Client\Model\AssetsDto|\Squidex/Client\Model\ErrorDto|\Squidex/Client\Model\ErrorDto
     */
    public function getAssetsPost($query_dto, $x_no_total = null, $x_no_slow_total = null, string $contentType = self::contentTypes['getAssetsPost'][0])
    {
        list($response) = $this->getAssetsPostWithHttpInfo($query_dto, $x_no_total, $x_no_slow_total, $contentType);
        return $response;
    }

    /**
     * Operation getAssetsPostWithHttpInfo
     *
     * Get assets.
     *
     * @param  \Squidex/Client\Model\QueryDto $query_dto The required query object. (required)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetsPost'] to see the possible values for this operation
     *
     * @throws \Squidex/Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Squidex/Client\Model\AssetsDto|\Squidex/Client\Model\ErrorDto|\Squidex/Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssetsPostWithHttpInfo($query_dto, $x_no_total = null, $x_no_slow_total = null, string $contentType = self::contentTypes['getAssetsPost'][0])
    {
        $request = $this->getAssetsPostRequest($query_dto, $x_no_total, $x_no_slow_total, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Squidex/Client\Model\AssetsDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex/Client\Model\AssetsDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex/Client\Model\AssetsDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Squidex/Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex/Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex/Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Squidex/Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex/Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex/Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Squidex/Client\Model\AssetsDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex/Client\Model\AssetsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex/Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex/Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAssetsPostAsync
     *
     * Get assets.
     *
     * @param  \Squidex/Client\Model\QueryDto $query_dto The required query object. (required)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssetsPostAsync($query_dto, $x_no_total = null, $x_no_slow_total = null, string $contentType = self::contentTypes['getAssetsPost'][0])
    {
        return $this->getAssetsPostAsyncWithHttpInfo($query_dto, $x_no_total, $x_no_slow_total, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAssetsPostAsyncWithHttpInfo
     *
     * Get assets.
     *
     * @param  \Squidex/Client\Model\QueryDto $query_dto The required query object. (required)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssetsPostAsyncWithHttpInfo($query_dto, $x_no_total = null, $x_no_slow_total = null, string $contentType = self::contentTypes['getAssetsPost'][0])
    {
        $returnType = '\Squidex/Client\Model\AssetsDto';
        $request = $this->getAssetsPostRequest($query_dto, $x_no_total, $x_no_slow_total, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAssetsPost'
     *
     * @param  \Squidex/Client\Model\QueryDto $query_dto The required query object. (required)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAssetsPostRequest($query_dto, $x_no_total = null, $x_no_slow_total = null, string $contentType = self::contentTypes['getAssetsPost'][0])
    {

        // verify the required parameter 'app' is set
        $app = $this->options['appName'];
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling '
            );
        }

        // verify the required parameter 'query_dto' is set
        if ($query_dto === null || (is_array($query_dto) && count($query_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $query_dto when calling '
            );
        }




        $resourcePath = '/api/apps/{app}/assets/query';
        $formParams = [];
        $queryParams = [];
        $headerParams = $this->getAuthorizationHeader();
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_no_total !== null) {
            $headerParams['X-NoTotal'] = ObjectSerializer::toHeaderValue($x_no_total);
        }
        // header params
        if ($x_no_slow_total !== null) {
            $headerParams['X-NoSlowTotal'] = ObjectSerializer::toHeaderValue($x_no_slow_total);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($query_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($query_dto));
            } else {
                $httpBody = $query_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTags
     *
     * Get assets tags.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTags'] to see the possible values for this operation
     *
     * @throws \Squidex/Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array<string,int>|\Squidex/Client\Model\ErrorDto
     */
    public function getTags(string $contentType = self::contentTypes['getTags'][0])
    {
        list($response) = $this->getTagsWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getTagsWithHttpInfo
     *
     * Get assets tags.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTags'] to see the possible values for this operation
     *
     * @throws \Squidex/Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of array<string,int>|\Squidex/Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTagsWithHttpInfo(string $contentType = self::contentTypes['getTags'][0])
    {
        $request = $this->getTagsRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('array<string,int>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,int>' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,int>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Squidex/Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex/Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex/Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'array<string,int>';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,int>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex/Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTagsAsync
     *
     * Get assets tags.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTags'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTagsAsync(string $contentType = self::contentTypes['getTags'][0])
    {
        return $this->getTagsAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTagsAsyncWithHttpInfo
     *
     * Get assets tags.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTags'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTagsAsyncWithHttpInfo(string $contentType = self::contentTypes['getTags'][0])
    {
        $returnType = 'array<string,int>';
        $request = $this->getTagsRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTags'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTags'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTagsRequest(string $contentType = self::contentTypes['getTags'][0])
    {

        // verify the required parameter 'app' is set
        $app = $this->options['appName'];
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling '
            );
        }


        $resourcePath = '/api/apps/{app}/assets/tags';
        $formParams = [];
        $queryParams = [];
        $headerParams = $this->getAuthorizationHeader();
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postAsset
     *
     * Upload a new asset.
     *
     * @param  string $parent_id The optional parent folder id. (optional)
     * @param  string $id The optional custom asset id. (optional)
     * @param  bool $duplicate True to duplicate the asset, event if the file has been uploaded. (optional)
     * @param  \SplFileObject $file file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAsset'] to see the possible values for this operation
     *
     * @throws \Squidex/Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Squidex/Client\Model\AssetDto|\Squidex/Client\Model\ErrorDto|\Squidex/Client\Model\ErrorDto|\Squidex/Client\Model\ErrorDto
     */
    public function postAsset($parent_id = null, $id = null, $duplicate = null, $file = null, string $contentType = self::contentTypes['postAsset'][0])
    {
        list($response) = $this->postAssetWithHttpInfo($parent_id, $id, $duplicate, $file, $contentType);
        return $response;
    }

    /**
     * Operation postAssetWithHttpInfo
     *
     * Upload a new asset.
     *
     * @param  string $parent_id The optional parent folder id. (optional)
     * @param  string $id The optional custom asset id. (optional)
     * @param  bool $duplicate True to duplicate the asset, event if the file has been uploaded. (optional)
     * @param  \SplFileObject $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAsset'] to see the possible values for this operation
     *
     * @throws \Squidex/Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Squidex/Client\Model\AssetDto|\Squidex/Client\Model\ErrorDto|\Squidex/Client\Model\ErrorDto|\Squidex/Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function postAssetWithHttpInfo($parent_id = null, $id = null, $duplicate = null, $file = null, string $contentType = self::contentTypes['postAsset'][0])
    {
        $request = $this->postAssetRequest($parent_id, $id, $duplicate, $file, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Squidex/Client\Model\AssetDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex/Client\Model\AssetDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex/Client\Model\AssetDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Squidex/Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex/Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex/Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                    if ('\Squidex/Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex/Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex/Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Squidex/Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex/Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex/Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Squidex/Client\Model\AssetDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex/Client\Model\AssetDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex/Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex/Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex/Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postAssetAsync
     *
     * Upload a new asset.
     *
     * @param  string $parent_id The optional parent folder id. (optional)
     * @param  string $id The optional custom asset id. (optional)
     * @param  bool $duplicate True to duplicate the asset, event if the file has been uploaded. (optional)
     * @param  \SplFileObject $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAsset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postAssetAsync($parent_id = null, $id = null, $duplicate = null, $file = null, string $contentType = self::contentTypes['postAsset'][0])
    {
        return $this->postAssetAsyncWithHttpInfo($parent_id, $id, $duplicate, $file, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postAssetAsyncWithHttpInfo
     *
     * Upload a new asset.
     *
     * @param  string $parent_id The optional parent folder id. (optional)
     * @param  string $id The optional custom asset id. (optional)
     * @param  bool $duplicate True to duplicate the asset, event if the file has been uploaded. (optional)
     * @param  \SplFileObject $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAsset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postAssetAsyncWithHttpInfo($parent_id = null, $id = null, $duplicate = null, $file = null, string $contentType = self::contentTypes['postAsset'][0])
    {
        $returnType = '\Squidex/Client\Model\AssetDto';
        $request = $this->postAssetRequest($parent_id, $id, $duplicate, $file, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postAsset'
     *
     * @param  string $parent_id The optional parent folder id. (optional)
     * @param  string $id The optional custom asset id. (optional)
     * @param  bool $duplicate True to duplicate the asset, event if the file has been uploaded. (optional)
     * @param  \SplFileObject $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAsset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postAssetRequest($parent_id = null, $id = null, $duplicate = null, $file = null, string $contentType = self::contentTypes['postAsset'][0])
    {

        // verify the required parameter 'app' is set
        $app = $this->options['appName'];
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling '
            );
        }






        $resourcePath = '/api/apps/{app}/assets';
        $formParams = [];
        $queryParams = [];
        $headerParams = $this->getAuthorizationHeader();
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $parent_id,
            'parentId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $duplicate,
            'duplicate', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);



        // form params
        if ($file !== null) {
            $multipart = true;
            $formParams['file'] = [];
            $paramFiles = is_array($file) ? $file : [$file];
            foreach ($paramFiles as $paramFile) {
                $formParams['file'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postUpsertAsset
     *
     * Upsert an asset.
     *
     * @param  string $id The optional custom asset id. (required)
     * @param  string $parent_id The optional parent folder id. (optional)
     * @param  bool $duplicate True to duplicate the asset, event if the file has been uploaded. (optional)
     * @param  \SplFileObject $file file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postUpsertAsset'] to see the possible values for this operation
     *
     * @throws \Squidex/Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Squidex/Client\Model\AssetDto|\Squidex/Client\Model\ErrorDto|\Squidex/Client\Model\ErrorDto|\Squidex/Client\Model\ErrorDto
     */
    public function postUpsertAsset($id, $parent_id = null, $duplicate = null, $file = null, string $contentType = self::contentTypes['postUpsertAsset'][0])
    {
        list($response) = $this->postUpsertAssetWithHttpInfo($id, $parent_id, $duplicate, $file, $contentType);
        return $response;
    }

    /**
     * Operation postUpsertAssetWithHttpInfo
     *
     * Upsert an asset.
     *
     * @param  string $id The optional custom asset id. (required)
     * @param  string $parent_id The optional parent folder id. (optional)
     * @param  bool $duplicate True to duplicate the asset, event if the file has been uploaded. (optional)
     * @param  \SplFileObject $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postUpsertAsset'] to see the possible values for this operation
     *
     * @throws \Squidex/Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Squidex/Client\Model\AssetDto|\Squidex/Client\Model\ErrorDto|\Squidex/Client\Model\ErrorDto|\Squidex/Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function postUpsertAssetWithHttpInfo($id, $parent_id = null, $duplicate = null, $file = null, string $contentType = self::contentTypes['postUpsertAsset'][0])
    {
        $request = $this->postUpsertAssetRequest($id, $parent_id, $duplicate, $file, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Squidex/Client\Model\AssetDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex/Client\Model\AssetDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex/Client\Model\AssetDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Squidex/Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex/Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex/Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                    if ('\Squidex/Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex/Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex/Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Squidex/Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex/Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex/Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Squidex/Client\Model\AssetDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex/Client\Model\AssetDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex/Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex/Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex/Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postUpsertAssetAsync
     *
     * Upsert an asset.
     *
     * @param  string $id The optional custom asset id. (required)
     * @param  string $parent_id The optional parent folder id. (optional)
     * @param  bool $duplicate True to duplicate the asset, event if the file has been uploaded. (optional)
     * @param  \SplFileObject $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postUpsertAsset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postUpsertAssetAsync($id, $parent_id = null, $duplicate = null, $file = null, string $contentType = self::contentTypes['postUpsertAsset'][0])
    {
        return $this->postUpsertAssetAsyncWithHttpInfo($id, $parent_id, $duplicate, $file, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postUpsertAssetAsyncWithHttpInfo
     *
     * Upsert an asset.
     *
     * @param  string $id The optional custom asset id. (required)
     * @param  string $parent_id The optional parent folder id. (optional)
     * @param  bool $duplicate True to duplicate the asset, event if the file has been uploaded. (optional)
     * @param  \SplFileObject $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postUpsertAsset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postUpsertAssetAsyncWithHttpInfo($id, $parent_id = null, $duplicate = null, $file = null, string $contentType = self::contentTypes['postUpsertAsset'][0])
    {
        $returnType = '\Squidex/Client\Model\AssetDto';
        $request = $this->postUpsertAssetRequest($id, $parent_id, $duplicate, $file, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postUpsertAsset'
     *
     * @param  string $id The optional custom asset id. (required)
     * @param  string $parent_id The optional parent folder id. (optional)
     * @param  bool $duplicate True to duplicate the asset, event if the file has been uploaded. (optional)
     * @param  \SplFileObject $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postUpsertAsset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postUpsertAssetRequest($id, $parent_id = null, $duplicate = null, $file = null, string $contentType = self::contentTypes['postUpsertAsset'][0])
    {

        // verify the required parameter 'app' is set
        $app = $this->options['appName'];
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling '
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling '
            );
        }





        $resourcePath = '/api/apps/{app}/assets/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = $this->getAuthorizationHeader();
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $parent_id,
            'parentId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $duplicate,
            'duplicate', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // form params
        if ($file !== null) {
            $multipart = true;
            $formParams['file'] = [];
            $paramFiles = is_array($file) ? $file : [$file];
            foreach ($paramFiles as $paramFile) {
                $formParams['file'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putAsset
     *
     * Update an asset.
     *
     * @param  string $id The ID of the asset. (required)
     * @param  \Squidex/Client\Model\AnnotateAssetDto $annotate_asset_dto The asset object that needs to updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putAsset'] to see the possible values for this operation
     *
     * @throws \Squidex/Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Squidex/Client\Model\AssetDto|\Squidex/Client\Model\ErrorDto|\Squidex/Client\Model\ErrorDto
     */
    public function putAsset($id, $annotate_asset_dto, string $contentType = self::contentTypes['putAsset'][0])
    {
        list($response) = $this->putAssetWithHttpInfo($id, $annotate_asset_dto, $contentType);
        return $response;
    }

    /**
     * Operation putAssetWithHttpInfo
     *
     * Update an asset.
     *
     * @param  string $id The ID of the asset. (required)
     * @param  \Squidex/Client\Model\AnnotateAssetDto $annotate_asset_dto The asset object that needs to updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putAsset'] to see the possible values for this operation
     *
     * @throws \Squidex/Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Squidex/Client\Model\AssetDto|\Squidex/Client\Model\ErrorDto|\Squidex/Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function putAssetWithHttpInfo($id, $annotate_asset_dto, string $contentType = self::contentTypes['putAsset'][0])
    {
        $request = $this->putAssetRequest($id, $annotate_asset_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Squidex/Client\Model\AssetDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex/Client\Model\AssetDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex/Client\Model\AssetDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Squidex/Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex/Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex/Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Squidex/Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex/Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex/Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Squidex/Client\Model\AssetDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex/Client\Model\AssetDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex/Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex/Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putAssetAsync
     *
     * Update an asset.
     *
     * @param  string $id The ID of the asset. (required)
     * @param  \Squidex/Client\Model\AnnotateAssetDto $annotate_asset_dto The asset object that needs to updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putAsset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putAssetAsync($id, $annotate_asset_dto, string $contentType = self::contentTypes['putAsset'][0])
    {
        return $this->putAssetAsyncWithHttpInfo($id, $annotate_asset_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putAssetAsyncWithHttpInfo
     *
     * Update an asset.
     *
     * @param  string $id The ID of the asset. (required)
     * @param  \Squidex/Client\Model\AnnotateAssetDto $annotate_asset_dto The asset object that needs to updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putAsset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putAssetAsyncWithHttpInfo($id, $annotate_asset_dto, string $contentType = self::contentTypes['putAsset'][0])
    {
        $returnType = '\Squidex/Client\Model\AssetDto';
        $request = $this->putAssetRequest($id, $annotate_asset_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putAsset'
     *
     * @param  string $id The ID of the asset. (required)
     * @param  \Squidex/Client\Model\AnnotateAssetDto $annotate_asset_dto The asset object that needs to updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putAsset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putAssetRequest($id, $annotate_asset_dto, string $contentType = self::contentTypes['putAsset'][0])
    {

        // verify the required parameter 'app' is set
        $app = $this->options['appName'];
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling '
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling '
            );
        }

        // verify the required parameter 'annotate_asset_dto' is set
        if ($annotate_asset_dto === null || (is_array($annotate_asset_dto) && count($annotate_asset_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $annotate_asset_dto when calling '
            );
        }


        $resourcePath = '/api/apps/{app}/assets/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = $this->getAuthorizationHeader();
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($annotate_asset_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($annotate_asset_dto));
            } else {
                $httpBody = $annotate_asset_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putAssetContent
     *
     * Replace asset content.
     *
     * @param  string $id The ID of the asset. (required)
     * @param  \SplFileObject $file file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putAssetContent'] to see the possible values for this operation
     *
     * @throws \Squidex/Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Squidex/Client\Model\AssetDto|\Squidex/Client\Model\ErrorDto|\Squidex/Client\Model\ErrorDto|\Squidex/Client\Model\ErrorDto
     */
    public function putAssetContent($id, $file = null, string $contentType = self::contentTypes['putAssetContent'][0])
    {
        list($response) = $this->putAssetContentWithHttpInfo($id, $file, $contentType);
        return $response;
    }

    /**
     * Operation putAssetContentWithHttpInfo
     *
     * Replace asset content.
     *
     * @param  string $id The ID of the asset. (required)
     * @param  \SplFileObject $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putAssetContent'] to see the possible values for this operation
     *
     * @throws \Squidex/Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Squidex/Client\Model\AssetDto|\Squidex/Client\Model\ErrorDto|\Squidex/Client\Model\ErrorDto|\Squidex/Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function putAssetContentWithHttpInfo($id, $file = null, string $contentType = self::contentTypes['putAssetContent'][0])
    {
        $request = $this->putAssetContentRequest($id, $file, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Squidex/Client\Model\AssetDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex/Client\Model\AssetDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex/Client\Model\AssetDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Squidex/Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex/Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex/Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                    if ('\Squidex/Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex/Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex/Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Squidex/Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex/Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex/Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Squidex/Client\Model\AssetDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex/Client\Model\AssetDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex/Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex/Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex/Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putAssetContentAsync
     *
     * Replace asset content.
     *
     * @param  string $id The ID of the asset. (required)
     * @param  \SplFileObject $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putAssetContent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putAssetContentAsync($id, $file = null, string $contentType = self::contentTypes['putAssetContent'][0])
    {
        return $this->putAssetContentAsyncWithHttpInfo($id, $file, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putAssetContentAsyncWithHttpInfo
     *
     * Replace asset content.
     *
     * @param  string $id The ID of the asset. (required)
     * @param  \SplFileObject $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putAssetContent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putAssetContentAsyncWithHttpInfo($id, $file = null, string $contentType = self::contentTypes['putAssetContent'][0])
    {
        $returnType = '\Squidex/Client\Model\AssetDto';
        $request = $this->putAssetContentRequest($id, $file, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putAssetContent'
     *
     * @param  string $id The ID of the asset. (required)
     * @param  \SplFileObject $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putAssetContent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putAssetContentRequest($id, $file = null, string $contentType = self::contentTypes['putAssetContent'][0])
    {

        // verify the required parameter 'app' is set
        $app = $this->options['appName'];
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling '
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling '
            );
        }



        $resourcePath = '/api/apps/{app}/assets/{id}/content';
        $formParams = [];
        $queryParams = [];
        $headerParams = $this->getAuthorizationHeader();
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // form params
        if ($file !== null) {
            $multipart = true;
            $formParams['file'] = [];
            $paramFiles = is_array($file) ? $file : [$file];
            foreach ($paramFiles as $paramFile) {
                $formParams['file'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putAssetParent
     *
     * Moves the asset.
     *
     * @param  string $id The ID of the asset. (required)
     * @param  \Squidex/Client\Model\MoveAssetDto $move_asset_dto The asset object that needs to updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putAssetParent'] to see the possible values for this operation
     *
     * @throws \Squidex/Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Squidex/Client\Model\AssetDto|\Squidex/Client\Model\ErrorDto|\Squidex/Client\Model\ErrorDto
     */
    public function putAssetParent($id, $move_asset_dto, string $contentType = self::contentTypes['putAssetParent'][0])
    {
        list($response) = $this->putAssetParentWithHttpInfo($id, $move_asset_dto, $contentType);
        return $response;
    }

    /**
     * Operation putAssetParentWithHttpInfo
     *
     * Moves the asset.
     *
     * @param  string $id The ID of the asset. (required)
     * @param  \Squidex/Client\Model\MoveAssetDto $move_asset_dto The asset object that needs to updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putAssetParent'] to see the possible values for this operation
     *
     * @throws \Squidex/Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Squidex/Client\Model\AssetDto|\Squidex/Client\Model\ErrorDto|\Squidex/Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function putAssetParentWithHttpInfo($id, $move_asset_dto, string $contentType = self::contentTypes['putAssetParent'][0])
    {
        $request = $this->putAssetParentRequest($id, $move_asset_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Squidex/Client\Model\AssetDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex/Client\Model\AssetDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex/Client\Model\AssetDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Squidex/Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex/Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex/Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Squidex/Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex/Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex/Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Squidex/Client\Model\AssetDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex/Client\Model\AssetDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex/Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex/Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putAssetParentAsync
     *
     * Moves the asset.
     *
     * @param  string $id The ID of the asset. (required)
     * @param  \Squidex/Client\Model\MoveAssetDto $move_asset_dto The asset object that needs to updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putAssetParent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putAssetParentAsync($id, $move_asset_dto, string $contentType = self::contentTypes['putAssetParent'][0])
    {
        return $this->putAssetParentAsyncWithHttpInfo($id, $move_asset_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putAssetParentAsyncWithHttpInfo
     *
     * Moves the asset.
     *
     * @param  string $id The ID of the asset. (required)
     * @param  \Squidex/Client\Model\MoveAssetDto $move_asset_dto The asset object that needs to updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putAssetParent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putAssetParentAsyncWithHttpInfo($id, $move_asset_dto, string $contentType = self::contentTypes['putAssetParent'][0])
    {
        $returnType = '\Squidex/Client\Model\AssetDto';
        $request = $this->putAssetParentRequest($id, $move_asset_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putAssetParent'
     *
     * @param  string $id The ID of the asset. (required)
     * @param  \Squidex/Client\Model\MoveAssetDto $move_asset_dto The asset object that needs to updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putAssetParent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putAssetParentRequest($id, $move_asset_dto, string $contentType = self::contentTypes['putAssetParent'][0])
    {

        // verify the required parameter 'app' is set
        $app = $this->options['appName'];
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling '
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling '
            );
        }

        // verify the required parameter 'move_asset_dto' is set
        if ($move_asset_dto === null || (is_array($move_asset_dto) && count($move_asset_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $move_asset_dto when calling '
            );
        }


        $resourcePath = '/api/apps/{app}/assets/{id}/parent';
        $formParams = [];
        $queryParams = [];
        $headerParams = $this->getAuthorizationHeader();
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($move_asset_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($move_asset_dto));
            } else {
                $httpBody = $move_asset_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putTag
     *
     * Rename an asset tag.
     *
     * @param  string $name The tag to return. (required)
     * @param  \Squidex/Client\Model\RenameTagDto $rename_tag_dto The required request object. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putTag'] to see the possible values for this operation
     *
     * @throws \Squidex/Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array<string,int>|\Squidex/Client\Model\ErrorDto|\Squidex/Client\Model\ErrorDto
     */
    public function putTag($name, $rename_tag_dto, string $contentType = self::contentTypes['putTag'][0])
    {
        list($response) = $this->putTagWithHttpInfo($name, $rename_tag_dto, $contentType);
        return $response;
    }

    /**
     * Operation putTagWithHttpInfo
     *
     * Rename an asset tag.
     *
     * @param  string $name The tag to return. (required)
     * @param  \Squidex/Client\Model\RenameTagDto $rename_tag_dto The required request object. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putTag'] to see the possible values for this operation
     *
     * @throws \Squidex/Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of array<string,int>|\Squidex/Client\Model\ErrorDto|\Squidex/Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function putTagWithHttpInfo($name, $rename_tag_dto, string $contentType = self::contentTypes['putTag'][0])
    {
        $request = $this->putTagRequest($name, $rename_tag_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('array<string,int>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,int>' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,int>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Squidex/Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex/Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex/Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Squidex/Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Squidex/Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Squidex/Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'array<string,int>';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,int>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex/Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Squidex/Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putTagAsync
     *
     * Rename an asset tag.
     *
     * @param  string $name The tag to return. (required)
     * @param  \Squidex/Client\Model\RenameTagDto $rename_tag_dto The required request object. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putTag'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putTagAsync($name, $rename_tag_dto, string $contentType = self::contentTypes['putTag'][0])
    {
        return $this->putTagAsyncWithHttpInfo($name, $rename_tag_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putTagAsyncWithHttpInfo
     *
     * Rename an asset tag.
     *
     * @param  string $name The tag to return. (required)
     * @param  \Squidex/Client\Model\RenameTagDto $rename_tag_dto The required request object. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putTag'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putTagAsyncWithHttpInfo($name, $rename_tag_dto, string $contentType = self::contentTypes['putTag'][0])
    {
        $returnType = 'array<string,int>';
        $request = $this->putTagRequest($name, $rename_tag_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putTag'
     *
     * @param  string $name The tag to return. (required)
     * @param  \Squidex/Client\Model\RenameTagDto $rename_tag_dto The required request object. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putTag'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putTagRequest($name, $rename_tag_dto, string $contentType = self::contentTypes['putTag'][0])
    {

        // verify the required parameter 'app' is set
        $app = $this->options['appName'];
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling '
            );
        }

        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling '
            );
        }

        // verify the required parameter 'rename_tag_dto' is set
        if ($rename_tag_dto === null || (is_array($rename_tag_dto) && count($rename_tag_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rename_tag_dto when calling '
            );
        }


        $resourcePath = '/api/apps/{app}/assets/tags/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = $this->getAuthorizationHeader();
        $httpBody = '';
        $multipart = false;



        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($rename_tag_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($rename_tag_dto));
            } else {
                $httpBody = $rename_tag_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    /**
     * @return array
     */
    protected function getAuthorizationHeader()
    {
        return ['Authorization' => 'Bearer '.$this->options['access_token']];
    }
}
