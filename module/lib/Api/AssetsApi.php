<?php
/**
 * AssetsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Squidex API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * AssetsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AssetsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'assetContentGetAssetContent' => [
            'application/json',
        ],
        'assetContentGetAssetContentBySlug' => [
            'application/json',
        ],
        'assetFoldersDeleteAssetFolder' => [
            'application/json',
        ],
        'assetFoldersGetAssetFolders' => [
            'application/json',
        ],
        'assetFoldersPostAssetFolder' => [
            'application/json',
        ],
        'assetFoldersPutAssetFolder' => [
            'application/json',
        ],
        'assetFoldersPutAssetFolderParent' => [
            'application/json',
        ],
        'assetsBulkUpdateAssets' => [
            'application/json',
        ],
        'assetsDeleteAsset' => [
            'application/json',
        ],
        'assetsGetAsset' => [
            'application/json',
        ],
        'assetsGetAssets' => [
            'application/json',
        ],
        'assetsGetAssetsPost' => [
            'application/json',
        ],
        'assetsGetTags' => [
            'application/json',
        ],
        'assetsPostAsset' => [
            'multipart/form-data',
        ],
        'assetsPostUpsertAsset' => [
            'multipart/form-data',
        ],
        'assetsPutAsset' => [
            'application/json',
        ],
        'assetsPutAssetContent' => [
            'multipart/form-data',
        ],
        'assetsPutAssetParent' => [
            'application/json',
        ],
        'assetsPutTag' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation assetContentGetAssetContent
     *
     * Get the asset content.
     *
     * @param  string $id The ID of the asset. (required)
     * @param  int $version The optional version of the asset. (optional)
     * @param  int $cache The cache duration in seconds. (optional)
     * @param  int $download Set it to 0 to prevent download. (optional)
     * @param  int $width The target width of the asset, if it is an image. (optional)
     * @param  int $height The target height of the asset, if it is an image. (optional)
     * @param  int $quality Optional image quality, it is is an jpeg image. (optional)
     * @param  ResizeMode $mode The resize mode when the width and height is defined. (optional)
     * @param  string $bg Optional background color. (optional)
     * @param  float $focus_x Override the y focus point. (optional)
     * @param  float $focus_y Override the x focus point. (optional)
     * @param  bool $nofocus True to ignore the asset focus point if any. (optional)
     * @param  bool $auto True to use auto format. (optional)
     * @param  bool $force True to force a new resize even if it already stored. (optional)
     * @param  ImageFormat $format True to force a new resize even if it already stored. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetContentGetAssetContent'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject|\OpenAPI\Client\Model\ErrorDto
     * @deprecated
     */
    public function assetContentGetAssetContent($id, $version = null, $cache = null, $download = null, $width = null, $height = null, $quality = null, $mode = null, $bg = null, $focus_x = null, $focus_y = null, $nofocus = null, $auto = null, $force = null, $format = null, string $contentType = self::contentTypes['assetContentGetAssetContent'][0])
    {
        list($response) = $this->assetContentGetAssetContentWithHttpInfo($id, $version, $cache, $download, $width, $height, $quality, $mode, $bg, $focus_x, $focus_y, $nofocus, $auto, $force, $format, $contentType);
        return $response;
    }

    /**
     * Operation assetContentGetAssetContentWithHttpInfo
     *
     * Get the asset content.
     *
     * @param  string $id The ID of the asset. (required)
     * @param  int $version The optional version of the asset. (optional)
     * @param  int $cache The cache duration in seconds. (optional)
     * @param  int $download Set it to 0 to prevent download. (optional)
     * @param  int $width The target width of the asset, if it is an image. (optional)
     * @param  int $height The target height of the asset, if it is an image. (optional)
     * @param  int $quality Optional image quality, it is is an jpeg image. (optional)
     * @param  ResizeMode $mode The resize mode when the width and height is defined. (optional)
     * @param  string $bg Optional background color. (optional)
     * @param  float $focus_x Override the y focus point. (optional)
     * @param  float $focus_y Override the x focus point. (optional)
     * @param  bool $nofocus True to ignore the asset focus point if any. (optional)
     * @param  bool $auto True to use auto format. (optional)
     * @param  bool $force True to force a new resize even if it already stored. (optional)
     * @param  ImageFormat $format True to force a new resize even if it already stored. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetContentGetAssetContent'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject|\OpenAPI\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function assetContentGetAssetContentWithHttpInfo($id, $version = null, $cache = null, $download = null, $width = null, $height = null, $quality = null, $mode = null, $bg = null, $focus_x = null, $focus_y = null, $nofocus = null, $auto = null, $force = null, $format = null, string $contentType = self::contentTypes['assetContentGetAssetContent'][0])
    {
        $request = $this->assetContentGetAssetContentRequest($id, $version, $cache, $download, $width, $height, $quality, $mode, $bg, $focus_x, $focus_y, $nofocus, $auto, $force, $format, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation assetContentGetAssetContentAsync
     *
     * Get the asset content.
     *
     * @param  string $id The ID of the asset. (required)
     * @param  int $version The optional version of the asset. (optional)
     * @param  int $cache The cache duration in seconds. (optional)
     * @param  int $download Set it to 0 to prevent download. (optional)
     * @param  int $width The target width of the asset, if it is an image. (optional)
     * @param  int $height The target height of the asset, if it is an image. (optional)
     * @param  int $quality Optional image quality, it is is an jpeg image. (optional)
     * @param  ResizeMode $mode The resize mode when the width and height is defined. (optional)
     * @param  string $bg Optional background color. (optional)
     * @param  float $focus_x Override the y focus point. (optional)
     * @param  float $focus_y Override the x focus point. (optional)
     * @param  bool $nofocus True to ignore the asset focus point if any. (optional)
     * @param  bool $auto True to use auto format. (optional)
     * @param  bool $force True to force a new resize even if it already stored. (optional)
     * @param  ImageFormat $format True to force a new resize even if it already stored. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetContentGetAssetContent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function assetContentGetAssetContentAsync($id, $version = null, $cache = null, $download = null, $width = null, $height = null, $quality = null, $mode = null, $bg = null, $focus_x = null, $focus_y = null, $nofocus = null, $auto = null, $force = null, $format = null, string $contentType = self::contentTypes['assetContentGetAssetContent'][0])
    {
        return $this->assetContentGetAssetContentAsyncWithHttpInfo($id, $version, $cache, $download, $width, $height, $quality, $mode, $bg, $focus_x, $focus_y, $nofocus, $auto, $force, $format, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation assetContentGetAssetContentAsyncWithHttpInfo
     *
     * Get the asset content.
     *
     * @param  string $id The ID of the asset. (required)
     * @param  int $version The optional version of the asset. (optional)
     * @param  int $cache The cache duration in seconds. (optional)
     * @param  int $download Set it to 0 to prevent download. (optional)
     * @param  int $width The target width of the asset, if it is an image. (optional)
     * @param  int $height The target height of the asset, if it is an image. (optional)
     * @param  int $quality Optional image quality, it is is an jpeg image. (optional)
     * @param  ResizeMode $mode The resize mode when the width and height is defined. (optional)
     * @param  string $bg Optional background color. (optional)
     * @param  float $focus_x Override the y focus point. (optional)
     * @param  float $focus_y Override the x focus point. (optional)
     * @param  bool $nofocus True to ignore the asset focus point if any. (optional)
     * @param  bool $auto True to use auto format. (optional)
     * @param  bool $force True to force a new resize even if it already stored. (optional)
     * @param  ImageFormat $format True to force a new resize even if it already stored. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetContentGetAssetContent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function assetContentGetAssetContentAsyncWithHttpInfo($id, $version = null, $cache = null, $download = null, $width = null, $height = null, $quality = null, $mode = null, $bg = null, $focus_x = null, $focus_y = null, $nofocus = null, $auto = null, $force = null, $format = null, string $contentType = self::contentTypes['assetContentGetAssetContent'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->assetContentGetAssetContentRequest($id, $version, $cache, $download, $width, $height, $quality, $mode, $bg, $focus_x, $focus_y, $nofocus, $auto, $force, $format, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'assetContentGetAssetContent'
     *
     * @param  string $id The ID of the asset. (required)
     * @param  int $version The optional version of the asset. (optional)
     * @param  int $cache The cache duration in seconds. (optional)
     * @param  int $download Set it to 0 to prevent download. (optional)
     * @param  int $width The target width of the asset, if it is an image. (optional)
     * @param  int $height The target height of the asset, if it is an image. (optional)
     * @param  int $quality Optional image quality, it is is an jpeg image. (optional)
     * @param  ResizeMode $mode The resize mode when the width and height is defined. (optional)
     * @param  string $bg Optional background color. (optional)
     * @param  float $focus_x Override the y focus point. (optional)
     * @param  float $focus_y Override the x focus point. (optional)
     * @param  bool $nofocus True to ignore the asset focus point if any. (optional)
     * @param  bool $auto True to use auto format. (optional)
     * @param  bool $force True to force a new resize even if it already stored. (optional)
     * @param  ImageFormat $format True to force a new resize even if it already stored. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetContentGetAssetContent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function assetContentGetAssetContentRequest($id, $version = null, $cache = null, $download = null, $width = null, $height = null, $quality = null, $mode = null, $bg = null, $focus_x = null, $focus_y = null, $nofocus = null, $auto = null, $force = null, $format = null, string $contentType = self::contentTypes['assetContentGetAssetContent'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling assetContentGetAssetContent'
            );
        }
















        $resourcePath = '/api/assets/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $version,
            'version', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cache,
            'cache', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $download,
            'download', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $width,
            'width', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $height,
            'height', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $quality,
            'quality', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $mode,
            'mode', // param base name
            'ResizeMode', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $bg,
            'bg', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $focus_x,
            'focusX', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $focus_y,
            'focusY', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $nofocus,
            'nofocus', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $auto,
            'auto', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $force,
            'force', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $format,
            'format', // param base name
            'ImageFormat', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/octet-stream', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation assetContentGetAssetContentBySlug
     *
     * Get the asset content.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $id_or_slug The id or slug of the asset. (required)
     * @param  string $more Optional suffix that can be used to seo-optimize the link to the image Has not effect. (required)
     * @param  int $version The optional version of the asset. (optional)
     * @param  int $cache The cache duration in seconds. (optional)
     * @param  int $download Set it to 0 to prevent download. (optional)
     * @param  int $width The target width of the asset, if it is an image. (optional)
     * @param  int $height The target height of the asset, if it is an image. (optional)
     * @param  int $quality Optional image quality, it is is an jpeg image. (optional)
     * @param  ResizeMode $mode The resize mode when the width and height is defined. (optional)
     * @param  string $bg Optional background color. (optional)
     * @param  float $focus_x Override the y focus point. (optional)
     * @param  float $focus_y Override the x focus point. (optional)
     * @param  bool $nofocus True to ignore the asset focus point if any. (optional)
     * @param  bool $auto True to use auto format. (optional)
     * @param  bool $force True to force a new resize even if it already stored. (optional)
     * @param  ImageFormat $format True to force a new resize even if it already stored. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetContentGetAssetContentBySlug'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject|\OpenAPI\Client\Model\ErrorDto
     */
    public function assetContentGetAssetContentBySlug($app, $id_or_slug, $more, $version = null, $cache = null, $download = null, $width = null, $height = null, $quality = null, $mode = null, $bg = null, $focus_x = null, $focus_y = null, $nofocus = null, $auto = null, $force = null, $format = null, string $contentType = self::contentTypes['assetContentGetAssetContentBySlug'][0])
    {
        list($response) = $this->assetContentGetAssetContentBySlugWithHttpInfo($app, $id_or_slug, $more, $version, $cache, $download, $width, $height, $quality, $mode, $bg, $focus_x, $focus_y, $nofocus, $auto, $force, $format, $contentType);
        return $response;
    }

    /**
     * Operation assetContentGetAssetContentBySlugWithHttpInfo
     *
     * Get the asset content.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $id_or_slug The id or slug of the asset. (required)
     * @param  string $more Optional suffix that can be used to seo-optimize the link to the image Has not effect. (required)
     * @param  int $version The optional version of the asset. (optional)
     * @param  int $cache The cache duration in seconds. (optional)
     * @param  int $download Set it to 0 to prevent download. (optional)
     * @param  int $width The target width of the asset, if it is an image. (optional)
     * @param  int $height The target height of the asset, if it is an image. (optional)
     * @param  int $quality Optional image quality, it is is an jpeg image. (optional)
     * @param  ResizeMode $mode The resize mode when the width and height is defined. (optional)
     * @param  string $bg Optional background color. (optional)
     * @param  float $focus_x Override the y focus point. (optional)
     * @param  float $focus_y Override the x focus point. (optional)
     * @param  bool $nofocus True to ignore the asset focus point if any. (optional)
     * @param  bool $auto True to use auto format. (optional)
     * @param  bool $force True to force a new resize even if it already stored. (optional)
     * @param  ImageFormat $format True to force a new resize even if it already stored. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetContentGetAssetContentBySlug'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject|\OpenAPI\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetContentGetAssetContentBySlugWithHttpInfo($app, $id_or_slug, $more, $version = null, $cache = null, $download = null, $width = null, $height = null, $quality = null, $mode = null, $bg = null, $focus_x = null, $focus_y = null, $nofocus = null, $auto = null, $force = null, $format = null, string $contentType = self::contentTypes['assetContentGetAssetContentBySlug'][0])
    {
        $request = $this->assetContentGetAssetContentBySlugRequest($app, $id_or_slug, $more, $version, $cache, $download, $width, $height, $quality, $mode, $bg, $focus_x, $focus_y, $nofocus, $auto, $force, $format, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation assetContentGetAssetContentBySlugAsync
     *
     * Get the asset content.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $id_or_slug The id or slug of the asset. (required)
     * @param  string $more Optional suffix that can be used to seo-optimize the link to the image Has not effect. (required)
     * @param  int $version The optional version of the asset. (optional)
     * @param  int $cache The cache duration in seconds. (optional)
     * @param  int $download Set it to 0 to prevent download. (optional)
     * @param  int $width The target width of the asset, if it is an image. (optional)
     * @param  int $height The target height of the asset, if it is an image. (optional)
     * @param  int $quality Optional image quality, it is is an jpeg image. (optional)
     * @param  ResizeMode $mode The resize mode when the width and height is defined. (optional)
     * @param  string $bg Optional background color. (optional)
     * @param  float $focus_x Override the y focus point. (optional)
     * @param  float $focus_y Override the x focus point. (optional)
     * @param  bool $nofocus True to ignore the asset focus point if any. (optional)
     * @param  bool $auto True to use auto format. (optional)
     * @param  bool $force True to force a new resize even if it already stored. (optional)
     * @param  ImageFormat $format True to force a new resize even if it already stored. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetContentGetAssetContentBySlug'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assetContentGetAssetContentBySlugAsync($app, $id_or_slug, $more, $version = null, $cache = null, $download = null, $width = null, $height = null, $quality = null, $mode = null, $bg = null, $focus_x = null, $focus_y = null, $nofocus = null, $auto = null, $force = null, $format = null, string $contentType = self::contentTypes['assetContentGetAssetContentBySlug'][0])
    {
        return $this->assetContentGetAssetContentBySlugAsyncWithHttpInfo($app, $id_or_slug, $more, $version, $cache, $download, $width, $height, $quality, $mode, $bg, $focus_x, $focus_y, $nofocus, $auto, $force, $format, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation assetContentGetAssetContentBySlugAsyncWithHttpInfo
     *
     * Get the asset content.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $id_or_slug The id or slug of the asset. (required)
     * @param  string $more Optional suffix that can be used to seo-optimize the link to the image Has not effect. (required)
     * @param  int $version The optional version of the asset. (optional)
     * @param  int $cache The cache duration in seconds. (optional)
     * @param  int $download Set it to 0 to prevent download. (optional)
     * @param  int $width The target width of the asset, if it is an image. (optional)
     * @param  int $height The target height of the asset, if it is an image. (optional)
     * @param  int $quality Optional image quality, it is is an jpeg image. (optional)
     * @param  ResizeMode $mode The resize mode when the width and height is defined. (optional)
     * @param  string $bg Optional background color. (optional)
     * @param  float $focus_x Override the y focus point. (optional)
     * @param  float $focus_y Override the x focus point. (optional)
     * @param  bool $nofocus True to ignore the asset focus point if any. (optional)
     * @param  bool $auto True to use auto format. (optional)
     * @param  bool $force True to force a new resize even if it already stored. (optional)
     * @param  ImageFormat $format True to force a new resize even if it already stored. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetContentGetAssetContentBySlug'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assetContentGetAssetContentBySlugAsyncWithHttpInfo($app, $id_or_slug, $more, $version = null, $cache = null, $download = null, $width = null, $height = null, $quality = null, $mode = null, $bg = null, $focus_x = null, $focus_y = null, $nofocus = null, $auto = null, $force = null, $format = null, string $contentType = self::contentTypes['assetContentGetAssetContentBySlug'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->assetContentGetAssetContentBySlugRequest($app, $id_or_slug, $more, $version, $cache, $download, $width, $height, $quality, $mode, $bg, $focus_x, $focus_y, $nofocus, $auto, $force, $format, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'assetContentGetAssetContentBySlug'
     *
     * @param  string $app The name of the app. (required)
     * @param  string $id_or_slug The id or slug of the asset. (required)
     * @param  string $more Optional suffix that can be used to seo-optimize the link to the image Has not effect. (required)
     * @param  int $version The optional version of the asset. (optional)
     * @param  int $cache The cache duration in seconds. (optional)
     * @param  int $download Set it to 0 to prevent download. (optional)
     * @param  int $width The target width of the asset, if it is an image. (optional)
     * @param  int $height The target height of the asset, if it is an image. (optional)
     * @param  int $quality Optional image quality, it is is an jpeg image. (optional)
     * @param  ResizeMode $mode The resize mode when the width and height is defined. (optional)
     * @param  string $bg Optional background color. (optional)
     * @param  float $focus_x Override the y focus point. (optional)
     * @param  float $focus_y Override the x focus point. (optional)
     * @param  bool $nofocus True to ignore the asset focus point if any. (optional)
     * @param  bool $auto True to use auto format. (optional)
     * @param  bool $force True to force a new resize even if it already stored. (optional)
     * @param  ImageFormat $format True to force a new resize even if it already stored. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetContentGetAssetContentBySlug'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function assetContentGetAssetContentBySlugRequest($app, $id_or_slug, $more, $version = null, $cache = null, $download = null, $width = null, $height = null, $quality = null, $mode = null, $bg = null, $focus_x = null, $focus_y = null, $nofocus = null, $auto = null, $force = null, $format = null, string $contentType = self::contentTypes['assetContentGetAssetContentBySlug'][0])
    {

        // verify the required parameter 'app' is set
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling assetContentGetAssetContentBySlug'
            );
        }

        // verify the required parameter 'id_or_slug' is set
        if ($id_or_slug === null || (is_array($id_or_slug) && count($id_or_slug) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_or_slug when calling assetContentGetAssetContentBySlug'
            );
        }

        // verify the required parameter 'more' is set
        if ($more === null || (is_array($more) && count($more) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $more when calling assetContentGetAssetContentBySlug'
            );
        }
















        $resourcePath = '/api/assets/{app}/{idOrSlug}/{more}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $version,
            'version', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cache,
            'cache', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $download,
            'download', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $width,
            'width', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $height,
            'height', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $quality,
            'quality', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $mode,
            'mode', // param base name
            'ResizeMode', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $bg,
            'bg', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $focus_x,
            'focusX', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $focus_y,
            'focusY', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $nofocus,
            'nofocus', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $auto,
            'auto', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $force,
            'force', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $format,
            'format', // param base name
            'ImageFormat', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($app !== null) {
            $resourcePath = str_replace(
                '{' . 'app' . '}',
                ObjectSerializer::toPathValue($app),
                $resourcePath
            );
        }
        // path params
        if ($id_or_slug !== null) {
            $resourcePath = str_replace(
                '{' . 'idOrSlug' . '}',
                ObjectSerializer::toPathValue($id_or_slug),
                $resourcePath
            );
        }
        // path params
        if ($more !== null) {
            $resourcePath = str_replace(
                '{' . 'more' . '}',
                ObjectSerializer::toPathValue($more),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/octet-stream', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation assetFoldersDeleteAssetFolder
     *
     * Delete an asset folder.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $id The ID of the asset folder to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetFoldersDeleteAssetFolder'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function assetFoldersDeleteAssetFolder($app, $id, string $contentType = self::contentTypes['assetFoldersDeleteAssetFolder'][0])
    {
        $this->assetFoldersDeleteAssetFolderWithHttpInfo($app, $id, $contentType);
    }

    /**
     * Operation assetFoldersDeleteAssetFolderWithHttpInfo
     *
     * Delete an asset folder.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $id The ID of the asset folder to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetFoldersDeleteAssetFolder'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetFoldersDeleteAssetFolderWithHttpInfo($app, $id, string $contentType = self::contentTypes['assetFoldersDeleteAssetFolder'][0])
    {
        $request = $this->assetFoldersDeleteAssetFolderRequest($app, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation assetFoldersDeleteAssetFolderAsync
     *
     * Delete an asset folder.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $id The ID of the asset folder to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetFoldersDeleteAssetFolder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assetFoldersDeleteAssetFolderAsync($app, $id, string $contentType = self::contentTypes['assetFoldersDeleteAssetFolder'][0])
    {
        return $this->assetFoldersDeleteAssetFolderAsyncWithHttpInfo($app, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation assetFoldersDeleteAssetFolderAsyncWithHttpInfo
     *
     * Delete an asset folder.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $id The ID of the asset folder to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetFoldersDeleteAssetFolder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assetFoldersDeleteAssetFolderAsyncWithHttpInfo($app, $id, string $contentType = self::contentTypes['assetFoldersDeleteAssetFolder'][0])
    {
        $returnType = '';
        $request = $this->assetFoldersDeleteAssetFolderRequest($app, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'assetFoldersDeleteAssetFolder'
     *
     * @param  string $app The name of the app. (required)
     * @param  string $id The ID of the asset folder to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetFoldersDeleteAssetFolder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function assetFoldersDeleteAssetFolderRequest($app, $id, string $contentType = self::contentTypes['assetFoldersDeleteAssetFolder'][0])
    {

        // verify the required parameter 'app' is set
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling assetFoldersDeleteAssetFolder'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling assetFoldersDeleteAssetFolder'
            );
        }


        $resourcePath = '/api/apps/{app}/assets/folders/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app !== null) {
            $resourcePath = str_replace(
                '{' . 'app' . '}',
                ObjectSerializer::toPathValue($app),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation assetFoldersGetAssetFolders
     *
     * Get asset folders.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $parent_id The optional parent folder id. (optional)
     * @param  AssetFolderScope $scope The scope of the query. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetFoldersGetAssetFolders'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AssetFoldersDto|\OpenAPI\Client\Model\ErrorDto
     */
    public function assetFoldersGetAssetFolders($app, $parent_id = null, $scope = null, string $contentType = self::contentTypes['assetFoldersGetAssetFolders'][0])
    {
        list($response) = $this->assetFoldersGetAssetFoldersWithHttpInfo($app, $parent_id, $scope, $contentType);
        return $response;
    }

    /**
     * Operation assetFoldersGetAssetFoldersWithHttpInfo
     *
     * Get asset folders.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $parent_id The optional parent folder id. (optional)
     * @param  AssetFolderScope $scope The scope of the query. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetFoldersGetAssetFolders'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AssetFoldersDto|\OpenAPI\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetFoldersGetAssetFoldersWithHttpInfo($app, $parent_id = null, $scope = null, string $contentType = self::contentTypes['assetFoldersGetAssetFolders'][0])
    {
        $request = $this->assetFoldersGetAssetFoldersRequest($app, $parent_id, $scope, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AssetFoldersDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AssetFoldersDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AssetFoldersDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AssetFoldersDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AssetFoldersDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation assetFoldersGetAssetFoldersAsync
     *
     * Get asset folders.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $parent_id The optional parent folder id. (optional)
     * @param  AssetFolderScope $scope The scope of the query. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetFoldersGetAssetFolders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assetFoldersGetAssetFoldersAsync($app, $parent_id = null, $scope = null, string $contentType = self::contentTypes['assetFoldersGetAssetFolders'][0])
    {
        return $this->assetFoldersGetAssetFoldersAsyncWithHttpInfo($app, $parent_id, $scope, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation assetFoldersGetAssetFoldersAsyncWithHttpInfo
     *
     * Get asset folders.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $parent_id The optional parent folder id. (optional)
     * @param  AssetFolderScope $scope The scope of the query. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetFoldersGetAssetFolders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assetFoldersGetAssetFoldersAsyncWithHttpInfo($app, $parent_id = null, $scope = null, string $contentType = self::contentTypes['assetFoldersGetAssetFolders'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AssetFoldersDto';
        $request = $this->assetFoldersGetAssetFoldersRequest($app, $parent_id, $scope, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'assetFoldersGetAssetFolders'
     *
     * @param  string $app The name of the app. (required)
     * @param  string $parent_id The optional parent folder id. (optional)
     * @param  AssetFolderScope $scope The scope of the query. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetFoldersGetAssetFolders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function assetFoldersGetAssetFoldersRequest($app, $parent_id = null, $scope = null, string $contentType = self::contentTypes['assetFoldersGetAssetFolders'][0])
    {

        // verify the required parameter 'app' is set
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling assetFoldersGetAssetFolders'
            );
        }




        $resourcePath = '/api/apps/{app}/assets/folders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $parent_id,
            'parentId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $scope,
            'scope', // param base name
            'AssetFolderScope', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($app !== null) {
            $resourcePath = str_replace(
                '{' . 'app' . '}',
                ObjectSerializer::toPathValue($app),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation assetFoldersPostAssetFolder
     *
     * Create an asset folder.
     *
     * @param  string $app The name of the app. (required)
     * @param  \OpenAPI\Client\Model\CreateAssetFolderDto $create_asset_folder_dto The asset folder object that needs to be added to the App. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetFoldersPostAssetFolder'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AssetFolderDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto
     */
    public function assetFoldersPostAssetFolder($app, $create_asset_folder_dto, string $contentType = self::contentTypes['assetFoldersPostAssetFolder'][0])
    {
        list($response) = $this->assetFoldersPostAssetFolderWithHttpInfo($app, $create_asset_folder_dto, $contentType);
        return $response;
    }

    /**
     * Operation assetFoldersPostAssetFolderWithHttpInfo
     *
     * Create an asset folder.
     *
     * @param  string $app The name of the app. (required)
     * @param  \OpenAPI\Client\Model\CreateAssetFolderDto $create_asset_folder_dto The asset folder object that needs to be added to the App. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetFoldersPostAssetFolder'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AssetFolderDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetFoldersPostAssetFolderWithHttpInfo($app, $create_asset_folder_dto, string $contentType = self::contentTypes['assetFoldersPostAssetFolder'][0])
    {
        $request = $this->assetFoldersPostAssetFolderRequest($app, $create_asset_folder_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\AssetFolderDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AssetFolderDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AssetFolderDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AssetFolderDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AssetFolderDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation assetFoldersPostAssetFolderAsync
     *
     * Create an asset folder.
     *
     * @param  string $app The name of the app. (required)
     * @param  \OpenAPI\Client\Model\CreateAssetFolderDto $create_asset_folder_dto The asset folder object that needs to be added to the App. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetFoldersPostAssetFolder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assetFoldersPostAssetFolderAsync($app, $create_asset_folder_dto, string $contentType = self::contentTypes['assetFoldersPostAssetFolder'][0])
    {
        return $this->assetFoldersPostAssetFolderAsyncWithHttpInfo($app, $create_asset_folder_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation assetFoldersPostAssetFolderAsyncWithHttpInfo
     *
     * Create an asset folder.
     *
     * @param  string $app The name of the app. (required)
     * @param  \OpenAPI\Client\Model\CreateAssetFolderDto $create_asset_folder_dto The asset folder object that needs to be added to the App. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetFoldersPostAssetFolder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assetFoldersPostAssetFolderAsyncWithHttpInfo($app, $create_asset_folder_dto, string $contentType = self::contentTypes['assetFoldersPostAssetFolder'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AssetFolderDto';
        $request = $this->assetFoldersPostAssetFolderRequest($app, $create_asset_folder_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'assetFoldersPostAssetFolder'
     *
     * @param  string $app The name of the app. (required)
     * @param  \OpenAPI\Client\Model\CreateAssetFolderDto $create_asset_folder_dto The asset folder object that needs to be added to the App. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetFoldersPostAssetFolder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function assetFoldersPostAssetFolderRequest($app, $create_asset_folder_dto, string $contentType = self::contentTypes['assetFoldersPostAssetFolder'][0])
    {

        // verify the required parameter 'app' is set
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling assetFoldersPostAssetFolder'
            );
        }

        // verify the required parameter 'create_asset_folder_dto' is set
        if ($create_asset_folder_dto === null || (is_array($create_asset_folder_dto) && count($create_asset_folder_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_asset_folder_dto when calling assetFoldersPostAssetFolder'
            );
        }


        $resourcePath = '/api/apps/{app}/assets/folders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app !== null) {
            $resourcePath = str_replace(
                '{' . 'app' . '}',
                ObjectSerializer::toPathValue($app),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_asset_folder_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_asset_folder_dto));
            } else {
                $httpBody = $create_asset_folder_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation assetFoldersPutAssetFolder
     *
     * Update an asset folder.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $id The ID of the asset folder. (required)
     * @param  \OpenAPI\Client\Model\RenameAssetFolderDto $rename_asset_folder_dto The asset folder object that needs to updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetFoldersPutAssetFolder'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AssetFolderDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto
     */
    public function assetFoldersPutAssetFolder($app, $id, $rename_asset_folder_dto, string $contentType = self::contentTypes['assetFoldersPutAssetFolder'][0])
    {
        list($response) = $this->assetFoldersPutAssetFolderWithHttpInfo($app, $id, $rename_asset_folder_dto, $contentType);
        return $response;
    }

    /**
     * Operation assetFoldersPutAssetFolderWithHttpInfo
     *
     * Update an asset folder.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $id The ID of the asset folder. (required)
     * @param  \OpenAPI\Client\Model\RenameAssetFolderDto $rename_asset_folder_dto The asset folder object that needs to updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetFoldersPutAssetFolder'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AssetFolderDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetFoldersPutAssetFolderWithHttpInfo($app, $id, $rename_asset_folder_dto, string $contentType = self::contentTypes['assetFoldersPutAssetFolder'][0])
    {
        $request = $this->assetFoldersPutAssetFolderRequest($app, $id, $rename_asset_folder_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AssetFolderDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AssetFolderDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AssetFolderDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AssetFolderDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AssetFolderDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation assetFoldersPutAssetFolderAsync
     *
     * Update an asset folder.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $id The ID of the asset folder. (required)
     * @param  \OpenAPI\Client\Model\RenameAssetFolderDto $rename_asset_folder_dto The asset folder object that needs to updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetFoldersPutAssetFolder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assetFoldersPutAssetFolderAsync($app, $id, $rename_asset_folder_dto, string $contentType = self::contentTypes['assetFoldersPutAssetFolder'][0])
    {
        return $this->assetFoldersPutAssetFolderAsyncWithHttpInfo($app, $id, $rename_asset_folder_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation assetFoldersPutAssetFolderAsyncWithHttpInfo
     *
     * Update an asset folder.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $id The ID of the asset folder. (required)
     * @param  \OpenAPI\Client\Model\RenameAssetFolderDto $rename_asset_folder_dto The asset folder object that needs to updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetFoldersPutAssetFolder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assetFoldersPutAssetFolderAsyncWithHttpInfo($app, $id, $rename_asset_folder_dto, string $contentType = self::contentTypes['assetFoldersPutAssetFolder'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AssetFolderDto';
        $request = $this->assetFoldersPutAssetFolderRequest($app, $id, $rename_asset_folder_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'assetFoldersPutAssetFolder'
     *
     * @param  string $app The name of the app. (required)
     * @param  string $id The ID of the asset folder. (required)
     * @param  \OpenAPI\Client\Model\RenameAssetFolderDto $rename_asset_folder_dto The asset folder object that needs to updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetFoldersPutAssetFolder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function assetFoldersPutAssetFolderRequest($app, $id, $rename_asset_folder_dto, string $contentType = self::contentTypes['assetFoldersPutAssetFolder'][0])
    {

        // verify the required parameter 'app' is set
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling assetFoldersPutAssetFolder'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling assetFoldersPutAssetFolder'
            );
        }

        // verify the required parameter 'rename_asset_folder_dto' is set
        if ($rename_asset_folder_dto === null || (is_array($rename_asset_folder_dto) && count($rename_asset_folder_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rename_asset_folder_dto when calling assetFoldersPutAssetFolder'
            );
        }


        $resourcePath = '/api/apps/{app}/assets/folders/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app !== null) {
            $resourcePath = str_replace(
                '{' . 'app' . '}',
                ObjectSerializer::toPathValue($app),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($rename_asset_folder_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($rename_asset_folder_dto));
            } else {
                $httpBody = $rename_asset_folder_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation assetFoldersPutAssetFolderParent
     *
     * Move an asset folder.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $id The ID of the asset folder. (required)
     * @param  \OpenAPI\Client\Model\MoveAssetFolderDto $move_asset_folder_dto The asset folder object that needs to updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetFoldersPutAssetFolderParent'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AssetFolderDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto
     */
    public function assetFoldersPutAssetFolderParent($app, $id, $move_asset_folder_dto, string $contentType = self::contentTypes['assetFoldersPutAssetFolderParent'][0])
    {
        list($response) = $this->assetFoldersPutAssetFolderParentWithHttpInfo($app, $id, $move_asset_folder_dto, $contentType);
        return $response;
    }

    /**
     * Operation assetFoldersPutAssetFolderParentWithHttpInfo
     *
     * Move an asset folder.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $id The ID of the asset folder. (required)
     * @param  \OpenAPI\Client\Model\MoveAssetFolderDto $move_asset_folder_dto The asset folder object that needs to updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetFoldersPutAssetFolderParent'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AssetFolderDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetFoldersPutAssetFolderParentWithHttpInfo($app, $id, $move_asset_folder_dto, string $contentType = self::contentTypes['assetFoldersPutAssetFolderParent'][0])
    {
        $request = $this->assetFoldersPutAssetFolderParentRequest($app, $id, $move_asset_folder_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AssetFolderDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AssetFolderDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AssetFolderDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AssetFolderDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AssetFolderDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation assetFoldersPutAssetFolderParentAsync
     *
     * Move an asset folder.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $id The ID of the asset folder. (required)
     * @param  \OpenAPI\Client\Model\MoveAssetFolderDto $move_asset_folder_dto The asset folder object that needs to updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetFoldersPutAssetFolderParent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assetFoldersPutAssetFolderParentAsync($app, $id, $move_asset_folder_dto, string $contentType = self::contentTypes['assetFoldersPutAssetFolderParent'][0])
    {
        return $this->assetFoldersPutAssetFolderParentAsyncWithHttpInfo($app, $id, $move_asset_folder_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation assetFoldersPutAssetFolderParentAsyncWithHttpInfo
     *
     * Move an asset folder.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $id The ID of the asset folder. (required)
     * @param  \OpenAPI\Client\Model\MoveAssetFolderDto $move_asset_folder_dto The asset folder object that needs to updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetFoldersPutAssetFolderParent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assetFoldersPutAssetFolderParentAsyncWithHttpInfo($app, $id, $move_asset_folder_dto, string $contentType = self::contentTypes['assetFoldersPutAssetFolderParent'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AssetFolderDto';
        $request = $this->assetFoldersPutAssetFolderParentRequest($app, $id, $move_asset_folder_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'assetFoldersPutAssetFolderParent'
     *
     * @param  string $app The name of the app. (required)
     * @param  string $id The ID of the asset folder. (required)
     * @param  \OpenAPI\Client\Model\MoveAssetFolderDto $move_asset_folder_dto The asset folder object that needs to updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetFoldersPutAssetFolderParent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function assetFoldersPutAssetFolderParentRequest($app, $id, $move_asset_folder_dto, string $contentType = self::contentTypes['assetFoldersPutAssetFolderParent'][0])
    {

        // verify the required parameter 'app' is set
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling assetFoldersPutAssetFolderParent'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling assetFoldersPutAssetFolderParent'
            );
        }

        // verify the required parameter 'move_asset_folder_dto' is set
        if ($move_asset_folder_dto === null || (is_array($move_asset_folder_dto) && count($move_asset_folder_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $move_asset_folder_dto when calling assetFoldersPutAssetFolderParent'
            );
        }


        $resourcePath = '/api/apps/{app}/assets/folders/{id}/parent';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app !== null) {
            $resourcePath = str_replace(
                '{' . 'app' . '}',
                ObjectSerializer::toPathValue($app),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($move_asset_folder_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($move_asset_folder_dto));
            } else {
                $httpBody = $move_asset_folder_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation assetsBulkUpdateAssets
     *
     * Bulk update assets.
     *
     * @param  string $app The name of the app. (required)
     * @param  \OpenAPI\Client\Model\BulkUpdateAssetsDto $bulk_update_assets_dto The bulk update request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsBulkUpdateAssets'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\BulkResultDto[]|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto
     */
    public function assetsBulkUpdateAssets($app, $bulk_update_assets_dto, string $contentType = self::contentTypes['assetsBulkUpdateAssets'][0])
    {
        list($response) = $this->assetsBulkUpdateAssetsWithHttpInfo($app, $bulk_update_assets_dto, $contentType);
        return $response;
    }

    /**
     * Operation assetsBulkUpdateAssetsWithHttpInfo
     *
     * Bulk update assets.
     *
     * @param  string $app The name of the app. (required)
     * @param  \OpenAPI\Client\Model\BulkUpdateAssetsDto $bulk_update_assets_dto The bulk update request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsBulkUpdateAssets'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\BulkResultDto[]|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetsBulkUpdateAssetsWithHttpInfo($app, $bulk_update_assets_dto, string $contentType = self::contentTypes['assetsBulkUpdateAssets'][0])
    {
        $request = $this->assetsBulkUpdateAssetsRequest($app, $bulk_update_assets_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\BulkResultDto[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\BulkResultDto[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BulkResultDto[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\BulkResultDto[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BulkResultDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation assetsBulkUpdateAssetsAsync
     *
     * Bulk update assets.
     *
     * @param  string $app The name of the app. (required)
     * @param  \OpenAPI\Client\Model\BulkUpdateAssetsDto $bulk_update_assets_dto The bulk update request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsBulkUpdateAssets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assetsBulkUpdateAssetsAsync($app, $bulk_update_assets_dto, string $contentType = self::contentTypes['assetsBulkUpdateAssets'][0])
    {
        return $this->assetsBulkUpdateAssetsAsyncWithHttpInfo($app, $bulk_update_assets_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation assetsBulkUpdateAssetsAsyncWithHttpInfo
     *
     * Bulk update assets.
     *
     * @param  string $app The name of the app. (required)
     * @param  \OpenAPI\Client\Model\BulkUpdateAssetsDto $bulk_update_assets_dto The bulk update request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsBulkUpdateAssets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assetsBulkUpdateAssetsAsyncWithHttpInfo($app, $bulk_update_assets_dto, string $contentType = self::contentTypes['assetsBulkUpdateAssets'][0])
    {
        $returnType = '\OpenAPI\Client\Model\BulkResultDto[]';
        $request = $this->assetsBulkUpdateAssetsRequest($app, $bulk_update_assets_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'assetsBulkUpdateAssets'
     *
     * @param  string $app The name of the app. (required)
     * @param  \OpenAPI\Client\Model\BulkUpdateAssetsDto $bulk_update_assets_dto The bulk update request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsBulkUpdateAssets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function assetsBulkUpdateAssetsRequest($app, $bulk_update_assets_dto, string $contentType = self::contentTypes['assetsBulkUpdateAssets'][0])
    {

        // verify the required parameter 'app' is set
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling assetsBulkUpdateAssets'
            );
        }

        // verify the required parameter 'bulk_update_assets_dto' is set
        if ($bulk_update_assets_dto === null || (is_array($bulk_update_assets_dto) && count($bulk_update_assets_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bulk_update_assets_dto when calling assetsBulkUpdateAssets'
            );
        }


        $resourcePath = '/api/apps/{app}/assets/bulk';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app !== null) {
            $resourcePath = str_replace(
                '{' . 'app' . '}',
                ObjectSerializer::toPathValue($app),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($bulk_update_assets_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($bulk_update_assets_dto));
            } else {
                $httpBody = $bulk_update_assets_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation assetsDeleteAsset
     *
     * Delete an asset.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $id The ID of the asset to delete. (required)
     * @param  bool $check_referrers True to check referrers of this asset. (optional)
     * @param  bool $permanent True to delete the asset permanently. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsDeleteAsset'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function assetsDeleteAsset($app, $id, $check_referrers = null, $permanent = null, string $contentType = self::contentTypes['assetsDeleteAsset'][0])
    {
        $this->assetsDeleteAssetWithHttpInfo($app, $id, $check_referrers, $permanent, $contentType);
    }

    /**
     * Operation assetsDeleteAssetWithHttpInfo
     *
     * Delete an asset.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $id The ID of the asset to delete. (required)
     * @param  bool $check_referrers True to check referrers of this asset. (optional)
     * @param  bool $permanent True to delete the asset permanently. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsDeleteAsset'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetsDeleteAssetWithHttpInfo($app, $id, $check_referrers = null, $permanent = null, string $contentType = self::contentTypes['assetsDeleteAsset'][0])
    {
        $request = $this->assetsDeleteAssetRequest($app, $id, $check_referrers, $permanent, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation assetsDeleteAssetAsync
     *
     * Delete an asset.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $id The ID of the asset to delete. (required)
     * @param  bool $check_referrers True to check referrers of this asset. (optional)
     * @param  bool $permanent True to delete the asset permanently. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsDeleteAsset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assetsDeleteAssetAsync($app, $id, $check_referrers = null, $permanent = null, string $contentType = self::contentTypes['assetsDeleteAsset'][0])
    {
        return $this->assetsDeleteAssetAsyncWithHttpInfo($app, $id, $check_referrers, $permanent, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation assetsDeleteAssetAsyncWithHttpInfo
     *
     * Delete an asset.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $id The ID of the asset to delete. (required)
     * @param  bool $check_referrers True to check referrers of this asset. (optional)
     * @param  bool $permanent True to delete the asset permanently. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsDeleteAsset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assetsDeleteAssetAsyncWithHttpInfo($app, $id, $check_referrers = null, $permanent = null, string $contentType = self::contentTypes['assetsDeleteAsset'][0])
    {
        $returnType = '';
        $request = $this->assetsDeleteAssetRequest($app, $id, $check_referrers, $permanent, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'assetsDeleteAsset'
     *
     * @param  string $app The name of the app. (required)
     * @param  string $id The ID of the asset to delete. (required)
     * @param  bool $check_referrers True to check referrers of this asset. (optional)
     * @param  bool $permanent True to delete the asset permanently. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsDeleteAsset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function assetsDeleteAssetRequest($app, $id, $check_referrers = null, $permanent = null, string $contentType = self::contentTypes['assetsDeleteAsset'][0])
    {

        // verify the required parameter 'app' is set
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling assetsDeleteAsset'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling assetsDeleteAsset'
            );
        }




        $resourcePath = '/api/apps/{app}/assets/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $check_referrers,
            'checkReferrers', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $permanent,
            'permanent', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($app !== null) {
            $resourcePath = str_replace(
                '{' . 'app' . '}',
                ObjectSerializer::toPathValue($app),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation assetsGetAsset
     *
     * Get an asset by id.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $id The ID of the asset to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetAsset'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AssetDto|\OpenAPI\Client\Model\ErrorDto
     */
    public function assetsGetAsset($app, $id, string $contentType = self::contentTypes['assetsGetAsset'][0])
    {
        list($response) = $this->assetsGetAssetWithHttpInfo($app, $id, $contentType);
        return $response;
    }

    /**
     * Operation assetsGetAssetWithHttpInfo
     *
     * Get an asset by id.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $id The ID of the asset to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetAsset'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AssetDto|\OpenAPI\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetsGetAssetWithHttpInfo($app, $id, string $contentType = self::contentTypes['assetsGetAsset'][0])
    {
        $request = $this->assetsGetAssetRequest($app, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AssetDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AssetDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AssetDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AssetDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AssetDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation assetsGetAssetAsync
     *
     * Get an asset by id.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $id The ID of the asset to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetAsset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assetsGetAssetAsync($app, $id, string $contentType = self::contentTypes['assetsGetAsset'][0])
    {
        return $this->assetsGetAssetAsyncWithHttpInfo($app, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation assetsGetAssetAsyncWithHttpInfo
     *
     * Get an asset by id.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $id The ID of the asset to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetAsset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assetsGetAssetAsyncWithHttpInfo($app, $id, string $contentType = self::contentTypes['assetsGetAsset'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AssetDto';
        $request = $this->assetsGetAssetRequest($app, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'assetsGetAsset'
     *
     * @param  string $app The name of the app. (required)
     * @param  string $id The ID of the asset to retrieve. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetAsset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function assetsGetAssetRequest($app, $id, string $contentType = self::contentTypes['assetsGetAsset'][0])
    {

        // verify the required parameter 'app' is set
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling assetsGetAsset'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling assetsGetAsset'
            );
        }


        $resourcePath = '/api/apps/{app}/assets/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app !== null) {
            $resourcePath = str_replace(
                '{' . 'app' . '}',
                ObjectSerializer::toPathValue($app),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation assetsGetAssets
     *
     * Get assets.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $parent_id The optional parent folder id. (optional)
     * @param  string $ids The optional asset ids. (optional)
     * @param  string $q The optional json query. (optional)
     * @param  float $top Optional number of items to take. (optional)
     * @param  float $skip Optional number of items to skip. (optional)
     * @param  string $orderby Optional OData order definition. (optional)
     * @param  string $filter Optional OData filter. (optional)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetAssets'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AssetsDto|\OpenAPI\Client\Model\ErrorDto
     */
    public function assetsGetAssets($app, $parent_id = null, $ids = null, $q = null, $top = null, $skip = null, $orderby = null, $filter = null, $x_no_total = null, $x_no_slow_total = null, string $contentType = self::contentTypes['assetsGetAssets'][0])
    {
        list($response) = $this->assetsGetAssetsWithHttpInfo($app, $parent_id, $ids, $q, $top, $skip, $orderby, $filter, $x_no_total, $x_no_slow_total, $contentType);
        return $response;
    }

    /**
     * Operation assetsGetAssetsWithHttpInfo
     *
     * Get assets.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $parent_id The optional parent folder id. (optional)
     * @param  string $ids The optional asset ids. (optional)
     * @param  string $q The optional json query. (optional)
     * @param  float $top Optional number of items to take. (optional)
     * @param  float $skip Optional number of items to skip. (optional)
     * @param  string $orderby Optional OData order definition. (optional)
     * @param  string $filter Optional OData filter. (optional)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetAssets'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AssetsDto|\OpenAPI\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetsGetAssetsWithHttpInfo($app, $parent_id = null, $ids = null, $q = null, $top = null, $skip = null, $orderby = null, $filter = null, $x_no_total = null, $x_no_slow_total = null, string $contentType = self::contentTypes['assetsGetAssets'][0])
    {
        $request = $this->assetsGetAssetsRequest($app, $parent_id, $ids, $q, $top, $skip, $orderby, $filter, $x_no_total, $x_no_slow_total, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AssetsDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AssetsDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AssetsDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AssetsDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AssetsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation assetsGetAssetsAsync
     *
     * Get assets.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $parent_id The optional parent folder id. (optional)
     * @param  string $ids The optional asset ids. (optional)
     * @param  string $q The optional json query. (optional)
     * @param  float $top Optional number of items to take. (optional)
     * @param  float $skip Optional number of items to skip. (optional)
     * @param  string $orderby Optional OData order definition. (optional)
     * @param  string $filter Optional OData filter. (optional)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetAssets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assetsGetAssetsAsync($app, $parent_id = null, $ids = null, $q = null, $top = null, $skip = null, $orderby = null, $filter = null, $x_no_total = null, $x_no_slow_total = null, string $contentType = self::contentTypes['assetsGetAssets'][0])
    {
        return $this->assetsGetAssetsAsyncWithHttpInfo($app, $parent_id, $ids, $q, $top, $skip, $orderby, $filter, $x_no_total, $x_no_slow_total, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation assetsGetAssetsAsyncWithHttpInfo
     *
     * Get assets.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $parent_id The optional parent folder id. (optional)
     * @param  string $ids The optional asset ids. (optional)
     * @param  string $q The optional json query. (optional)
     * @param  float $top Optional number of items to take. (optional)
     * @param  float $skip Optional number of items to skip. (optional)
     * @param  string $orderby Optional OData order definition. (optional)
     * @param  string $filter Optional OData filter. (optional)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetAssets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assetsGetAssetsAsyncWithHttpInfo($app, $parent_id = null, $ids = null, $q = null, $top = null, $skip = null, $orderby = null, $filter = null, $x_no_total = null, $x_no_slow_total = null, string $contentType = self::contentTypes['assetsGetAssets'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AssetsDto';
        $request = $this->assetsGetAssetsRequest($app, $parent_id, $ids, $q, $top, $skip, $orderby, $filter, $x_no_total, $x_no_slow_total, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'assetsGetAssets'
     *
     * @param  string $app The name of the app. (required)
     * @param  string $parent_id The optional parent folder id. (optional)
     * @param  string $ids The optional asset ids. (optional)
     * @param  string $q The optional json query. (optional)
     * @param  float $top Optional number of items to take. (optional)
     * @param  float $skip Optional number of items to skip. (optional)
     * @param  string $orderby Optional OData order definition. (optional)
     * @param  string $filter Optional OData filter. (optional)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetAssets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function assetsGetAssetsRequest($app, $parent_id = null, $ids = null, $q = null, $top = null, $skip = null, $orderby = null, $filter = null, $x_no_total = null, $x_no_slow_total = null, string $contentType = self::contentTypes['assetsGetAssets'][0])
    {

        // verify the required parameter 'app' is set
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling assetsGetAssets'
            );
        }











        $resourcePath = '/api/apps/{app}/assets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $parent_id,
            'parentId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ids,
            'ids', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $q,
            'q', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_no_total !== null) {
            $headerParams['X-NoTotal'] = ObjectSerializer::toHeaderValue($x_no_total);
        }
        // header params
        if ($x_no_slow_total !== null) {
            $headerParams['X-NoSlowTotal'] = ObjectSerializer::toHeaderValue($x_no_slow_total);
        }

        // path params
        if ($app !== null) {
            $resourcePath = str_replace(
                '{' . 'app' . '}',
                ObjectSerializer::toPathValue($app),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation assetsGetAssetsPost
     *
     * Get assets.
     *
     * @param  string $app The name of the app. (required)
     * @param  \OpenAPI\Client\Model\QueryDto $query_dto The required query object. (required)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetAssetsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AssetsDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto
     */
    public function assetsGetAssetsPost($app, $query_dto, $x_no_total = null, $x_no_slow_total = null, string $contentType = self::contentTypes['assetsGetAssetsPost'][0])
    {
        list($response) = $this->assetsGetAssetsPostWithHttpInfo($app, $query_dto, $x_no_total, $x_no_slow_total, $contentType);
        return $response;
    }

    /**
     * Operation assetsGetAssetsPostWithHttpInfo
     *
     * Get assets.
     *
     * @param  string $app The name of the app. (required)
     * @param  \OpenAPI\Client\Model\QueryDto $query_dto The required query object. (required)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetAssetsPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AssetsDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetsGetAssetsPostWithHttpInfo($app, $query_dto, $x_no_total = null, $x_no_slow_total = null, string $contentType = self::contentTypes['assetsGetAssetsPost'][0])
    {
        $request = $this->assetsGetAssetsPostRequest($app, $query_dto, $x_no_total, $x_no_slow_total, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AssetsDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AssetsDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AssetsDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AssetsDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AssetsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation assetsGetAssetsPostAsync
     *
     * Get assets.
     *
     * @param  string $app The name of the app. (required)
     * @param  \OpenAPI\Client\Model\QueryDto $query_dto The required query object. (required)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetAssetsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assetsGetAssetsPostAsync($app, $query_dto, $x_no_total = null, $x_no_slow_total = null, string $contentType = self::contentTypes['assetsGetAssetsPost'][0])
    {
        return $this->assetsGetAssetsPostAsyncWithHttpInfo($app, $query_dto, $x_no_total, $x_no_slow_total, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation assetsGetAssetsPostAsyncWithHttpInfo
     *
     * Get assets.
     *
     * @param  string $app The name of the app. (required)
     * @param  \OpenAPI\Client\Model\QueryDto $query_dto The required query object. (required)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetAssetsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assetsGetAssetsPostAsyncWithHttpInfo($app, $query_dto, $x_no_total = null, $x_no_slow_total = null, string $contentType = self::contentTypes['assetsGetAssetsPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AssetsDto';
        $request = $this->assetsGetAssetsPostRequest($app, $query_dto, $x_no_total, $x_no_slow_total, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'assetsGetAssetsPost'
     *
     * @param  string $app The name of the app. (required)
     * @param  \OpenAPI\Client\Model\QueryDto $query_dto The required query object. (required)
     * @param  bool $x_no_total Do not return the total amount. (optional)
     * @param  bool $x_no_slow_total Do not return the total amount, if it would be slow. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetAssetsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function assetsGetAssetsPostRequest($app, $query_dto, $x_no_total = null, $x_no_slow_total = null, string $contentType = self::contentTypes['assetsGetAssetsPost'][0])
    {

        // verify the required parameter 'app' is set
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling assetsGetAssetsPost'
            );
        }

        // verify the required parameter 'query_dto' is set
        if ($query_dto === null || (is_array($query_dto) && count($query_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $query_dto when calling assetsGetAssetsPost'
            );
        }




        $resourcePath = '/api/apps/{app}/assets/query';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_no_total !== null) {
            $headerParams['X-NoTotal'] = ObjectSerializer::toHeaderValue($x_no_total);
        }
        // header params
        if ($x_no_slow_total !== null) {
            $headerParams['X-NoSlowTotal'] = ObjectSerializer::toHeaderValue($x_no_slow_total);
        }

        // path params
        if ($app !== null) {
            $resourcePath = str_replace(
                '{' . 'app' . '}',
                ObjectSerializer::toPathValue($app),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($query_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($query_dto));
            } else {
                $httpBody = $query_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation assetsGetTags
     *
     * Get assets tags.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetTags'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array<string,int>|\OpenAPI\Client\Model\ErrorDto
     */
    public function assetsGetTags($app, string $contentType = self::contentTypes['assetsGetTags'][0])
    {
        list($response) = $this->assetsGetTagsWithHttpInfo($app, $contentType);
        return $response;
    }

    /**
     * Operation assetsGetTagsWithHttpInfo
     *
     * Get assets tags.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetTags'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of array<string,int>|\OpenAPI\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetsGetTagsWithHttpInfo($app, string $contentType = self::contentTypes['assetsGetTags'][0])
    {
        $request = $this->assetsGetTagsRequest($app, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('array<string,int>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,int>' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,int>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'array<string,int>';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,int>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation assetsGetTagsAsync
     *
     * Get assets tags.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetTags'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assetsGetTagsAsync($app, string $contentType = self::contentTypes['assetsGetTags'][0])
    {
        return $this->assetsGetTagsAsyncWithHttpInfo($app, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation assetsGetTagsAsyncWithHttpInfo
     *
     * Get assets tags.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetTags'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assetsGetTagsAsyncWithHttpInfo($app, string $contentType = self::contentTypes['assetsGetTags'][0])
    {
        $returnType = 'array<string,int>';
        $request = $this->assetsGetTagsRequest($app, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'assetsGetTags'
     *
     * @param  string $app The name of the app. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsGetTags'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function assetsGetTagsRequest($app, string $contentType = self::contentTypes['assetsGetTags'][0])
    {

        // verify the required parameter 'app' is set
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling assetsGetTags'
            );
        }


        $resourcePath = '/api/apps/{app}/assets/tags';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app !== null) {
            $resourcePath = str_replace(
                '{' . 'app' . '}',
                ObjectSerializer::toPathValue($app),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation assetsPostAsset
     *
     * Upload a new asset.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $parent_id The optional parent folder id. (optional)
     * @param  string $id The optional custom asset id. (optional)
     * @param  bool $duplicate True to duplicate the asset, event if the file has been uploaded. (optional)
     * @param  \SplFileObject $file file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsPostAsset'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AssetDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto
     */
    public function assetsPostAsset($app, $parent_id = null, $id = null, $duplicate = null, $file = null, string $contentType = self::contentTypes['assetsPostAsset'][0])
    {
        list($response) = $this->assetsPostAssetWithHttpInfo($app, $parent_id, $id, $duplicate, $file, $contentType);
        return $response;
    }

    /**
     * Operation assetsPostAssetWithHttpInfo
     *
     * Upload a new asset.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $parent_id The optional parent folder id. (optional)
     * @param  string $id The optional custom asset id. (optional)
     * @param  bool $duplicate True to duplicate the asset, event if the file has been uploaded. (optional)
     * @param  \SplFileObject $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsPostAsset'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AssetDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetsPostAssetWithHttpInfo($app, $parent_id = null, $id = null, $duplicate = null, $file = null, string $contentType = self::contentTypes['assetsPostAsset'][0])
    {
        $request = $this->assetsPostAssetRequest($app, $parent_id, $id, $duplicate, $file, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\AssetDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AssetDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AssetDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                    if ('\OpenAPI\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AssetDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AssetDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation assetsPostAssetAsync
     *
     * Upload a new asset.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $parent_id The optional parent folder id. (optional)
     * @param  string $id The optional custom asset id. (optional)
     * @param  bool $duplicate True to duplicate the asset, event if the file has been uploaded. (optional)
     * @param  \SplFileObject $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsPostAsset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assetsPostAssetAsync($app, $parent_id = null, $id = null, $duplicate = null, $file = null, string $contentType = self::contentTypes['assetsPostAsset'][0])
    {
        return $this->assetsPostAssetAsyncWithHttpInfo($app, $parent_id, $id, $duplicate, $file, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation assetsPostAssetAsyncWithHttpInfo
     *
     * Upload a new asset.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $parent_id The optional parent folder id. (optional)
     * @param  string $id The optional custom asset id. (optional)
     * @param  bool $duplicate True to duplicate the asset, event if the file has been uploaded. (optional)
     * @param  \SplFileObject $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsPostAsset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assetsPostAssetAsyncWithHttpInfo($app, $parent_id = null, $id = null, $duplicate = null, $file = null, string $contentType = self::contentTypes['assetsPostAsset'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AssetDto';
        $request = $this->assetsPostAssetRequest($app, $parent_id, $id, $duplicate, $file, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'assetsPostAsset'
     *
     * @param  string $app The name of the app. (required)
     * @param  string $parent_id The optional parent folder id. (optional)
     * @param  string $id The optional custom asset id. (optional)
     * @param  bool $duplicate True to duplicate the asset, event if the file has been uploaded. (optional)
     * @param  \SplFileObject $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsPostAsset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function assetsPostAssetRequest($app, $parent_id = null, $id = null, $duplicate = null, $file = null, string $contentType = self::contentTypes['assetsPostAsset'][0])
    {

        // verify the required parameter 'app' is set
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling assetsPostAsset'
            );
        }






        $resourcePath = '/api/apps/{app}/assets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $parent_id,
            'parentId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $duplicate,
            'duplicate', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($app !== null) {
            $resourcePath = str_replace(
                '{' . 'app' . '}',
                ObjectSerializer::toPathValue($app),
                $resourcePath
            );
        }

        // form params
        if ($file !== null) {
            $multipart = true;
            $formParams['file'] = [];
            $paramFiles = is_array($file) ? $file : [$file];
            foreach ($paramFiles as $paramFile) {
                $formParams['file'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation assetsPostUpsertAsset
     *
     * Upsert an asset.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $id The optional custom asset id. (required)
     * @param  string $parent_id The optional parent folder id. (optional)
     * @param  bool $duplicate True to duplicate the asset, event if the file has been uploaded. (optional)
     * @param  \SplFileObject $file file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsPostUpsertAsset'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AssetDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto
     */
    public function assetsPostUpsertAsset($app, $id, $parent_id = null, $duplicate = null, $file = null, string $contentType = self::contentTypes['assetsPostUpsertAsset'][0])
    {
        list($response) = $this->assetsPostUpsertAssetWithHttpInfo($app, $id, $parent_id, $duplicate, $file, $contentType);
        return $response;
    }

    /**
     * Operation assetsPostUpsertAssetWithHttpInfo
     *
     * Upsert an asset.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $id The optional custom asset id. (required)
     * @param  string $parent_id The optional parent folder id. (optional)
     * @param  bool $duplicate True to duplicate the asset, event if the file has been uploaded. (optional)
     * @param  \SplFileObject $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsPostUpsertAsset'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AssetDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetsPostUpsertAssetWithHttpInfo($app, $id, $parent_id = null, $duplicate = null, $file = null, string $contentType = self::contentTypes['assetsPostUpsertAsset'][0])
    {
        $request = $this->assetsPostUpsertAssetRequest($app, $id, $parent_id, $duplicate, $file, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AssetDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AssetDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AssetDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                    if ('\OpenAPI\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AssetDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AssetDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation assetsPostUpsertAssetAsync
     *
     * Upsert an asset.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $id The optional custom asset id. (required)
     * @param  string $parent_id The optional parent folder id. (optional)
     * @param  bool $duplicate True to duplicate the asset, event if the file has been uploaded. (optional)
     * @param  \SplFileObject $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsPostUpsertAsset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assetsPostUpsertAssetAsync($app, $id, $parent_id = null, $duplicate = null, $file = null, string $contentType = self::contentTypes['assetsPostUpsertAsset'][0])
    {
        return $this->assetsPostUpsertAssetAsyncWithHttpInfo($app, $id, $parent_id, $duplicate, $file, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation assetsPostUpsertAssetAsyncWithHttpInfo
     *
     * Upsert an asset.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $id The optional custom asset id. (required)
     * @param  string $parent_id The optional parent folder id. (optional)
     * @param  bool $duplicate True to duplicate the asset, event if the file has been uploaded. (optional)
     * @param  \SplFileObject $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsPostUpsertAsset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assetsPostUpsertAssetAsyncWithHttpInfo($app, $id, $parent_id = null, $duplicate = null, $file = null, string $contentType = self::contentTypes['assetsPostUpsertAsset'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AssetDto';
        $request = $this->assetsPostUpsertAssetRequest($app, $id, $parent_id, $duplicate, $file, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'assetsPostUpsertAsset'
     *
     * @param  string $app The name of the app. (required)
     * @param  string $id The optional custom asset id. (required)
     * @param  string $parent_id The optional parent folder id. (optional)
     * @param  bool $duplicate True to duplicate the asset, event if the file has been uploaded. (optional)
     * @param  \SplFileObject $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsPostUpsertAsset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function assetsPostUpsertAssetRequest($app, $id, $parent_id = null, $duplicate = null, $file = null, string $contentType = self::contentTypes['assetsPostUpsertAsset'][0])
    {

        // verify the required parameter 'app' is set
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling assetsPostUpsertAsset'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling assetsPostUpsertAsset'
            );
        }





        $resourcePath = '/api/apps/{app}/assets/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $parent_id,
            'parentId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $duplicate,
            'duplicate', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($app !== null) {
            $resourcePath = str_replace(
                '{' . 'app' . '}',
                ObjectSerializer::toPathValue($app),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // form params
        if ($file !== null) {
            $multipart = true;
            $formParams['file'] = [];
            $paramFiles = is_array($file) ? $file : [$file];
            foreach ($paramFiles as $paramFile) {
                $formParams['file'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation assetsPutAsset
     *
     * Update an asset.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $id The ID of the asset. (required)
     * @param  \OpenAPI\Client\Model\AnnotateAssetDto $annotate_asset_dto The asset object that needs to updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsPutAsset'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AssetDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto
     */
    public function assetsPutAsset($app, $id, $annotate_asset_dto, string $contentType = self::contentTypes['assetsPutAsset'][0])
    {
        list($response) = $this->assetsPutAssetWithHttpInfo($app, $id, $annotate_asset_dto, $contentType);
        return $response;
    }

    /**
     * Operation assetsPutAssetWithHttpInfo
     *
     * Update an asset.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $id The ID of the asset. (required)
     * @param  \OpenAPI\Client\Model\AnnotateAssetDto $annotate_asset_dto The asset object that needs to updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsPutAsset'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AssetDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetsPutAssetWithHttpInfo($app, $id, $annotate_asset_dto, string $contentType = self::contentTypes['assetsPutAsset'][0])
    {
        $request = $this->assetsPutAssetRequest($app, $id, $annotate_asset_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AssetDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AssetDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AssetDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AssetDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AssetDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation assetsPutAssetAsync
     *
     * Update an asset.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $id The ID of the asset. (required)
     * @param  \OpenAPI\Client\Model\AnnotateAssetDto $annotate_asset_dto The asset object that needs to updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsPutAsset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assetsPutAssetAsync($app, $id, $annotate_asset_dto, string $contentType = self::contentTypes['assetsPutAsset'][0])
    {
        return $this->assetsPutAssetAsyncWithHttpInfo($app, $id, $annotate_asset_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation assetsPutAssetAsyncWithHttpInfo
     *
     * Update an asset.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $id The ID of the asset. (required)
     * @param  \OpenAPI\Client\Model\AnnotateAssetDto $annotate_asset_dto The asset object that needs to updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsPutAsset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assetsPutAssetAsyncWithHttpInfo($app, $id, $annotate_asset_dto, string $contentType = self::contentTypes['assetsPutAsset'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AssetDto';
        $request = $this->assetsPutAssetRequest($app, $id, $annotate_asset_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'assetsPutAsset'
     *
     * @param  string $app The name of the app. (required)
     * @param  string $id The ID of the asset. (required)
     * @param  \OpenAPI\Client\Model\AnnotateAssetDto $annotate_asset_dto The asset object that needs to updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsPutAsset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function assetsPutAssetRequest($app, $id, $annotate_asset_dto, string $contentType = self::contentTypes['assetsPutAsset'][0])
    {

        // verify the required parameter 'app' is set
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling assetsPutAsset'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling assetsPutAsset'
            );
        }

        // verify the required parameter 'annotate_asset_dto' is set
        if ($annotate_asset_dto === null || (is_array($annotate_asset_dto) && count($annotate_asset_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $annotate_asset_dto when calling assetsPutAsset'
            );
        }


        $resourcePath = '/api/apps/{app}/assets/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app !== null) {
            $resourcePath = str_replace(
                '{' . 'app' . '}',
                ObjectSerializer::toPathValue($app),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($annotate_asset_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($annotate_asset_dto));
            } else {
                $httpBody = $annotate_asset_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation assetsPutAssetContent
     *
     * Replace asset content.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $id The ID of the asset. (required)
     * @param  \SplFileObject $file file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsPutAssetContent'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AssetDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto
     */
    public function assetsPutAssetContent($app, $id, $file = null, string $contentType = self::contentTypes['assetsPutAssetContent'][0])
    {
        list($response) = $this->assetsPutAssetContentWithHttpInfo($app, $id, $file, $contentType);
        return $response;
    }

    /**
     * Operation assetsPutAssetContentWithHttpInfo
     *
     * Replace asset content.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $id The ID of the asset. (required)
     * @param  \SplFileObject $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsPutAssetContent'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AssetDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetsPutAssetContentWithHttpInfo($app, $id, $file = null, string $contentType = self::contentTypes['assetsPutAssetContent'][0])
    {
        $request = $this->assetsPutAssetContentRequest($app, $id, $file, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AssetDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AssetDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AssetDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 413:
                    if ('\OpenAPI\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AssetDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AssetDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation assetsPutAssetContentAsync
     *
     * Replace asset content.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $id The ID of the asset. (required)
     * @param  \SplFileObject $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsPutAssetContent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assetsPutAssetContentAsync($app, $id, $file = null, string $contentType = self::contentTypes['assetsPutAssetContent'][0])
    {
        return $this->assetsPutAssetContentAsyncWithHttpInfo($app, $id, $file, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation assetsPutAssetContentAsyncWithHttpInfo
     *
     * Replace asset content.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $id The ID of the asset. (required)
     * @param  \SplFileObject $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsPutAssetContent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assetsPutAssetContentAsyncWithHttpInfo($app, $id, $file = null, string $contentType = self::contentTypes['assetsPutAssetContent'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AssetDto';
        $request = $this->assetsPutAssetContentRequest($app, $id, $file, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'assetsPutAssetContent'
     *
     * @param  string $app The name of the app. (required)
     * @param  string $id The ID of the asset. (required)
     * @param  \SplFileObject $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsPutAssetContent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function assetsPutAssetContentRequest($app, $id, $file = null, string $contentType = self::contentTypes['assetsPutAssetContent'][0])
    {

        // verify the required parameter 'app' is set
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling assetsPutAssetContent'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling assetsPutAssetContent'
            );
        }



        $resourcePath = '/api/apps/{app}/assets/{id}/content';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app !== null) {
            $resourcePath = str_replace(
                '{' . 'app' . '}',
                ObjectSerializer::toPathValue($app),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // form params
        if ($file !== null) {
            $multipart = true;
            $formParams['file'] = [];
            $paramFiles = is_array($file) ? $file : [$file];
            foreach ($paramFiles as $paramFile) {
                $formParams['file'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation assetsPutAssetParent
     *
     * Moves the asset.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $id The ID of the asset. (required)
     * @param  \OpenAPI\Client\Model\MoveAssetDto $move_asset_dto The asset object that needs to updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsPutAssetParent'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AssetDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto
     */
    public function assetsPutAssetParent($app, $id, $move_asset_dto, string $contentType = self::contentTypes['assetsPutAssetParent'][0])
    {
        list($response) = $this->assetsPutAssetParentWithHttpInfo($app, $id, $move_asset_dto, $contentType);
        return $response;
    }

    /**
     * Operation assetsPutAssetParentWithHttpInfo
     *
     * Moves the asset.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $id The ID of the asset. (required)
     * @param  \OpenAPI\Client\Model\MoveAssetDto $move_asset_dto The asset object that needs to updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsPutAssetParent'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AssetDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetsPutAssetParentWithHttpInfo($app, $id, $move_asset_dto, string $contentType = self::contentTypes['assetsPutAssetParent'][0])
    {
        $request = $this->assetsPutAssetParentRequest($app, $id, $move_asset_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AssetDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AssetDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AssetDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AssetDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AssetDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation assetsPutAssetParentAsync
     *
     * Moves the asset.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $id The ID of the asset. (required)
     * @param  \OpenAPI\Client\Model\MoveAssetDto $move_asset_dto The asset object that needs to updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsPutAssetParent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assetsPutAssetParentAsync($app, $id, $move_asset_dto, string $contentType = self::contentTypes['assetsPutAssetParent'][0])
    {
        return $this->assetsPutAssetParentAsyncWithHttpInfo($app, $id, $move_asset_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation assetsPutAssetParentAsyncWithHttpInfo
     *
     * Moves the asset.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $id The ID of the asset. (required)
     * @param  \OpenAPI\Client\Model\MoveAssetDto $move_asset_dto The asset object that needs to updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsPutAssetParent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assetsPutAssetParentAsyncWithHttpInfo($app, $id, $move_asset_dto, string $contentType = self::contentTypes['assetsPutAssetParent'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AssetDto';
        $request = $this->assetsPutAssetParentRequest($app, $id, $move_asset_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'assetsPutAssetParent'
     *
     * @param  string $app The name of the app. (required)
     * @param  string $id The ID of the asset. (required)
     * @param  \OpenAPI\Client\Model\MoveAssetDto $move_asset_dto The asset object that needs to updated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsPutAssetParent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function assetsPutAssetParentRequest($app, $id, $move_asset_dto, string $contentType = self::contentTypes['assetsPutAssetParent'][0])
    {

        // verify the required parameter 'app' is set
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling assetsPutAssetParent'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling assetsPutAssetParent'
            );
        }

        // verify the required parameter 'move_asset_dto' is set
        if ($move_asset_dto === null || (is_array($move_asset_dto) && count($move_asset_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $move_asset_dto when calling assetsPutAssetParent'
            );
        }


        $resourcePath = '/api/apps/{app}/assets/{id}/parent';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app !== null) {
            $resourcePath = str_replace(
                '{' . 'app' . '}',
                ObjectSerializer::toPathValue($app),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($move_asset_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($move_asset_dto));
            } else {
                $httpBody = $move_asset_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation assetsPutTag
     *
     * Rename an asset tag.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $name The tag to return. (required)
     * @param  \OpenAPI\Client\Model\RenameTagDto $rename_tag_dto The required request object. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsPutTag'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array<string,int>|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto
     */
    public function assetsPutTag($app, $name, $rename_tag_dto, string $contentType = self::contentTypes['assetsPutTag'][0])
    {
        list($response) = $this->assetsPutTagWithHttpInfo($app, $name, $rename_tag_dto, $contentType);
        return $response;
    }

    /**
     * Operation assetsPutTagWithHttpInfo
     *
     * Rename an asset tag.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $name The tag to return. (required)
     * @param  \OpenAPI\Client\Model\RenameTagDto $rename_tag_dto The required request object. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsPutTag'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of array<string,int>|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function assetsPutTagWithHttpInfo($app, $name, $rename_tag_dto, string $contentType = self::contentTypes['assetsPutTag'][0])
    {
        $request = $this->assetsPutTagRequest($app, $name, $rename_tag_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('array<string,int>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,int>' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,int>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\ErrorDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ErrorDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ErrorDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'array<string,int>';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,int>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation assetsPutTagAsync
     *
     * Rename an asset tag.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $name The tag to return. (required)
     * @param  \OpenAPI\Client\Model\RenameTagDto $rename_tag_dto The required request object. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsPutTag'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assetsPutTagAsync($app, $name, $rename_tag_dto, string $contentType = self::contentTypes['assetsPutTag'][0])
    {
        return $this->assetsPutTagAsyncWithHttpInfo($app, $name, $rename_tag_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation assetsPutTagAsyncWithHttpInfo
     *
     * Rename an asset tag.
     *
     * @param  string $app The name of the app. (required)
     * @param  string $name The tag to return. (required)
     * @param  \OpenAPI\Client\Model\RenameTagDto $rename_tag_dto The required request object. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsPutTag'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assetsPutTagAsyncWithHttpInfo($app, $name, $rename_tag_dto, string $contentType = self::contentTypes['assetsPutTag'][0])
    {
        $returnType = 'array<string,int>';
        $request = $this->assetsPutTagRequest($app, $name, $rename_tag_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'assetsPutTag'
     *
     * @param  string $app The name of the app. (required)
     * @param  string $name The tag to return. (required)
     * @param  \OpenAPI\Client\Model\RenameTagDto $rename_tag_dto The required request object. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assetsPutTag'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function assetsPutTagRequest($app, $name, $rename_tag_dto, string $contentType = self::contentTypes['assetsPutTag'][0])
    {

        // verify the required parameter 'app' is set
        if ($app === null || (is_array($app) && count($app) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app when calling assetsPutTag'
            );
        }

        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling assetsPutTag'
            );
        }

        // verify the required parameter 'rename_tag_dto' is set
        if ($rename_tag_dto === null || (is_array($rename_tag_dto) && count($rename_tag_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rename_tag_dto when calling assetsPutTag'
            );
        }


        $resourcePath = '/api/apps/{app}/assets/tags/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app !== null) {
            $resourcePath = str_replace(
                '{' . 'app' . '}',
                ObjectSerializer::toPathValue($app),
                $resourcePath
            );
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($rename_tag_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($rename_tag_dto));
            } else {
                $httpBody = $rename_tag_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
